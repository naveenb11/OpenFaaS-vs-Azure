/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 229652.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 1.0], [1.0, 182.0], [1.1, 700.0], [1.2, 850.0], [1.3, 949.0], [1.4, 1012.0], [1.5, 1064.0], [1.6, 1106.0], [1.7, 1152.0], [1.8, 1212.0], [1.9, 1246.0], [2.0, 1283.0], [2.1, 1325.0], [2.2, 1365.0], [2.3, 1395.0], [2.4, 1427.0], [2.5, 1456.0], [2.6, 1489.0], [2.7, 1505.0], [2.8, 1528.0], [2.9, 1548.0], [3.0, 1576.0], [3.1, 1601.0], [3.2, 1622.0], [3.3, 1646.0], [3.4, 1660.0], [3.5, 1687.0], [3.6, 1706.0], [3.7, 1726.0], [3.8, 1747.0], [3.9, 1764.0], [4.0, 1784.0], [4.1, 1802.0], [4.2, 1830.0], [4.3, 1856.0], [4.4, 1878.0], [4.5, 1908.0], [4.6, 1925.0], [4.7, 1952.0], [4.8, 1986.0], [4.9, 2018.0], [5.0, 2038.0], [5.1, 2067.0], [5.2, 2098.0], [5.3, 2123.0], [5.4, 2159.0], [5.5, 2186.0], [5.6, 2208.0], [5.7, 2225.0], [5.8, 2249.0], [5.9, 2278.0], [6.0, 2300.0], [6.1, 2316.0], [6.2, 2335.0], [6.3, 2357.0], [6.4, 2387.0], [6.5, 2413.0], [6.6, 2432.0], [6.7, 2455.0], [6.8, 2477.0], [6.9, 2505.0], [7.0, 2530.0], [7.1, 2550.0], [7.2, 2574.0], [7.3, 2601.0], [7.4, 2619.0], [7.5, 2637.0], [7.6, 2658.0], [7.7, 2683.0], [7.8, 2705.0], [7.9, 2727.0], [8.0, 2745.0], [8.1, 2766.0], [8.2, 2785.0], [8.3, 2805.0], [8.4, 2828.0], [8.5, 2849.0], [8.6, 2878.0], [8.7, 2894.0], [8.8, 2922.0], [8.9, 2946.0], [9.0, 2969.0], [9.1, 2988.0], [9.2, 3008.0], [9.3, 3031.0], [9.4, 3051.0], [9.5, 3066.0], [9.6, 3081.0], [9.7, 3096.0], [9.8, 3111.0], [9.9, 3138.0], [10.0, 3160.0], [10.1, 3176.0], [10.2, 3194.0], [10.3, 3210.0], [10.4, 3229.0], [10.5, 3245.0], [10.6, 3265.0], [10.7, 3282.0], [10.8, 3306.0], [10.9, 3327.0], [11.0, 3343.0], [11.1, 3365.0], [11.2, 3381.0], [11.3, 3408.0], [11.4, 3430.0], [11.5, 3456.0], [11.6, 3470.0], [11.7, 3483.0], [11.8, 3498.0], [11.9, 3522.0], [12.0, 3542.0], [12.1, 3565.0], [12.2, 3587.0], [12.3, 3611.0], [12.4, 3629.0], [12.5, 3647.0], [12.6, 3665.0], [12.7, 3688.0], [12.8, 3705.0], [12.9, 3724.0], [13.0, 3742.0], [13.1, 3759.0], [13.2, 3781.0], [13.3, 3812.0], [13.4, 3828.0], [13.5, 3848.0], [13.6, 3868.0], [13.7, 3881.0], [13.8, 3898.0], [13.9, 3920.0], [14.0, 3936.0], [14.1, 3962.0], [14.2, 3976.0], [14.3, 3988.0], [14.4, 4009.0], [14.5, 4027.0], [14.6, 4047.0], [14.7, 4077.0], [14.8, 4087.0], [14.9, 4099.0], [15.0, 4116.0], [15.1, 4134.0], [15.2, 4151.0], [15.3, 4169.0], [15.4, 4193.0], [15.5, 4208.0], [15.6, 4228.0], [15.7, 4242.0], [15.8, 4252.0], [15.9, 4267.0], [16.0, 4287.0], [16.1, 4311.0], [16.2, 4328.0], [16.3, 4343.0], [16.4, 4359.0], [16.5, 4372.0], [16.6, 4388.0], [16.7, 4404.0], [16.8, 4421.0], [16.9, 4431.0], [17.0, 4446.0], [17.1, 4458.0], [17.2, 4468.0], [17.3, 4481.0], [17.4, 4495.0], [17.5, 4511.0], [17.6, 4525.0], [17.7, 4546.0], [17.8, 4565.0], [17.9, 4576.0], [18.0, 4584.0], [18.1, 4602.0], [18.2, 4616.0], [18.3, 4630.0], [18.4, 4642.0], [18.5, 4656.0], [18.6, 4672.0], [18.7, 4686.0], [18.8, 4699.0], [18.9, 4709.0], [19.0, 4726.0], [19.1, 4737.0], [19.2, 4751.0], [19.3, 4760.0], [19.4, 4775.0], [19.5, 4790.0], [19.6, 4803.0], [19.7, 4813.0], [19.8, 4823.0], [19.9, 4835.0], [20.0, 4854.0], [20.1, 4868.0], [20.2, 4883.0], [20.3, 4895.0], [20.4, 4909.0], [20.5, 4922.0], [20.6, 4932.0], [20.7, 4944.0], [20.8, 4958.0], [20.9, 4964.0], [21.0, 4970.0], [21.1, 4979.0], [21.2, 4988.0], [21.3, 4998.0], [21.4, 5008.0], [21.5, 5015.0], [21.6, 5027.0], [21.7, 5035.0], [21.8, 5041.0], [21.9, 5049.0], [22.0, 5057.0], [22.1, 5062.0], [22.2, 5067.0], [22.3, 5076.0], [22.4, 5086.0], [22.5, 5095.0], [22.6, 5104.0], [22.7, 5112.0], [22.8, 5119.0], [22.9, 5129.0], [23.0, 5138.0], [23.1, 5145.0], [23.2, 5153.0], [23.3, 5160.0], [23.4, 5166.0], [23.5, 5173.0], [23.6, 5179.0], [23.7, 5183.0], [23.8, 5192.0], [23.9, 5198.0], [24.0, 5204.0], [24.1, 5212.0], [24.2, 5218.0], [24.3, 5227.0], [24.4, 5231.0], [24.5, 5237.0], [24.6, 5244.0], [24.7, 5252.0], [24.8, 5258.0], [24.9, 5262.0], [25.0, 5266.0], [25.1, 5273.0], [25.2, 5281.0], [25.3, 5285.0], [25.4, 5293.0], [25.5, 5302.0], [25.6, 5308.0], [25.7, 5312.0], [25.8, 5319.0], [25.9, 5326.0], [26.0, 5332.0], [26.1, 5337.0], [26.2, 5343.0], [26.3, 5348.0], [26.4, 5354.0], [26.5, 5361.0], [26.6, 5366.0], [26.7, 5375.0], [26.8, 5381.0], [26.9, 5387.0], [27.0, 5392.0], [27.1, 5399.0], [27.2, 5406.0], [27.3, 5413.0], [27.4, 5419.0], [27.5, 5424.0], [27.6, 5430.0], [27.7, 5434.0], [27.8, 5439.0], [27.9, 5445.0], [28.0, 5451.0], [28.1, 5456.0], [28.2, 5460.0], [28.3, 5466.0], [28.4, 5474.0], [28.5, 5480.0], [28.6, 5484.0], [28.7, 5490.0], [28.8, 5496.0], [28.9, 5501.0], [29.0, 5507.0], [29.1, 5513.0], [29.2, 5517.0], [29.3, 5522.0], [29.4, 5530.0], [29.5, 5533.0], [29.6, 5538.0], [29.7, 5542.0], [29.8, 5547.0], [29.9, 5554.0], [30.0, 5559.0], [30.1, 5564.0], [30.2, 5569.0], [30.3, 5574.0], [30.4, 5577.0], [30.5, 5582.0], [30.6, 5588.0], [30.7, 5593.0], [30.8, 5598.0], [30.9, 5605.0], [31.0, 5609.0], [31.1, 5615.0], [31.2, 5622.0], [31.3, 5630.0], [31.4, 5634.0], [31.5, 5638.0], [31.6, 5643.0], [31.7, 5647.0], [31.8, 5652.0], [31.9, 5656.0], [32.0, 5661.0], [32.1, 5666.0], [32.2, 5669.0], [32.3, 5673.0], [32.4, 5677.0], [32.5, 5680.0], [32.6, 5685.0], [32.7, 5691.0], [32.8, 5695.0], [32.9, 5700.0], [33.0, 5705.0], [33.1, 5710.0], [33.2, 5713.0], [33.3, 5719.0], [33.4, 5724.0], [33.5, 5727.0], [33.6, 5731.0], [33.7, 5734.0], [33.8, 5741.0], [33.9, 5745.0], [34.0, 5751.0], [34.1, 5756.0], [34.2, 5761.0], [34.3, 5766.0], [34.4, 5770.0], [34.5, 5773.0], [34.6, 5778.0], [34.7, 5783.0], [34.8, 5787.0], [34.9, 5789.0], [35.0, 5791.0], [35.1, 5794.0], [35.2, 5796.0], [35.3, 5802.0], [35.4, 5807.0], [35.5, 5810.0], [35.6, 5814.0], [35.7, 5817.0], [35.8, 5823.0], [35.9, 5827.0], [36.0, 5832.0], [36.1, 5836.0], [36.2, 5839.0], [36.3, 5842.0], [36.4, 5846.0], [36.5, 5851.0], [36.6, 5856.0], [36.7, 5860.0], [36.8, 5862.0], [36.9, 5866.0], [37.0, 5871.0], [37.1, 5875.0], [37.2, 5880.0], [37.3, 5885.0], [37.4, 5889.0], [37.5, 5891.0], [37.6, 5894.0], [37.7, 5899.0], [37.8, 5903.0], [37.9, 5907.0], [38.0, 5912.0], [38.1, 5915.0], [38.2, 5917.0], [38.3, 5921.0], [38.4, 5925.0], [38.5, 5930.0], [38.6, 5936.0], [38.7, 5940.0], [38.8, 5943.0], [38.9, 5949.0], [39.0, 5953.0], [39.1, 5959.0], [39.2, 5962.0], [39.3, 5967.0], [39.4, 5970.0], [39.5, 5973.0], [39.6, 5977.0], [39.7, 5981.0], [39.8, 5986.0], [39.9, 5989.0], [40.0, 5993.0], [40.1, 5997.0], [40.2, 6001.0], [40.3, 6008.0], [40.4, 6010.0], [40.5, 6015.0], [40.6, 6018.0], [40.7, 6024.0], [40.8, 6027.0], [40.9, 6031.0], [41.0, 6037.0], [41.1, 6043.0], [41.2, 6047.0], [41.3, 6050.0], [41.4, 6054.0], [41.5, 6059.0], [41.6, 6064.0], [41.7, 6068.0], [41.8, 6073.0], [41.9, 6076.0], [42.0, 6080.0], [42.1, 6084.0], [42.2, 6087.0], [42.3, 6092.0], [42.4, 6095.0], [42.5, 6098.0], [42.6, 6101.0], [42.7, 6103.0], [42.8, 6106.0], [42.9, 6110.0], [43.0, 6115.0], [43.1, 6118.0], [43.2, 6122.0], [43.3, 6126.0], [43.4, 6130.0], [43.5, 6135.0], [43.6, 6137.0], [43.7, 6141.0], [43.8, 6144.0], [43.9, 6148.0], [44.0, 6153.0], [44.1, 6158.0], [44.2, 6162.0], [44.3, 6166.0], [44.4, 6170.0], [44.5, 6173.0], [44.6, 6176.0], [44.7, 6181.0], [44.8, 6185.0], [44.9, 6189.0], [45.0, 6193.0], [45.1, 6197.0], [45.2, 6201.0], [45.3, 6204.0], [45.4, 6207.0], [45.5, 6211.0], [45.6, 6215.0], [45.7, 6219.0], [45.8, 6222.0], [45.9, 6226.0], [46.0, 6230.0], [46.1, 6235.0], [46.2, 6240.0], [46.3, 6244.0], [46.4, 6246.0], [46.5, 6252.0], [46.6, 6256.0], [46.7, 6259.0], [46.8, 6263.0], [46.9, 6268.0], [47.0, 6272.0], [47.1, 6278.0], [47.2, 6283.0], [47.3, 6288.0], [47.4, 6292.0], [47.5, 6295.0], [47.6, 6302.0], [47.7, 6306.0], [47.8, 6310.0], [47.9, 6316.0], [48.0, 6321.0], [48.1, 6325.0], [48.2, 6329.0], [48.3, 6332.0], [48.4, 6337.0], [48.5, 6343.0], [48.6, 6347.0], [48.7, 6354.0], [48.8, 6359.0], [48.9, 6362.0], [49.0, 6366.0], [49.1, 6372.0], [49.2, 6379.0], [49.3, 6384.0], [49.4, 6388.0], [49.5, 6391.0], [49.6, 6395.0], [49.7, 6399.0], [49.8, 6402.0], [49.9, 6407.0], [50.0, 6412.0], [50.1, 6415.0], [50.2, 6419.0], [50.3, 6424.0], [50.4, 6429.0], [50.5, 6434.0], [50.6, 6437.0], [50.7, 6446.0], [50.8, 6451.0], [50.9, 6456.0], [51.0, 6460.0], [51.1, 6464.0], [51.2, 6469.0], [51.3, 6473.0], [51.4, 6476.0], [51.5, 6480.0], [51.6, 6485.0], [51.7, 6488.0], [51.8, 6494.0], [51.9, 6499.0], [52.0, 6503.0], [52.1, 6508.0], [52.2, 6514.0], [52.3, 6519.0], [52.4, 6526.0], [52.5, 6531.0], [52.6, 6536.0], [52.7, 6540.0], [52.8, 6546.0], [52.9, 6551.0], [53.0, 6554.0], [53.1, 6558.0], [53.2, 6562.0], [53.3, 6568.0], [53.4, 6572.0], [53.5, 6577.0], [53.6, 6581.0], [53.7, 6585.0], [53.8, 6589.0], [53.9, 6595.0], [54.0, 6599.0], [54.1, 6603.0], [54.2, 6609.0], [54.3, 6615.0], [54.4, 6621.0], [54.5, 6625.0], [54.6, 6629.0], [54.7, 6634.0], [54.8, 6639.0], [54.9, 6643.0], [55.0, 6648.0], [55.1, 6652.0], [55.2, 6657.0], [55.3, 6661.0], [55.4, 6666.0], [55.5, 6668.0], [55.6, 6673.0], [55.7, 6678.0], [55.8, 6682.0], [55.9, 6685.0], [56.0, 6689.0], [56.1, 6693.0], [56.2, 6697.0], [56.3, 6699.0], [56.4, 6705.0], [56.5, 6709.0], [56.6, 6714.0], [56.7, 6721.0], [56.8, 6728.0], [56.9, 6733.0], [57.0, 6737.0], [57.1, 6743.0], [57.2, 6747.0], [57.3, 6751.0], [57.4, 6755.0], [57.5, 6762.0], [57.6, 6767.0], [57.7, 6773.0], [57.8, 6777.0], [57.9, 6780.0], [58.0, 6789.0], [58.1, 6794.0], [58.2, 6799.0], [58.3, 6804.0], [58.4, 6808.0], [58.5, 6813.0], [58.6, 6817.0], [58.7, 6821.0], [58.8, 6825.0], [58.9, 6830.0], [59.0, 6837.0], [59.1, 6840.0], [59.2, 6844.0], [59.3, 6847.0], [59.4, 6855.0], [59.5, 6858.0], [59.6, 6863.0], [59.7, 6869.0], [59.8, 6873.0], [59.9, 6878.0], [60.0, 6883.0], [60.1, 6887.0], [60.2, 6891.0], [60.3, 6897.0], [60.4, 6902.0], [60.5, 6909.0], [60.6, 6915.0], [60.7, 6922.0], [60.8, 6926.0], [60.9, 6931.0], [61.0, 6938.0], [61.1, 6943.0], [61.2, 6948.0], [61.3, 6952.0], [61.4, 6957.0], [61.5, 6961.0], [61.6, 6966.0], [61.7, 6970.0], [61.8, 6976.0], [61.9, 6980.0], [62.0, 6987.0], [62.1, 6992.0], [62.2, 6996.0], [62.3, 7001.0], [62.4, 7008.0], [62.5, 7013.0], [62.6, 7019.0], [62.7, 7024.0], [62.8, 7030.0], [62.9, 7034.0], [63.0, 7041.0], [63.1, 7047.0], [63.2, 7050.0], [63.3, 7058.0], [63.4, 7065.0], [63.5, 7071.0], [63.6, 7080.0], [63.7, 7084.0], [63.8, 7090.0], [63.9, 7097.0], [64.0, 7103.0], [64.1, 7109.0], [64.2, 7115.0], [64.3, 7122.0], [64.4, 7131.0], [64.5, 7137.0], [64.6, 7144.0], [64.7, 7150.0], [64.8, 7157.0], [64.9, 7164.0], [65.0, 7170.0], [65.1, 7176.0], [65.2, 7183.0], [65.3, 7188.0], [65.4, 7197.0], [65.5, 7201.0], [65.6, 7206.0], [65.7, 7213.0], [65.8, 7221.0], [65.9, 7227.0], [66.0, 7235.0], [66.1, 7242.0], [66.2, 7248.0], [66.3, 7254.0], [66.4, 7263.0], [66.5, 7269.0], [66.6, 7275.0], [66.7, 7286.0], [66.8, 7292.0], [66.9, 7301.0], [67.0, 7307.0], [67.1, 7315.0], [67.2, 7321.0], [67.3, 7329.0], [67.4, 7335.0], [67.5, 7343.0], [67.6, 7352.0], [67.7, 7363.0], [67.8, 7369.0], [67.9, 7376.0], [68.0, 7382.0], [68.1, 7394.0], [68.2, 7405.0], [68.3, 7415.0], [68.4, 7427.0], [68.5, 7433.0], [68.6, 7442.0], [68.7, 7451.0], [68.8, 7458.0], [68.9, 7471.0], [69.0, 7478.0], [69.1, 7487.0], [69.2, 7496.0], [69.3, 7506.0], [69.4, 7516.0], [69.5, 7529.0], [69.6, 7536.0], [69.7, 7547.0], [69.8, 7556.0], [69.9, 7568.0], [70.0, 7579.0], [70.1, 7589.0], [70.2, 7599.0], [70.3, 7612.0], [70.4, 7618.0], [70.5, 7627.0], [70.6, 7639.0], [70.7, 7650.0], [70.8, 7658.0], [70.9, 7666.0], [71.0, 7674.0], [71.1, 7685.0], [71.2, 7696.0], [71.3, 7705.0], [71.4, 7713.0], [71.5, 7726.0], [71.6, 7741.0], [71.7, 7750.0], [71.8, 7760.0], [71.9, 7772.0], [72.0, 7782.0], [72.1, 7796.0], [72.2, 7808.0], [72.3, 7823.0], [72.4, 7841.0], [72.5, 7854.0], [72.6, 7870.0], [72.7, 7880.0], [72.8, 7900.0], [72.9, 7913.0], [73.0, 7934.0], [73.1, 7952.0], [73.2, 7965.0], [73.3, 7978.0], [73.4, 7990.0], [73.5, 8009.0], [73.6, 8028.0], [73.7, 8047.0], [73.8, 8065.0], [73.9, 8083.0], [74.0, 8107.0], [74.1, 8121.0], [74.2, 8146.0], [74.3, 8173.0], [74.4, 8203.0], [74.5, 8233.0], [74.6, 8251.0], [74.7, 8291.0], [74.8, 8311.0], [74.9, 8348.0], [75.0, 8384.0], [75.1, 8409.0], [75.2, 8446.0], [75.3, 8489.0], [75.4, 8538.0], [75.5, 8596.0], [75.6, 8650.0], [75.7, 8706.0], [75.8, 8767.0], [75.9, 8834.0], [76.0, 8893.0], [76.1, 9010.0], [76.2, 9114.0], [76.3, 9157.0], [76.4, 9197.0], [76.5, 9295.0], [76.6, 9354.0], [76.7, 9401.0], [76.8, 9440.0], [76.9, 9495.0], [77.0, 9565.0], [77.1, 9633.0], [77.2, 9667.0], [77.3, 9722.0], [77.4, 9809.0], [77.5, 9891.0], [77.6, 9966.0], [77.7, 10039.0], [77.8, 10082.0], [77.9, 10166.0], [78.0, 10218.0], [78.1, 10300.0], [78.2, 10351.0], [78.3, 10388.0], [78.4, 10467.0], [78.5, 10513.0], [78.6, 10568.0], [78.7, 10618.0], [78.8, 10664.0], [78.9, 10697.0], [79.0, 10765.0], [79.1, 10813.0], [79.2, 10853.0], [79.3, 10888.0], [79.4, 10941.0], [79.5, 10998.0], [79.6, 11063.0], [79.7, 11107.0], [79.8, 11146.0], [79.9, 11208.0], [80.0, 11259.0], [80.1, 11302.0], [80.2, 11359.0], [80.3, 11405.0], [80.4, 11463.0], [80.5, 11515.0], [80.6, 11551.0], [80.7, 11583.0], [80.8, 11625.0], [80.9, 11658.0], [81.0, 11686.0], [81.1, 11727.0], [81.2, 11764.0], [81.3, 11802.0], [81.4, 11844.0], [81.5, 11887.0], [81.6, 11920.0], [81.7, 11943.0], [81.8, 11980.0], [81.9, 12010.0], [82.0, 12046.0], [82.1, 12085.0], [82.2, 12104.0], [82.3, 12155.0], [82.4, 12207.0], [82.5, 12248.0], [82.6, 12293.0], [82.7, 12334.0], [82.8, 12387.0], [82.9, 12466.0], [83.0, 12523.0], [83.1, 12592.0], [83.2, 12647.0], [83.3, 12713.0], [83.4, 12787.0], [83.5, 12848.0], [83.6, 12927.0], [83.7, 13005.0], [83.8, 13085.0], [83.9, 13156.0], [84.0, 13225.0], [84.1, 13278.0], [84.2, 13325.0], [84.3, 13422.0], [84.4, 13487.0], [84.5, 13581.0], [84.6, 13718.0], [84.7, 13824.0], [84.8, 13978.0], [84.9, 14166.0], [85.0, 14327.0], [85.1, 14508.0], [85.2, 14613.0], [85.3, 14720.0], [85.4, 14823.0], [85.5, 14892.0], [85.6, 14958.0], [85.7, 15035.0], [85.8, 15138.0], [85.9, 15232.0], [86.0, 15339.0], [86.1, 15429.0], [86.2, 15541.0], [86.3, 15614.0], [86.4, 15688.0], [86.5, 15785.0], [86.6, 15883.0], [86.7, 15933.0], [86.8, 15987.0], [86.9, 16028.0], [87.0, 16084.0], [87.1, 16131.0], [87.2, 16183.0], [87.3, 16228.0], [87.4, 16267.0], [87.5, 16316.0], [87.6, 16351.0], [87.7, 16388.0], [87.8, 16442.0], [87.9, 16481.0], [88.0, 16531.0], [88.1, 16557.0], [88.2, 16586.0], [88.3, 16625.0], [88.4, 16663.0], [88.5, 16698.0], [88.6, 16736.0], [88.7, 16765.0], [88.8, 16796.0], [88.9, 16834.0], [89.0, 16901.0], [89.1, 16942.0], [89.2, 16974.0], [89.3, 17021.0], [89.4, 17060.0], [89.5, 17098.0], [89.6, 17144.0], [89.7, 17187.0], [89.8, 17215.0], [89.9, 17256.0], [90.0, 17304.0], [90.1, 17363.0], [90.2, 17399.0], [90.3, 17436.0], [90.4, 17473.0], [90.5, 17526.0], [90.6, 17552.0], [90.7, 17590.0], [90.8, 17630.0], [90.9, 17674.0], [91.0, 17723.0], [91.1, 17765.0], [91.2, 17829.0], [91.3, 17888.0], [91.4, 17930.0], [91.5, 17990.0], [91.6, 18071.0], [91.7, 18152.0], [91.8, 18238.0], [91.9, 18311.0], [92.0, 18413.0], [92.1, 18633.0], [92.2, 18788.0], [92.3, 19022.0], [92.4, 19446.0], [92.5, 20118.0], [92.6, 20935.0], [92.7, 21352.0], [92.8, 21565.0], [92.9, 21678.0], [93.0, 21820.0], [93.1, 21960.0], [93.2, 22077.0], [93.3, 22180.0], [93.4, 22269.0], [93.5, 22406.0], [93.6, 22579.0], [93.7, 22722.0], [93.8, 22965.0], [93.9, 23278.0], [94.0, 23562.0], [94.1, 23953.0], [94.2, 24143.0], [94.3, 24455.0], [94.4, 24805.0], [94.5, 25046.0], [94.6, 25250.0], [94.7, 25397.0], [94.8, 25631.0], [94.9, 25799.0], [95.0, 25981.0], [95.1, 26197.0], [95.2, 26354.0], [95.3, 26522.0], [95.4, 26640.0], [95.5, 26775.0], [95.6, 26895.0], [95.7, 27001.0], [95.8, 27107.0], [95.9, 27196.0], [96.0, 27291.0], [96.1, 27383.0], [96.2, 27419.0], [96.3, 27463.0], [96.4, 27553.0], [96.5, 27690.0], [96.6, 27832.0], [96.7, 27987.0], [96.8, 28209.0], [96.9, 28434.0], [97.0, 28526.0], [97.1, 28631.0], [97.2, 28777.0], [97.3, 29052.0], [97.4, 29278.0], [97.5, 29474.0], [97.6, 29639.0], [97.7, 29899.0], [97.8, 30285.0], [97.9, 32035.0], [98.0, 33083.0], [98.1, 33734.0], [98.2, 34434.0], [98.3, 36870.0], [98.4, 38419.0], [98.5, 39057.0], [98.6, 48229.0], [98.7, 60201.0], [98.8, 107501.0], [98.9, 107634.0], [99.0, 107725.0], [99.1, 107874.0], [99.2, 107987.0], [99.3, 110280.0], [99.4, 112151.0], [99.5, 112955.0], [99.6, 113328.0], [99.7, 115183.0], [99.8, 123098.0], [99.9, 219733.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 523.0, "series": [{"data": [[0.0, 186.0], [218400.0, 1.0], [113100.0, 7.0], [111500.0, 5.0], [122700.0, 1.0], [220200.0, 1.0], [100.0, 19.0], [34500.0, 2.0], [33700.0, 3.0], [32900.0, 2.0], [35300.0, 1.0], [36100.0, 1.0], [37700.0, 2.0], [38500.0, 2.0], [48100.0, 2.0], [56900.0, 1.0], [57700.0, 2.0], [58500.0, 1.0], [60900.0, 1.0], [60100.0, 1.0], [64900.0, 2.0], [300.0, 1.0], [107400.0, 1.0], [112200.0, 3.0], [500.0, 6.0], [600.0, 8.0], [700.0, 12.0], [800.0, 20.0], [900.0, 26.0], [1000.0, 38.0], [1100.0, 39.0], [1200.0, 56.0], [1300.0, 51.0], [1400.0, 65.0], [1500.0, 93.0], [1600.0, 94.0], [1700.0, 102.0], [1800.0, 81.0], [1900.0, 69.0], [2000.0, 78.0], [2100.0, 70.0], [2200.0, 85.0], [2300.0, 90.0], [2400.0, 87.0], [2500.0, 84.0], [2600.0, 98.0], [2700.0, 97.0], [2800.0, 90.0], [2900.0, 87.0], [3000.0, 111.0], [3100.0, 105.0], [3300.0, 103.0], [3200.0, 104.0], [3400.0, 105.0], [219700.0, 2.0], [3500.0, 88.0], [3600.0, 103.0], [3700.0, 102.0], [3800.0, 109.0], [3900.0, 109.0], [4000.0, 110.0], [4100.0, 105.0], [4300.0, 122.0], [4200.0, 123.0], [68100.0, 1.0], [4600.0, 143.0], [4500.0, 135.0], [4400.0, 152.0], [4800.0, 146.0], [4700.0, 157.0], [4900.0, 200.0], [5000.0, 251.0], [5100.0, 272.0], [5200.0, 308.0], [5300.0, 329.0], [5600.0, 416.0], [5500.0, 391.0], [5400.0, 347.0], [5800.0, 493.0], [5700.0, 472.0], [6000.0, 481.0], [6100.0, 523.0], [5900.0, 488.0], [6200.0, 476.0], [6300.0, 433.0], [6400.0, 440.0], [6500.0, 416.0], [6600.0, 461.0], [6700.0, 379.0], [6900.0, 383.0], [6800.0, 428.0], [108100.0, 1.0], [7000.0, 338.0], [7100.0, 302.0], [112900.0, 6.0], [7400.0, 219.0], [7300.0, 248.0], [7200.0, 287.0], [7600.0, 207.0], [7500.0, 195.0], [119300.0, 2.0], [7800.0, 130.0], [7900.0, 133.0], [7700.0, 181.0], [8100.0, 86.0], [8000.0, 100.0], [8200.0, 69.0], [8400.0, 52.0], [8600.0, 38.0], [8800.0, 31.0], [9000.0, 18.0], [9200.0, 23.0], [9600.0, 38.0], [9400.0, 42.0], [9800.0, 23.0], [10200.0, 31.0], [10000.0, 36.0], [10400.0, 31.0], [10600.0, 53.0], [11000.0, 36.0], [11200.0, 42.0], [10800.0, 52.0], [11400.0, 35.0], [11600.0, 62.0], [12000.0, 61.0], [12200.0, 43.0], [11800.0, 50.0], [12600.0, 32.0], [12400.0, 29.0], [13200.0, 38.0], [12800.0, 27.0], [13000.0, 27.0], [13400.0, 28.0], [13600.0, 13.0], [13800.0, 18.0], [14200.0, 16.0], [14000.0, 7.0], [14800.0, 26.0], [14400.0, 10.0], [14600.0, 19.0], [15200.0, 21.0], [15000.0, 25.0], [15600.0, 29.0], [15800.0, 23.0], [15400.0, 26.0], [16000.0, 40.0], [16200.0, 47.0], [17200.0, 46.0], [16400.0, 44.0], [16800.0, 37.0], [18000.0, 23.0], [18400.0, 16.0], [17600.0, 42.0], [18800.0, 9.0], [19200.0, 4.0], [19600.0, 4.0], [20000.0, 3.0], [20400.0, 2.0], [21200.0, 3.0], [20800.0, 1.0], [22400.0, 7.0], [22000.0, 18.0], [21600.0, 15.0], [22800.0, 3.0], [23200.0, 9.0], [23600.0, 4.0], [24000.0, 10.0], [24400.0, 5.0], [25200.0, 15.0], [24800.0, 7.0], [26000.0, 11.0], [25600.0, 13.0], [26400.0, 9.0], [27600.0, 11.0], [27200.0, 22.0], [26800.0, 18.0], [28000.0, 9.0], [28400.0, 17.0], [29200.0, 9.0], [28800.0, 5.0], [29600.0, 11.0], [30000.0, 3.0], [30400.0, 2.0], [30800.0, 1.0], [31600.0, 3.0], [32000.0, 4.0], [32400.0, 2.0], [33600.0, 3.0], [34400.0, 3.0], [35200.0, 2.0], [36000.0, 1.0], [36800.0, 1.0], [38400.0, 8.0], [40000.0, 1.0], [39200.0, 3.0], [44000.0, 2.0], [44800.0, 1.0], [55200.0, 1.0], [58400.0, 2.0], [60800.0, 1.0], [108800.0, 1.0], [112000.0, 2.0], [113600.0, 1.0], [118400.0, 1.0], [116800.0, 1.0], [113500.0, 3.0], [115100.0, 1.0], [229000.0, 1.0], [33900.0, 4.0], [34700.0, 1.0], [33100.0, 3.0], [38700.0, 2.0], [51500.0, 1.0], [57100.0, 1.0], [56300.0, 1.0], [60300.0, 1.0], [61900.0, 2.0], [107800.0, 15.0], [112600.0, 3.0], [114200.0, 1.0], [123800.0, 1.0], [127000.0, 1.0], [218900.0, 2.0], [108500.0, 1.0], [113300.0, 4.0], [111700.0, 1.0], [118100.0, 1.0], [219800.0, 3.0], [16500.0, 54.0], [16900.0, 50.0], [17300.0, 41.0], [17700.0, 37.0], [18100.0, 25.0], [18500.0, 6.0], [18900.0, 8.0], [19300.0, 1.0], [20100.0, 5.0], [19700.0, 5.0], [20900.0, 7.0], [21300.0, 9.0], [20500.0, 1.0], [22500.0, 19.0], [22100.0, 17.0], [21700.0, 13.0], [22900.0, 5.0], [23300.0, 4.0], [23700.0, 8.0], [24100.0, 4.0], [24500.0, 8.0], [25300.0, 12.0], [24900.0, 7.0], [26100.0, 8.0], [26500.0, 22.0], [25700.0, 10.0], [27300.0, 24.0], [26900.0, 19.0], [27700.0, 13.0], [28500.0, 19.0], [28100.0, 6.0], [29300.0, 12.0], [28900.0, 8.0], [29700.0, 6.0], [30100.0, 7.0], [30900.0, 1.0], [31300.0, 1.0], [32500.0, 2.0], [32100.0, 1.0], [33800.0, 2.0], [33000.0, 3.0], [34600.0, 2.0], [38600.0, 2.0], [37800.0, 1.0], [48200.0, 2.0], [56200.0, 1.0], [60200.0, 1.0], [65000.0, 1.0], [107600.0, 20.0], [112400.0, 2.0], [123600.0, 5.0], [220000.0, 2.0], [229600.0, 1.0], [220900.0, 1.0], [78700.0, 1.0], [107500.0, 13.0], [112300.0, 2.0], [113900.0, 2.0], [118700.0, 1.0], [120300.0, 1.0], [123500.0, 2.0], [33300.0, 5.0], [34100.0, 2.0], [34900.0, 1.0], [38900.0, 7.0], [38100.0, 1.0], [43700.0, 1.0], [48500.0, 1.0], [219500.0, 1.0], [59700.0, 1.0], [64500.0, 1.0], [113000.0, 6.0], [114600.0, 6.0], [111400.0, 3.0], [122600.0, 1.0], [220400.0, 1.0], [112100.0, 4.0], [113700.0, 1.0], [123300.0, 1.0], [8300.0, 66.0], [8700.0, 35.0], [8500.0, 36.0], [9100.0, 45.0], [8900.0, 14.0], [9300.0, 35.0], [9500.0, 30.0], [9700.0, 29.0], [9900.0, 29.0], [10100.0, 23.0], [10500.0, 34.0], [10700.0, 32.0], [10300.0, 44.0], [10900.0, 35.0], [11100.0, 40.0], [11700.0, 51.0], [11500.0, 54.0], [11300.0, 39.0], [11900.0, 65.0], [12100.0, 43.0], [12700.0, 31.0], [12300.0, 43.0], [12500.0, 29.0], [12900.0, 25.0], [13100.0, 27.0], [13300.0, 25.0], [13500.0, 21.0], [13700.0, 17.0], [219000.0, 1.0], [13900.0, 13.0], [14300.0, 11.0], [14100.0, 10.0], [14500.0, 18.0], [14700.0, 21.0], [14900.0, 27.0], [15100.0, 17.0], [15300.0, 15.0], [15500.0, 23.0], [15700.0, 19.0], [15900.0, 37.0], [16300.0, 53.0], [16100.0, 41.0], [16600.0, 58.0], [17000.0, 51.0], [17400.0, 48.0], [18200.0, 27.0], [17800.0, 38.0], [18600.0, 11.0], [19000.0, 11.0], [19400.0, 3.0], [20200.0, 2.0], [21000.0, 4.0], [21400.0, 10.0], [20600.0, 2.0], [22200.0, 24.0], [21800.0, 12.0], [22600.0, 12.0], [23000.0, 8.0], [23400.0, 9.0], [23800.0, 2.0], [24200.0, 13.0], [25400.0, 10.0], [25000.0, 12.0], [24600.0, 1.0], [26200.0, 15.0], [25800.0, 13.0], [26600.0, 12.0], [27400.0, 45.0], [27000.0, 19.0], [27800.0, 17.0], [28600.0, 19.0], [28200.0, 13.0], [29000.0, 10.0], [29400.0, 10.0], [29800.0, 7.0], [30200.0, 6.0], [31000.0, 1.0], [31400.0, 1.0], [32200.0, 2.0], [32600.0, 1.0], [31800.0, 1.0], [34800.0, 5.0], [34000.0, 4.0], [33200.0, 2.0], [38800.0, 1.0], [38000.0, 1.0], [43600.0, 2.0], [219900.0, 2.0], [57200.0, 1.0], [229500.0, 1.0], [60400.0, 2.0], [108000.0, 9.0], [109600.0, 1.0], [112800.0, 1.0], [117600.0, 1.0], [120800.0, 4.0], [119200.0, 1.0], [219200.0, 1.0], [220100.0, 4.0], [107900.0, 19.0], [112700.0, 3.0], [111100.0, 1.0], [123900.0, 1.0], [221000.0, 1.0], [34300.0, 4.0], [33500.0, 2.0], [35900.0, 1.0], [38300.0, 6.0], [39100.0, 4.0], [60700.0, 2.0], [110200.0, 4.0], [113400.0, 2.0], [123000.0, 4.0], [219600.0, 1.0], [107700.0, 18.0], [112500.0, 1.0], [110900.0, 2.0], [114100.0, 1.0], [218200.0, 1.0], [16700.0, 61.0], [17100.0, 53.0], [17500.0, 60.0], [18300.0, 18.0], [17900.0, 38.0], [19100.0, 4.0], [18700.0, 11.0], [19900.0, 5.0], [19500.0, 2.0], [20700.0, 2.0], [21100.0, 5.0], [21500.0, 15.0], [22300.0, 13.0], [21900.0, 20.0], [22700.0, 16.0], [23100.0, 4.0], [23500.0, 6.0], [23900.0, 11.0], [24300.0, 4.0], [25100.0, 8.0], [24700.0, 8.0], [25500.0, 7.0], [26300.0, 11.0], [25900.0, 8.0], [27100.0, 22.0], [27500.0, 18.0], [26700.0, 13.0], [27900.0, 11.0], [28300.0, 8.0], [29100.0, 5.0], [28700.0, 11.0], [29500.0, 14.0], [30300.0, 4.0], [29900.0, 5.0], [31100.0, 2.0], [31900.0, 1.0], [32300.0, 2.0], [32700.0, 2.0], [34200.0, 2.0], [33400.0, 3.0], [38200.0, 5.0], [39000.0, 3.0], [42200.0, 1.0], [43800.0, 1.0], [54200.0, 1.0], [58200.0, 1.0], [60600.0, 2.0], [59800.0, 1.0], [62200.0, 1.0], [113200.0, 3.0], [111600.0, 2.0], [118000.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 229600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 20.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 18553.0, "series": [{"data": [[0.0, 20.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 322.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 18553.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1105.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 17.905838041431252, "minX": 1.6921188E12, "maxY": 100.0, "series": [{"data": [[1.69211898E12, 100.0], [1.69211928E12, 100.0], [1.6921203E12, 99.74428274428278], [1.6921206E12, 77.81132075471692], [1.69212018E12, 100.0], [1.69212048E12, 88.30657894736851], [1.69211958E12, 100.0], [1.69211988E12, 100.0], [1.69211946E12, 100.0], [1.69212078E12, 49.87153652392952], [1.69211976E12, 100.0], [1.69211886E12, 100.0], [1.69211916E12, 100.0], [1.69211904E12, 100.0], [1.69212006E12, 100.0], [1.69212066E12, 71.97416020671832], [1.69212036E12, 97.9047619047619], [1.69211994E12, 100.0], [1.69212024E12, 100.0], [1.69211934E12, 100.0], [1.69211964E12, 100.0], [1.69211922E12, 100.0], [1.69212084E12, 17.905838041431252], [1.69211952E12, 100.0], [1.69212054E12, 84.21066666666665], [1.69211892E12, 100.0], [1.69212042E12, 94.62298387096776], [1.6921188E12, 100.0], [1.69212072E12, 64.53720508166975], [1.69211982E12, 100.0], [1.69212012E12, 100.0], [1.6921197E12, 100.0], [1.69212E12, 100.0], [1.6921191E12, 100.0], [1.6921194E12, 100.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69212084E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 21.47058823529412, "minX": 1.0, "maxY": 35989.06250000001, "series": [{"data": [[2.0, 2714.2352941176464], [3.0, 3100.333333333333], [4.0, 15667.428571428569], [5.0, 158.45454545454547], [6.0, 1625.6666666666665], [7.0, 4255.5], [8.0, 111.44444444444444], [9.0, 108.05000000000001], [10.0, 204.76470588235293], [11.0, 21.47058823529412], [12.0, 57.29411764705884], [13.0, 1016.5], [14.0, 78.0], [15.0, 273.4615384615384], [16.0, 1375.375], [17.0, 1109.0], [18.0, 1133.2], [19.0, 1402.4117647058824], [20.0, 1920.0], [21.0, 1539.125], [22.0, 1654.0], [23.0, 1424.1875000000002], [24.0, 1939.8928571428573], [25.0, 2095.0], [26.0, 1844.0322580645163], [27.0, 1643.0], [28.0, 1620.0526315789473], [29.0, 3643.450980392157], [30.0, 4764.513513513513], [31.0, 2377.6470588235297], [33.0, 2638.0], [32.0, 2753.217391304348], [35.0, 2605.086956521739], [34.0, 2643.2], [37.0, 3058.0], [36.0, 2859.1666666666665], [39.0, 3886.0], [38.0, 4325.133333333332], [41.0, 4230.181818181819], [40.0, 4174.666666666667], [43.0, 3105.111111111111], [42.0, 3599.0], [45.0, 3444.1388888888887], [44.0, 3103.5], [47.0, 3552.3636363636365], [46.0, 3508.076923076923], [49.0, 3525.65], [48.0, 3784.08], [51.0, 17418.999999999996], [50.0, 3248.869565217392], [53.0, 3334.25], [52.0, 10650.46875], [55.0, 3313.923076923076], [54.0, 3223.9999999999995], [57.0, 4778.833333333333], [56.0, 3518.506666666667], [59.0, 3850.3333333333335], [58.0, 4866.476190476191], [61.0, 5144.479452054796], [60.0, 6224.899999999997], [63.0, 4031.0], [62.0, 4420.279720279717], [67.0, 9947.72549019608], [66.0, 4308.173076923079], [65.0, 5629.510638297873], [64.0, 3758.125], [71.0, 4187.2], [70.0, 4504.0], [69.0, 13335.76086956522], [68.0, 27134.75], [75.0, 21423.285714285714], [74.0, 25672.53076923076], [73.0, 7177.806451612903], [72.0, 4671.590909090909], [79.0, 9871.52380952381], [78.0, 5750.565217391304], [77.0, 5679.0], [76.0, 8526.380952380954], [83.0, 5026.0], [82.0, 5172.421052631578], [81.0, 6020.25], [80.0, 6525.544217687071], [87.0, 9488.565217391306], [86.0, 9861.588571428576], [85.0, 12633.760416666672], [84.0, 12233.921658986186], [91.0, 6294.411290322583], [90.0, 6599.0204081632655], [89.0, 8129.706422018344], [88.0, 6476.74074074074], [95.0, 14916.0], [94.0, 35989.06250000001], [93.0, 27518.387096774193], [92.0, 13300.269841269836], [99.0, 6957.905286343612], [98.0, 6439.508403361346], [97.0, 5076.509803921569], [96.0, 7875.952380952381], [100.0, 10445.166519883425], [1.0, 164.42857142857142]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[92.8770999999998, 9732.688099999994]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 617.8666666666667, "minX": 1.6921188E12, "maxY": 200322.25, "series": [{"data": [[1.69211898E12, 172867.41666666666], [1.69211928E12, 141742.28333333333], [1.6921203E12, 119602.41666666667], [1.6921206E12, 100086.65], [1.69212018E12, 150618.71666666667], [1.69212048E12, 186770.85], [1.69211958E12, 149287.46666666667], [1.69211988E12, 153025.71666666667], [1.69211946E12, 120783.58333333333], [1.69212078E12, 200322.25], [1.69211976E12, 54725.88333333333], [1.69211886E12, 187698.56666666668], [1.69211916E12, 79380.95], [1.69211904E12, 110280.18333333333], [1.69212006E12, 166858.96666666667], [1.69212066E12, 93344.51666666666], [1.69212036E12, 190071.8], [1.69211994E12, 169488.56666666668], [1.69212024E12, 140814.78333333333], [1.69211934E12, 195816.6], [1.69211964E12, 120409.0], [1.69211922E12, 119714.75], [1.69212084E12, 96210.81666666667], [1.69211952E12, 170128.86666666667], [1.69212054E12, 92825.33333333333], [1.69211892E12, 111796.93333333333], [1.69212042E12, 119788.08333333333], [1.6921188E12, 90869.78333333334], [1.69212072E12, 134037.0], [1.69211982E12, 129639.16666666667], [1.69212012E12, 168682.3], [1.6921197E12, 189240.1], [1.69212E12, 147610.01666666666], [1.6921191E12, 107103.5], [1.6921194E12, 95937.68333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69211898E12, 1995.2], [1.69211928E12, 1626.05], [1.6921203E12, 1315.0166666666667], [1.6921206E12, 1158.8666666666666], [1.69212018E12, 1656.5666666666666], [1.69212048E12, 2077.3333333333335], [1.69211958E12, 1722.1333333333334], [1.69211988E12, 1795.6166666666666], [1.69211946E12, 1358.5833333333333], [1.69212078E12, 2170.5666666666666], [1.69211976E12, 617.8666666666667], [1.69211886E12, 2031.15], [1.69211916E12, 959.2833333333333], [1.69211904E12, 1208.4333333333334], [1.69212006E12, 1831.4], [1.69212066E12, 1057.9833333333333], [1.69212036E12, 2181.0], [1.69211994E12, 1872.45], [1.69212024E12, 1639.8], [1.69211934E12, 2154.0333333333333], [1.69211964E12, 1363.6833333333334], [1.69211922E12, 1361.4666666666667], [1.69212084E12, 943.2833333333333], [1.69211952E12, 1899.55], [1.69212054E12, 1025.0833333333333], [1.69211892E12, 1511.7833333333333], [1.69212042E12, 1355.7333333333333], [1.6921188E12, 1214.8166666666666], [1.69212072E12, 1506.1166666666666], [1.69211982E12, 1519.6333333333334], [1.69212012E12, 1940.5666666666666], [1.6921197E12, 2112.95], [1.69212E12, 1664.65], [1.6921191E12, 1216.3166666666666], [1.6921194E12, 1093.3]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69212084E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1717.7193973634642, "minX": 1.6921188E12, "maxY": 24122.951327433613, "series": [{"data": [[1.69211898E12, 10554.697260273975], [1.69211928E12, 12879.904201680669], [1.6921203E12, 13923.889812889805], [1.6921206E12, 7754.125000000004], [1.69212018E12, 10574.69141914192], [1.69212048E12, 7896.482894736835], [1.69211958E12, 10977.419047619032], [1.69211988E12, 8886.993911719917], [1.69211946E12, 10803.90342052313], [1.69212078E12, 4682.721662468507], [1.69211976E12, 24122.951327433613], [1.69211886E12, 4369.944818304173], [1.69211916E12, 12488.49857549858], [1.69211904E12, 10894.269230769218], [1.69212006E12, 8999.119402985078], [1.69212066E12, 13748.86304909561], [1.69212036E12, 6727.368421052631], [1.69211994E12, 7736.068613138687], [1.69212024E12, 8336.269999999995], [1.69211934E12, 8639.856598984774], [1.69211964E12, 12204.871743486974], [1.69211922E12, 12332.915662650594], [1.69212084E12, 1717.7193973634642], [1.69211952E12, 8362.589928057543], [1.69212054E12, 12960.872000000003], [1.69211892E12, 18072.849909584063], [1.69212042E12, 12131.340725806454], [1.6921188E12, 5011.984269662925], [1.69212072E12, 7117.758620689657], [1.69211982E12, 12971.22302158271], [1.69212012E12, 8894.342253521125], [1.6921197E12, 7100.617076326002], [1.69212E12, 10080.688013136285], [1.6921191E12, 13825.622471910116], [1.6921194E12, 15089.447500000011]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69212084E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1680.2617702448201, "minX": 1.6921188E12, "maxY": 24096.429203539814, "series": [{"data": [[1.69211898E12, 10535.05616438357], [1.69211928E12, 12849.415126050424], [1.6921203E12, 13901.972972972972], [1.6921206E12, 7726.476415094336], [1.69212018E12, 10551.486798679873], [1.69212048E12, 7875.288157894736], [1.69211958E12, 10952.979365079358], [1.69211988E12, 8865.762557077624], [1.69211946E12, 10762.51106639839], [1.69212078E12, 4661.555415617129], [1.69211976E12, 24096.429203539814], [1.69211886E12, 4348.900403768507], [1.69211916E12, 12470.529914529918], [1.69211904E12, 10869.425339366511], [1.69212006E12, 8977.094029850747], [1.69212066E12, 13726.803617571064], [1.69212036E12, 6705.759398496241], [1.69211994E12, 7710.223357664227], [1.69212024E12, 8317.118333333337], [1.69211934E12, 8597.16878172588], [1.69211964E12, 12179.10420841683], [1.69211922E12, 12310.746987951812], [1.69212084E12, 1680.2617702448201], [1.69211952E12, 8326.644604316545], [1.69212054E12, 12937.42933333335], [1.69211892E12, 18057.952983725165], [1.69212042E12, 12108.780241935474], [1.6921188E12, 4994.941573033708], [1.69212072E12, 7096.101633393823], [1.69211982E12, 12943.726618705034], [1.69212012E12, 8874.463380281697], [1.6921197E12, 7075.137128072443], [1.69212E12, 10051.055829228242], [1.6921191E12, 13803.649438202252], [1.6921194E12, 15061.672500000008]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69212084E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 46.369114877589425, "minX": 1.6921188E12, "maxY": 324.4337078651683, "series": [{"data": [[1.69211898E12, 49.2794520547946], [1.69211928E12, 73.62689075630252], [1.6921203E12, 51.85862785862788], [1.6921206E12, 63.31132075471695], [1.69212018E12, 52.876237623762385], [1.69212048E12, 52.10657894736844], [1.69211958E12, 58.71428571428572], [1.69211988E12, 53.449010654490145], [1.69211946E12, 80.579476861167], [1.69212078E12, 50.63098236775818], [1.69211976E12, 54.787610619469014], [1.69211886E12, 50.261103633916505], [1.69211916E12, 49.09116809116809], [1.69211904E12, 58.66063348416289], [1.69212006E12, 51.72388059701489], [1.69212066E12, 54.521963824289436], [1.69212036E12, 53.62155388471181], [1.69211994E12, 49.24233576642337], [1.69212024E12, 52.073333333333366], [1.69211934E12, 82.13451776649738], [1.69211964E12, 62.18637274549098], [1.69211922E12, 51.305220883534076], [1.69212084E12, 46.369114877589425], [1.69211952E12, 70.12805755395671], [1.69212054E12, 57.74400000000004], [1.69211892E12, 49.717902350813816], [1.69212042E12, 54.53427419354834], [1.6921188E12, 324.4337078651683], [1.69212072E12, 50.67876588021779], [1.69211982E12, 74.60431654676265], [1.69212012E12, 52.91549295774648], [1.6921197E12, 60.13324708926259], [1.69212E12, 76.36945812807883], [1.6921191E12, 56.37752808988766], [1.6921194E12, 73.4925]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69212084E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 130.0, "minX": 1.6921188E12, "maxY": 114177.0, "series": [{"data": [[1.69211898E12, 64983.0], [1.69211928E12, 60979.0], [1.6921203E12, 60483.0], [1.6921206E12, 33900.0], [1.69212018E12, 33833.0], [1.69212048E12, 19722.0], [1.69211958E12, 114177.0], [1.69211988E12, 59753.0], [1.69211946E12, 55253.0], [1.69212078E12, 15996.0], [1.69211976E12, 64954.0], [1.69211886E12, 54269.0], [1.69211916E12, 78710.0], [1.69211904E12, 33311.0], [1.69212006E12, 65064.0], [1.69212066E12, 58506.0], [1.69212036E12, 19180.0], [1.69211994E12, 31818.0], [1.69212024E12, 33504.0], [1.69211934E12, 64591.0], [1.69211964E12, 60665.0], [1.69211922E12, 61920.0], [1.69212084E12, 18476.0], [1.69211952E12, 60647.0], [1.69212054E12, 60363.0], [1.69211892E12, 27801.0], [1.69212042E12, 58252.0], [1.6921188E12, 27666.0], [1.69212072E12, 56931.0], [1.69211982E12, 34859.0], [1.69212012E12, 60199.0], [1.6921197E12, 33186.0], [1.69212E12, 59863.0], [1.6921191E12, 68109.0], [1.6921194E12, 112955.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69211898E12, 12770.5], [1.69211928E12, 12068.4], [1.6921203E12, 29551.5], [1.6921206E12, 14749.0], [1.69212018E12, 17391.9], [1.69212048E12, 9996.4], [1.69211958E12, 12319.8], [1.69211988E12, 16221.8], [1.69211946E12, 17596.8], [1.69212078E12, 4785.400000000001], [1.69211976E12, 32766.30000000001], [1.69211886E12, 2916.400000000001], [1.69211916E12, 27404.6], [1.69211904E12, 21181.0], [1.69212006E12, 17487.100000000002], [1.69212066E12, 26272.8], [1.69212036E12, 10821.0], [1.69211994E12, 16717.8], [1.69212024E12, 16409.600000000006], [1.69211934E12, 8241.7], [1.69211964E12, 27415.2], [1.69211922E12, 15917.3], [1.69212084E12, 3594.9999999999914], [1.69211952E12, 15876.800000000072], [1.69212054E12, 28231.9], [1.69211892E12, 16136.400000000005], [1.69212042E12, 27019.5], [1.6921188E12, 13410.800000000001], [1.69212072E12, 16191.100000000002], [1.69211982E12, 28487.5], [1.69212012E12, 12841.6], [1.6921197E12, 7993.200000000001], [1.69212E12, 16965.5], [1.6921191E12, 26029.2], [1.6921194E12, 28148.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69211898E12, 26332.15], [1.69211928E12, 42854.20000000009], [1.6921203E12, 44451.149999999725], [1.6921206E12, 16579.97], [1.69212018E12, 18826.53], [1.69212048E12, 11720.84], [1.69211958E12, 14579.800000000048], [1.69211988E12, 28039.989999999736], [1.69211946E12, 20336.75999999999], [1.69212078E12, 10051.83], [1.69211976E12, 43673.62000000003], [1.69211886E12, 24046.879999999997], [1.69211916E12, 35537.039999999695], [1.69211904E12, 22775.0], [1.69212006E12, 33520.16999999999], [1.69212066E12, 56310.52], [1.69212036E12, 13021.229999999949], [1.69211994E12, 17972.38], [1.69212024E12, 21938.199999999975], [1.69211934E12, 18209.760000000002], [1.69211964E12, 35011.079999999994], [1.69211922E12, 23266.05000000005], [1.69212084E12, 12061.5], [1.69211952E12, 32501.900000000005], [1.69212054E12, 39189.9], [1.69211892E12, 20805.059999999998], [1.69212042E12, 29027.51000000007], [1.6921188E12, 13901.62], [1.69212072E12, 28107.109999999993], [1.69211982E12, 30175.6], [1.69212012E12, 19782.200000000048], [1.6921197E12, 9120.64], [1.69212E12, 22473.789999999997], [1.6921191E12, 27410.46], [1.6921194E12, 35270.72000000006]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69211898E12, 25036.25], [1.69211928E12, 16790.8], [1.6921203E12, 29903.5], [1.6921206E12, 15388.4], [1.69212018E12, 18349.1], [1.69212048E12, 10690.399999999998], [1.69211958E12, 12974.749999999998], [1.69211988E12, 16542.95], [1.69211946E12, 17878.8], [1.69212078E12, 9560.75], [1.69211976E12, 38940.45], [1.69211886E12, 3541.4999999999936], [1.69211916E12, 27739.6], [1.69211904E12, 22100.0], [1.69212006E12, 17911.95], [1.69212066E12, 26623.8], [1.69212036E12, 11969.55], [1.69211994E12, 17484.3], [1.69212024E12, 17063.6], [1.69211934E12, 17322.3], [1.69211964E12, 33370.799999999996], [1.69211922E12, 16769.95], [1.69212084E12, 7944.599999999999], [1.69211952E12, 23307.90000000001], [1.69212054E12, 38233.25], [1.69211892E12, 18194.5], [1.69212042E12, 27595.65], [1.6921188E12, 13638.1], [1.69212072E12, 27193.25], [1.69211982E12, 29365.8], [1.69212012E12, 16029.600000000002], [1.6921197E12, 8249.3], [1.69212E12, 21436.2], [1.6921191E12, 26773.4], [1.6921194E12, 29168.55]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.69211898E12, 2295.0], [1.69211928E12, 4222.0], [1.6921203E12, 4979.0], [1.6921206E12, 3266.0], [1.69212018E12, 5008.0], [1.69212048E12, 4098.0], [1.69211958E12, 4880.0], [1.69211988E12, 4152.0], [1.69211946E12, 5655.0], [1.69212078E12, 1840.0], [1.69211976E12, 11401.0], [1.69211886E12, 971.0], [1.69211916E12, 4090.0], [1.69211904E12, 2705.0], [1.69212006E12, 4462.0], [1.69212066E12, 3168.0], [1.69212036E12, 4453.0], [1.69211994E12, 4835.0], [1.69212024E12, 4423.0], [1.69211934E12, 5140.0], [1.69211964E12, 5065.0], [1.69211922E12, 3368.0], [1.69212084E12, 130.0], [1.69211952E12, 4303.0], [1.69212054E12, 4501.0], [1.69211892E12, 1361.0], [1.69212042E12, 4481.0], [1.6921188E12, 507.0], [1.69212072E12, 2842.0], [1.69211982E12, 5228.0], [1.69212012E12, 5134.0], [1.6921197E12, 4932.0], [1.69212E12, 4995.0], [1.6921191E12, 3640.0], [1.6921194E12, 6338.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69211898E12, 5319.0], [1.69211928E12, 6573.0], [1.6921203E12, 7527.0], [1.6921206E12, 5637.5], [1.69212018E12, 7285.5], [1.69212048E12, 6218.0], [1.69211958E12, 6634.5], [1.69211988E12, 6919.0], [1.69211946E12, 7477.0], [1.69212078E12, 3474.5], [1.69211976E12, 22105.0], [1.69211886E12, 2070.0], [1.69211916E12, 6194.0], [1.69211904E12, 6600.0], [1.69212006E12, 6326.0], [1.69212066E12, 5690.0], [1.69212036E12, 6023.0], [1.69211994E12, 6096.0], [1.69212024E12, 6658.0], [1.69211934E12, 6662.0], [1.69211964E12, 7648.0], [1.69211922E12, 8011.5], [1.69212084E12, 1641.0], [1.69211952E12, 6226.0], [1.69212054E12, 6230.5], [1.69211892E12, 4809.0], [1.69212042E12, 6834.0], [1.6921188E12, 2535.0], [1.69212072E12, 4265.0], [1.69211982E12, 9936.0], [1.69212012E12, 6815.0], [1.6921197E12, 6762.0], [1.69212E12, 6481.5], [1.6921191E12, 5678.0], [1.6921194E12, 8434.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69212084E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 120844.0, "series": [{"data": [[2.0, 11813.0], [33.0, 4953.0], [34.0, 3095.0], [37.0, 2799.0], [39.0, 6997.0], [47.0, 4442.0], [46.0, 1080.5], [3.0, 8940.0], [57.0, 2654.0], [4.0, 8150.0], [72.0, 3128.0], [5.0, 6954.5], [6.0, 9750.5], [102.0, 13303.0], [7.0, 6095.5], [116.0, 978.0], [8.0, 6870.0], [9.0, 6390.0], [10.0, 6227.0], [11.0, 6442.5], [12.0, 6226.0], [13.0, 6492.0], [14.0, 6569.0], [15.0, 6164.0], [16.0, 6278.0], [1.0, 9875.0], [17.0, 6760.0], [18.0, 6654.5], [19.0, 6735.0], [20.0, 6495.0], [21.0, 6566.0], [22.0, 5827.0], [23.0, 5853.5], [24.0, 5857.0], [25.0, 6550.0], [26.0, 6359.0], [27.0, 5572.0], [28.0, 6236.0], [29.0, 5782.0], [30.0, 7444.5], [31.0, 3611.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 20198.0], [33.0, 0.0], [34.0, 107630.0], [46.0, 0.0], [3.0, 9486.5], [4.0, 10204.5], [72.0, 107874.0], [5.0, 13084.0], [6.0, 21974.0], [7.0, 7304.0], [116.0, 0.0], [8.0, 16281.0], [9.0, 9562.0], [10.0, 7296.0], [11.0, 11528.0], [12.0, 7045.0], [13.0, 6352.0], [14.0, 25856.0], [15.0, 5314.0], [1.0, 15644.0], [16.0, 8701.5], [17.0, 6291.0], [18.0, 12291.0], [19.0, 6095.5], [20.0, 5443.0], [21.0, 7184.0], [22.0, 6196.0], [23.0, 5859.5], [24.0, 111218.5], [25.0, 120844.0], [26.0, 9157.0], [27.0, 4665.0], [28.0, 5625.5], [29.0, 34363.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 116.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 120844.0, "series": [{"data": [[2.0, 11788.0], [33.0, 4947.5], [34.0, 3095.0], [37.0, 2794.0], [39.0, 6997.0], [47.0, 4442.0], [46.0, 1065.0], [3.0, 8895.0], [57.0, 2654.0], [4.0, 8094.0], [72.0, 3103.0], [5.0, 6905.5], [6.0, 9723.5], [102.0, 13301.0], [7.0, 6056.5], [116.0, 954.5], [8.0, 6811.0], [9.0, 6350.0], [10.0, 6202.0], [11.0, 6382.5], [12.0, 6202.0], [13.0, 6474.0], [14.0, 6542.0], [15.0, 6152.0], [16.0, 6247.5], [1.0, 9831.0], [17.0, 6738.0], [18.0, 6626.0], [19.0, 6727.0], [20.0, 6462.0], [21.0, 6548.0], [22.0, 5789.0], [23.0, 5853.5], [24.0, 5850.5], [25.0, 6522.0], [26.0, 6338.0], [27.0, 5532.0], [28.0, 6236.0], [29.0, 5782.0], [30.0, 7442.0], [31.0, 3609.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 20198.0], [33.0, 0.0], [34.0, 107630.0], [46.0, 0.0], [3.0, 9486.5], [4.0, 10204.5], [72.0, 107874.0], [5.0, 13084.0], [6.0, 21974.0], [7.0, 7304.0], [116.0, 0.0], [8.0, 16281.0], [9.0, 9562.0], [10.0, 7296.0], [11.0, 11528.0], [12.0, 7045.0], [13.0, 6352.0], [14.0, 25856.0], [15.0, 5314.0], [1.0, 15644.0], [16.0, 8701.5], [17.0, 6291.0], [18.0, 12291.0], [19.0, 6095.5], [20.0, 5443.0], [21.0, 7184.0], [22.0, 6196.0], [23.0, 5859.5], [24.0, 111218.5], [25.0, 120844.0], [26.0, 9157.0], [27.0, 4665.0], [28.0, 5625.5], [29.0, 34363.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 116.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.6666666666666667, "minX": 1.69211874E12, "maxY": 13.25, "series": [{"data": [[1.69211898E12, 12.166666666666666], [1.69211928E12, 9.916666666666666], [1.6921203E12, 8.0], [1.6921206E12, 6.966666666666667], [1.69212018E12, 10.1], [1.69212048E12, 12.55], [1.69211958E12, 10.5], [1.69211988E12, 10.95], [1.69211946E12, 8.283333333333333], [1.69212078E12, 12.716666666666667], [1.69211976E12, 3.7666666666666666], [1.69211886E12, 12.383333333333333], [1.69211916E12, 5.85], [1.69211874E12, 1.6666666666666667], [1.69211904E12, 7.366666666666666], [1.69212006E12, 11.166666666666666], [1.69212066E12, 6.35], [1.69212036E12, 13.25], [1.69211994E12, 11.416666666666666], [1.69212024E12, 10.0], [1.69211934E12, 13.133333333333333], [1.69211964E12, 8.316666666666666], [1.69211922E12, 8.3], [1.69212084E12, 8.35], [1.69211952E12, 11.583333333333334], [1.69212054E12, 6.183333333333334], [1.69211892E12, 9.216666666666667], [1.69212042E12, 8.2], [1.6921188E12, 7.416666666666667], [1.69212072E12, 9.05], [1.69211982E12, 9.266666666666667], [1.69212012E12, 11.833333333333334], [1.6921197E12, 12.883333333333333], [1.69212E12, 10.15], [1.6921191E12, 7.416666666666667], [1.6921194E12, 6.666666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69212084E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.13333333333333333, "minX": 1.6921188E12, "maxY": 12.933333333333334, "series": [{"data": [[1.69211898E12, 11.733333333333333], [1.69211928E12, 9.45], [1.6921203E12, 7.566666666666666], [1.6921206E12, 6.666666666666667], [1.69212018E12, 9.7], [1.69212048E12, 12.216666666666667], [1.69211958E12, 9.833333333333334], [1.69211988E12, 10.333333333333334], [1.69211946E12, 7.883333333333334], [1.69212078E12, 12.933333333333334], [1.69211976E12, 3.433333333333333], [1.69211886E12, 12.216666666666667], [1.69211916E12, 5.45], [1.69211904E12, 6.65], [1.69212006E12, 10.766666666666667], [1.69212066E12, 6.016666666666667], [1.69212036E12, 12.8], [1.69211994E12, 11.083333333333334], [1.69212024E12, 9.516666666666667], [1.69211934E12, 12.7], [1.69211964E12, 8.05], [1.69211922E12, 7.7], [1.69212084E12, 5.616666666666666], [1.69211952E12, 11.283333333333333], [1.69212054E12, 6.0], [1.69211892E12, 8.083333333333334], [1.69212042E12, 7.833333333333333], [1.6921188E12, 7.416666666666667], [1.69212072E12, 8.833333333333334], [1.69211982E12, 8.766666666666667], [1.69212012E12, 11.283333333333333], [1.6921197E12, 12.283333333333333], [1.69212E12, 9.533333333333333], [1.6921191E12, 7.016666666666667], [1.6921194E12, 6.266666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.69211898E12, 0.43333333333333335], [1.69211928E12, 0.4666666666666667], [1.6921203E12, 0.45], [1.6921206E12, 0.4], [1.69212018E12, 0.4], [1.69212048E12, 0.45], [1.69211958E12, 0.6666666666666666], [1.69211988E12, 0.6166666666666667], [1.69211946E12, 0.4], [1.69212078E12, 0.3], [1.69211976E12, 0.3333333333333333], [1.69211886E12, 0.16666666666666666], [1.69211916E12, 0.4], [1.69211904E12, 0.7166666666666667], [1.69212006E12, 0.4], [1.69212066E12, 0.43333333333333335], [1.69212036E12, 0.5], [1.69211994E12, 0.3333333333333333], [1.69212024E12, 0.48333333333333334], [1.69211934E12, 0.43333333333333335], [1.69211964E12, 0.26666666666666666], [1.69211922E12, 0.6], [1.69212084E12, 0.13333333333333333], [1.69211952E12, 0.3], [1.69212054E12, 0.25], [1.69211892E12, 1.1333333333333333], [1.69212042E12, 0.43333333333333335], [1.69212072E12, 0.35], [1.69211982E12, 0.5], [1.69212012E12, 0.55], [1.6921197E12, 0.6], [1.69212E12, 0.6166666666666667], [1.6921191E12, 0.4], [1.6921194E12, 0.4]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.69212084E12, 3.1]], "isOverall": false, "label": "Non HTTP response code: java.net.UnknownHostException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69212084E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.6921188E12, "maxY": 12.933333333333334, "series": [{"data": [[1.69211898E12, 11.733333333333333], [1.69211928E12, 9.45], [1.6921203E12, 7.566666666666666], [1.6921206E12, 6.666666666666667], [1.69212018E12, 9.7], [1.69212048E12, 12.216666666666667], [1.69211958E12, 9.833333333333334], [1.69211988E12, 10.333333333333334], [1.69211946E12, 7.883333333333334], [1.69212078E12, 12.933333333333334], [1.69211976E12, 3.433333333333333], [1.69211886E12, 12.216666666666667], [1.69211916E12, 5.45], [1.69211904E12, 6.65], [1.69212006E12, 10.766666666666667], [1.69212066E12, 6.016666666666667], [1.69212036E12, 12.8], [1.69211994E12, 11.083333333333334], [1.69212024E12, 9.516666666666667], [1.69211934E12, 12.7], [1.69211964E12, 8.05], [1.69211922E12, 7.7], [1.69212084E12, 5.616666666666666], [1.69211952E12, 11.283333333333333], [1.69212054E12, 6.0], [1.69211892E12, 8.083333333333334], [1.69212042E12, 7.833333333333333], [1.6921188E12, 7.416666666666667], [1.69212072E12, 8.833333333333334], [1.69211982E12, 8.766666666666667], [1.69212012E12, 11.283333333333333], [1.6921197E12, 12.283333333333333], [1.69212E12, 9.533333333333333], [1.6921191E12, 7.016666666666667], [1.6921194E12, 6.266666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.69211898E12, 0.43333333333333335], [1.69211928E12, 0.4666666666666667], [1.6921203E12, 0.45], [1.6921206E12, 0.4], [1.69212018E12, 0.4], [1.69212048E12, 0.45], [1.69211958E12, 0.6666666666666666], [1.69211988E12, 0.6166666666666667], [1.69211946E12, 0.4], [1.69212078E12, 0.3], [1.69211976E12, 0.3333333333333333], [1.69211886E12, 0.16666666666666666], [1.69211916E12, 0.4], [1.69211904E12, 0.7166666666666667], [1.69212006E12, 0.4], [1.69212066E12, 0.43333333333333335], [1.69212036E12, 0.5], [1.69211994E12, 0.3333333333333333], [1.69212024E12, 0.48333333333333334], [1.69211934E12, 0.43333333333333335], [1.69211964E12, 0.26666666666666666], [1.69211922E12, 0.6], [1.69212084E12, 3.2333333333333334], [1.69211952E12, 0.3], [1.69212054E12, 0.25], [1.69211892E12, 1.1333333333333333], [1.69212042E12, 0.43333333333333335], [1.69212072E12, 0.35], [1.69211982E12, 0.5], [1.69212012E12, 0.55], [1.6921197E12, 0.6], [1.69212E12, 0.6166666666666667], [1.6921191E12, 0.4], [1.6921194E12, 0.4]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69212084E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.6921188E12, "maxY": 12.933333333333334, "series": [{"data": [[1.69211898E12, 11.733333333333333], [1.69211928E12, 9.45], [1.6921203E12, 7.566666666666666], [1.6921206E12, 6.666666666666667], [1.69212018E12, 9.7], [1.69212048E12, 12.216666666666667], [1.69211958E12, 9.833333333333334], [1.69211988E12, 10.333333333333334], [1.69211946E12, 7.883333333333334], [1.69212078E12, 12.933333333333334], [1.69211976E12, 3.433333333333333], [1.69211886E12, 12.216666666666667], [1.69211916E12, 5.45], [1.69211904E12, 6.65], [1.69212006E12, 10.766666666666667], [1.69212066E12, 6.016666666666667], [1.69212036E12, 12.8], [1.69211994E12, 11.083333333333334], [1.69212024E12, 9.516666666666667], [1.69211934E12, 12.7], [1.69211964E12, 8.05], [1.69211922E12, 7.7], [1.69212084E12, 5.616666666666666], [1.69211952E12, 11.283333333333333], [1.69212054E12, 6.0], [1.69211892E12, 8.083333333333334], [1.69212042E12, 7.833333333333333], [1.6921188E12, 7.416666666666667], [1.69212072E12, 8.833333333333334], [1.69211982E12, 8.766666666666667], [1.69212012E12, 11.283333333333333], [1.6921197E12, 12.283333333333333], [1.69212E12, 9.533333333333333], [1.6921191E12, 7.016666666666667], [1.6921194E12, 6.266666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.69211898E12, 0.43333333333333335], [1.69211928E12, 0.4666666666666667], [1.6921203E12, 0.45], [1.6921206E12, 0.4], [1.69212018E12, 0.4], [1.69212048E12, 0.45], [1.69211958E12, 0.6666666666666666], [1.69211988E12, 0.6166666666666667], [1.69211946E12, 0.4], [1.69212078E12, 0.3], [1.69211976E12, 0.3333333333333333], [1.69211886E12, 0.16666666666666666], [1.69211916E12, 0.4], [1.69211904E12, 0.7166666666666667], [1.69212006E12, 0.4], [1.69212066E12, 0.43333333333333335], [1.69212036E12, 0.5], [1.69211994E12, 0.3333333333333333], [1.69212024E12, 0.48333333333333334], [1.69211934E12, 0.43333333333333335], [1.69211964E12, 0.26666666666666666], [1.69211922E12, 0.6], [1.69212084E12, 3.2333333333333334], [1.69211952E12, 0.3], [1.69212054E12, 0.25], [1.69211892E12, 1.1333333333333333], [1.69212042E12, 0.43333333333333335], [1.69212072E12, 0.35], [1.69211982E12, 0.5], [1.69212012E12, 0.55], [1.6921197E12, 0.6], [1.69212E12, 0.6166666666666667], [1.6921191E12, 0.4], [1.6921194E12, 0.4]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69212084E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

