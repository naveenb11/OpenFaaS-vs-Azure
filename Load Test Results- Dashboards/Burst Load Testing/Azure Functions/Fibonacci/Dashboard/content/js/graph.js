/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 12.0, "minX": 0.0, "maxY": 180511.0, "series": [{"data": [[0.0, 12.0], [0.1, 12.0], [0.2, 13.0], [0.3, 13.0], [0.4, 14.0], [0.5, 14.0], [0.6, 14.0], [0.7, 15.0], [0.8, 15.0], [0.9, 15.0], [1.0, 15.0], [1.1, 16.0], [1.2, 16.0], [1.3, 16.0], [1.4, 17.0], [1.5, 17.0], [1.6, 17.0], [1.7, 18.0], [1.8, 18.0], [1.9, 19.0], [2.0, 19.0], [2.1, 20.0], [2.2, 21.0], [2.3, 22.0], [2.4, 23.0], [2.5, 24.0], [2.6, 25.0], [2.7, 27.0], [2.8, 29.0], [2.9, 33.0], [3.0, 36.0], [3.1, 41.0], [3.2, 45.0], [3.3, 49.0], [3.4, 54.0], [3.5, 59.0], [3.6, 61.0], [3.7, 63.0], [3.8, 64.0], [3.9, 66.0], [4.0, 67.0], [4.1, 67.0], [4.2, 68.0], [4.3, 69.0], [4.4, 70.0], [4.5, 71.0], [4.6, 72.0], [4.7, 73.0], [4.8, 73.0], [4.9, 74.0], [5.0, 75.0], [5.1, 76.0], [5.2, 76.0], [5.3, 77.0], [5.4, 78.0], [5.5, 79.0], [5.6, 80.0], [5.7, 81.0], [5.8, 82.0], [5.9, 82.0], [6.0, 83.0], [6.1, 85.0], [6.2, 86.0], [6.3, 87.0], [6.4, 88.0], [6.5, 89.0], [6.6, 90.0], [6.7, 91.0], [6.8, 93.0], [6.9, 94.0], [7.0, 95.0], [7.1, 96.0], [7.2, 98.0], [7.3, 100.0], [7.4, 101.0], [7.5, 103.0], [7.6, 104.0], [7.7, 105.0], [7.8, 107.0], [7.9, 108.0], [8.0, 109.0], [8.1, 110.0], [8.2, 112.0], [8.3, 112.0], [8.4, 113.0], [8.5, 115.0], [8.6, 116.0], [8.7, 117.0], [8.8, 118.0], [8.9, 119.0], [9.0, 120.0], [9.1, 121.0], [9.2, 122.0], [9.3, 122.0], [9.4, 124.0], [9.5, 125.0], [9.6, 126.0], [9.7, 127.0], [9.8, 128.0], [9.9, 130.0], [10.0, 131.0], [10.1, 132.0], [10.2, 134.0], [10.3, 135.0], [10.4, 137.0], [10.5, 138.0], [10.6, 139.0], [10.7, 140.0], [10.8, 141.0], [10.9, 142.0], [11.0, 143.0], [11.1, 144.0], [11.2, 145.0], [11.3, 146.0], [11.4, 147.0], [11.5, 148.0], [11.6, 150.0], [11.7, 150.0], [11.8, 151.0], [11.9, 152.0], [12.0, 154.0], [12.1, 155.0], [12.2, 156.0], [12.3, 158.0], [12.4, 159.0], [12.5, 160.0], [12.6, 161.0], [12.7, 162.0], [12.8, 163.0], [12.9, 164.0], [13.0, 165.0], [13.1, 166.0], [13.2, 167.0], [13.3, 168.0], [13.4, 169.0], [13.5, 169.0], [13.6, 170.0], [13.7, 171.0], [13.8, 173.0], [13.9, 173.0], [14.0, 175.0], [14.1, 176.0], [14.2, 177.0], [14.3, 178.0], [14.4, 179.0], [14.5, 180.0], [14.6, 181.0], [14.7, 182.0], [14.8, 184.0], [14.9, 185.0], [15.0, 185.0], [15.1, 186.0], [15.2, 187.0], [15.3, 189.0], [15.4, 190.0], [15.5, 191.0], [15.6, 193.0], [15.7, 194.0], [15.8, 196.0], [15.9, 197.0], [16.0, 198.0], [16.1, 199.0], [16.2, 200.0], [16.3, 201.0], [16.4, 203.0], [16.5, 204.0], [16.6, 205.0], [16.7, 205.0], [16.8, 207.0], [16.9, 208.0], [17.0, 209.0], [17.1, 210.0], [17.2, 212.0], [17.3, 213.0], [17.4, 214.0], [17.5, 215.0], [17.6, 216.0], [17.7, 217.0], [17.8, 219.0], [17.9, 221.0], [18.0, 222.0], [18.1, 223.0], [18.2, 224.0], [18.3, 225.0], [18.4, 226.0], [18.5, 228.0], [18.6, 230.0], [18.7, 231.0], [18.8, 233.0], [18.9, 234.0], [19.0, 235.0], [19.1, 237.0], [19.2, 238.0], [19.3, 240.0], [19.4, 242.0], [19.5, 243.0], [19.6, 245.0], [19.7, 246.0], [19.8, 248.0], [19.9, 250.0], [20.0, 251.0], [20.1, 253.0], [20.2, 254.0], [20.3, 257.0], [20.4, 258.0], [20.5, 260.0], [20.6, 262.0], [20.7, 263.0], [20.8, 265.0], [20.9, 267.0], [21.0, 268.0], [21.1, 269.0], [21.2, 270.0], [21.3, 272.0], [21.4, 274.0], [21.5, 276.0], [21.6, 277.0], [21.7, 278.0], [21.8, 279.0], [21.9, 280.0], [22.0, 281.0], [22.1, 282.0], [22.2, 284.0], [22.3, 286.0], [22.4, 288.0], [22.5, 289.0], [22.6, 290.0], [22.7, 292.0], [22.8, 294.0], [22.9, 295.0], [23.0, 297.0], [23.1, 298.0], [23.2, 300.0], [23.3, 303.0], [23.4, 304.0], [23.5, 305.0], [23.6, 307.0], [23.7, 308.0], [23.8, 309.0], [23.9, 311.0], [24.0, 313.0], [24.1, 314.0], [24.2, 315.0], [24.3, 316.0], [24.4, 318.0], [24.5, 320.0], [24.6, 322.0], [24.7, 323.0], [24.8, 324.0], [24.9, 326.0], [25.0, 327.0], [25.1, 329.0], [25.2, 330.0], [25.3, 331.0], [25.4, 333.0], [25.5, 334.0], [25.6, 335.0], [25.7, 337.0], [25.8, 339.0], [25.9, 339.0], [26.0, 341.0], [26.1, 342.0], [26.2, 344.0], [26.3, 345.0], [26.4, 347.0], [26.5, 349.0], [26.6, 350.0], [26.7, 352.0], [26.8, 354.0], [26.9, 355.0], [27.0, 357.0], [27.1, 359.0], [27.2, 361.0], [27.3, 362.0], [27.4, 363.0], [27.5, 365.0], [27.6, 366.0], [27.7, 368.0], [27.8, 369.0], [27.9, 370.0], [28.0, 372.0], [28.1, 374.0], [28.2, 376.0], [28.3, 377.0], [28.4, 379.0], [28.5, 381.0], [28.6, 382.0], [28.7, 384.0], [28.8, 386.0], [28.9, 387.0], [29.0, 389.0], [29.1, 391.0], [29.2, 392.0], [29.3, 394.0], [29.4, 395.0], [29.5, 397.0], [29.6, 398.0], [29.7, 399.0], [29.8, 401.0], [29.9, 402.0], [30.0, 404.0], [30.1, 405.0], [30.2, 406.0], [30.3, 407.0], [30.4, 409.0], [30.5, 410.0], [30.6, 412.0], [30.7, 414.0], [30.8, 415.0], [30.9, 417.0], [31.0, 419.0], [31.1, 420.0], [31.2, 421.0], [31.3, 422.0], [31.4, 424.0], [31.5, 425.0], [31.6, 427.0], [31.7, 429.0], [31.8, 430.0], [31.9, 432.0], [32.0, 434.0], [32.1, 435.0], [32.2, 436.0], [32.3, 438.0], [32.4, 439.0], [32.5, 441.0], [32.6, 443.0], [32.7, 444.0], [32.8, 445.0], [32.9, 446.0], [33.0, 447.0], [33.1, 448.0], [33.2, 450.0], [33.3, 451.0], [33.4, 452.0], [33.5, 453.0], [33.6, 454.0], [33.7, 455.0], [33.8, 456.0], [33.9, 457.0], [34.0, 458.0], [34.1, 459.0], [34.2, 461.0], [34.3, 462.0], [34.4, 463.0], [34.5, 464.0], [34.6, 466.0], [34.7, 468.0], [34.8, 469.0], [34.9, 471.0], [35.0, 472.0], [35.1, 473.0], [35.2, 475.0], [35.3, 476.0], [35.4, 478.0], [35.5, 479.0], [35.6, 480.0], [35.7, 482.0], [35.8, 483.0], [35.9, 484.0], [36.0, 485.0], [36.1, 487.0], [36.2, 488.0], [36.3, 489.0], [36.4, 490.0], [36.5, 491.0], [36.6, 492.0], [36.7, 494.0], [36.8, 495.0], [36.9, 496.0], [37.0, 497.0], [37.1, 498.0], [37.2, 500.0], [37.3, 501.0], [37.4, 503.0], [37.5, 505.0], [37.6, 505.0], [37.7, 507.0], [37.8, 508.0], [37.9, 510.0], [38.0, 511.0], [38.1, 512.0], [38.2, 513.0], [38.3, 514.0], [38.4, 515.0], [38.5, 517.0], [38.6, 518.0], [38.7, 519.0], [38.8, 520.0], [38.9, 521.0], [39.0, 521.0], [39.1, 523.0], [39.2, 524.0], [39.3, 525.0], [39.4, 526.0], [39.5, 527.0], [39.6, 528.0], [39.7, 529.0], [39.8, 530.0], [39.9, 531.0], [40.0, 532.0], [40.1, 533.0], [40.2, 534.0], [40.3, 535.0], [40.4, 536.0], [40.5, 537.0], [40.6, 538.0], [40.7, 539.0], [40.8, 541.0], [40.9, 541.0], [41.0, 542.0], [41.1, 543.0], [41.2, 544.0], [41.3, 545.0], [41.4, 546.0], [41.5, 547.0], [41.6, 548.0], [41.7, 549.0], [41.8, 550.0], [41.9, 551.0], [42.0, 553.0], [42.1, 554.0], [42.2, 555.0], [42.3, 556.0], [42.4, 557.0], [42.5, 558.0], [42.6, 559.0], [42.7, 560.0], [42.8, 562.0], [42.9, 563.0], [43.0, 564.0], [43.1, 565.0], [43.2, 566.0], [43.3, 567.0], [43.4, 568.0], [43.5, 569.0], [43.6, 571.0], [43.7, 572.0], [43.8, 573.0], [43.9, 575.0], [44.0, 575.0], [44.1, 577.0], [44.2, 578.0], [44.3, 579.0], [44.4, 580.0], [44.5, 582.0], [44.6, 583.0], [44.7, 584.0], [44.8, 585.0], [44.9, 586.0], [45.0, 587.0], [45.1, 588.0], [45.2, 590.0], [45.3, 591.0], [45.4, 593.0], [45.5, 594.0], [45.6, 595.0], [45.7, 597.0], [45.8, 598.0], [45.9, 599.0], [46.0, 600.0], [46.1, 602.0], [46.2, 603.0], [46.3, 605.0], [46.4, 606.0], [46.5, 608.0], [46.6, 609.0], [46.7, 610.0], [46.8, 611.0], [46.9, 612.0], [47.0, 613.0], [47.1, 614.0], [47.2, 615.0], [47.3, 617.0], [47.4, 617.0], [47.5, 618.0], [47.6, 619.0], [47.7, 620.0], [47.8, 621.0], [47.9, 623.0], [48.0, 624.0], [48.1, 626.0], [48.2, 627.0], [48.3, 628.0], [48.4, 629.0], [48.5, 630.0], [48.6, 631.0], [48.7, 632.0], [48.8, 633.0], [48.9, 634.0], [49.0, 635.0], [49.1, 636.0], [49.2, 637.0], [49.3, 639.0], [49.4, 640.0], [49.5, 641.0], [49.6, 641.0], [49.7, 642.0], [49.8, 644.0], [49.9, 645.0], [50.0, 646.0], [50.1, 648.0], [50.2, 649.0], [50.3, 651.0], [50.4, 652.0], [50.5, 653.0], [50.6, 654.0], [50.7, 655.0], [50.8, 657.0], [50.9, 658.0], [51.0, 660.0], [51.1, 661.0], [51.2, 662.0], [51.3, 663.0], [51.4, 665.0], [51.5, 666.0], [51.6, 667.0], [51.7, 669.0], [51.8, 670.0], [51.9, 671.0], [52.0, 672.0], [52.1, 674.0], [52.2, 676.0], [52.3, 677.0], [52.4, 679.0], [52.5, 680.0], [52.6, 681.0], [52.7, 683.0], [52.8, 685.0], [52.9, 686.0], [53.0, 688.0], [53.1, 689.0], [53.2, 691.0], [53.3, 693.0], [53.4, 695.0], [53.5, 698.0], [53.6, 700.0], [53.7, 701.0], [53.8, 703.0], [53.9, 704.0], [54.0, 706.0], [54.1, 708.0], [54.2, 710.0], [54.3, 712.0], [54.4, 714.0], [54.5, 716.0], [54.6, 718.0], [54.7, 720.0], [54.8, 723.0], [54.9, 725.0], [55.0, 727.0], [55.1, 728.0], [55.2, 730.0], [55.3, 733.0], [55.4, 735.0], [55.5, 737.0], [55.6, 739.0], [55.7, 742.0], [55.8, 744.0], [55.9, 747.0], [56.0, 749.0], [56.1, 752.0], [56.2, 754.0], [56.3, 756.0], [56.4, 759.0], [56.5, 761.0], [56.6, 764.0], [56.7, 766.0], [56.8, 767.0], [56.9, 770.0], [57.0, 771.0], [57.1, 773.0], [57.2, 775.0], [57.3, 777.0], [57.4, 779.0], [57.5, 783.0], [57.6, 787.0], [57.7, 790.0], [57.8, 793.0], [57.9, 795.0], [58.0, 798.0], [58.1, 800.0], [58.2, 804.0], [58.3, 806.0], [58.4, 809.0], [58.5, 813.0], [58.6, 816.0], [58.7, 818.0], [58.8, 822.0], [58.9, 827.0], [59.0, 832.0], [59.1, 836.0], [59.2, 840.0], [59.3, 843.0], [59.4, 846.0], [59.5, 849.0], [59.6, 854.0], [59.7, 859.0], [59.8, 861.0], [59.9, 865.0], [60.0, 869.0], [60.1, 874.0], [60.2, 879.0], [60.3, 883.0], [60.4, 888.0], [60.5, 893.0], [60.6, 897.0], [60.7, 906.0], [60.8, 912.0], [60.9, 919.0], [61.0, 926.0], [61.1, 932.0], [61.2, 935.0], [61.3, 941.0], [61.4, 946.0], [61.5, 952.0], [61.6, 954.0], [61.7, 957.0], [61.8, 960.0], [61.9, 964.0], [62.0, 969.0], [62.1, 975.0], [62.2, 979.0], [62.3, 983.0], [62.4, 989.0], [62.5, 994.0], [62.6, 1000.0], [62.7, 1006.0], [62.8, 1010.0], [62.9, 1016.0], [63.0, 1019.0], [63.1, 1023.0], [63.2, 1027.0], [63.3, 1032.0], [63.4, 1038.0], [63.5, 1043.0], [63.6, 1049.0], [63.7, 1054.0], [63.8, 1059.0], [63.9, 1063.0], [64.0, 1067.0], [64.1, 1072.0], [64.2, 1075.0], [64.3, 1079.0], [64.4, 1084.0], [64.5, 1090.0], [64.6, 1096.0], [64.7, 1103.0], [64.8, 1111.0], [64.9, 1117.0], [65.0, 1124.0], [65.1, 1129.0], [65.2, 1135.0], [65.3, 1141.0], [65.4, 1147.0], [65.5, 1155.0], [65.6, 1162.0], [65.7, 1166.0], [65.8, 1170.0], [65.9, 1176.0], [66.0, 1185.0], [66.1, 1193.0], [66.2, 1202.0], [66.3, 1206.0], [66.4, 1209.0], [66.5, 1218.0], [66.6, 1225.0], [66.7, 1231.0], [66.8, 1240.0], [66.9, 1244.0], [67.0, 1253.0], [67.1, 1259.0], [67.2, 1264.0], [67.3, 1267.0], [67.4, 1272.0], [67.5, 1277.0], [67.6, 1281.0], [67.7, 1285.0], [67.8, 1291.0], [67.9, 1299.0], [68.0, 1305.0], [68.1, 1312.0], [68.2, 1317.0], [68.3, 1325.0], [68.4, 1331.0], [68.5, 1337.0], [68.6, 1342.0], [68.7, 1347.0], [68.8, 1354.0], [68.9, 1360.0], [69.0, 1367.0], [69.1, 1375.0], [69.2, 1380.0], [69.3, 1386.0], [69.4, 1393.0], [69.5, 1399.0], [69.6, 1404.0], [69.7, 1411.0], [69.8, 1416.0], [69.9, 1422.0], [70.0, 1427.0], [70.1, 1432.0], [70.2, 1437.0], [70.3, 1446.0], [70.4, 1451.0], [70.5, 1458.0], [70.6, 1465.0], [70.7, 1471.0], [70.8, 1480.0], [70.9, 1486.0], [71.0, 1491.0], [71.1, 1495.0], [71.2, 1499.0], [71.3, 1505.0], [71.4, 1510.0], [71.5, 1514.0], [71.6, 1519.0], [71.7, 1523.0], [71.8, 1526.0], [71.9, 1530.0], [72.0, 1532.0], [72.1, 1535.0], [72.2, 1539.0], [72.3, 1543.0], [72.4, 1546.0], [72.5, 1550.0], [72.6, 1552.0], [72.7, 1556.0], [72.8, 1560.0], [72.9, 1563.0], [73.0, 1566.0], [73.1, 1570.0], [73.2, 1572.0], [73.3, 1576.0], [73.4, 1580.0], [73.5, 1583.0], [73.6, 1586.0], [73.7, 1590.0], [73.8, 1594.0], [73.9, 1600.0], [74.0, 1605.0], [74.1, 1611.0], [74.2, 1618.0], [74.3, 1622.0], [74.4, 1627.0], [74.5, 1630.0], [74.6, 1633.0], [74.7, 1638.0], [74.8, 1645.0], [74.9, 1651.0], [75.0, 1657.0], [75.1, 1663.0], [75.2, 1669.0], [75.3, 1674.0], [75.4, 1678.0], [75.5, 1682.0], [75.6, 1687.0], [75.7, 1692.0], [75.8, 1696.0], [75.9, 1704.0], [76.0, 1712.0], [76.1, 1714.0], [76.2, 1718.0], [76.3, 1724.0], [76.4, 1728.0], [76.5, 1732.0], [76.6, 1738.0], [76.7, 1744.0], [76.8, 1751.0], [76.9, 1758.0], [77.0, 1764.0], [77.1, 1769.0], [77.2, 1775.0], [77.3, 1782.0], [77.4, 1787.0], [77.5, 1794.0], [77.6, 1803.0], [77.7, 1808.0], [77.8, 1815.0], [77.9, 1821.0], [78.0, 1826.0], [78.1, 1833.0], [78.2, 1840.0], [78.3, 1846.0], [78.4, 1857.0], [78.5, 1867.0], [78.6, 1874.0], [78.7, 1882.0], [78.8, 1890.0], [78.9, 1897.0], [79.0, 1910.0], [79.1, 1920.0], [79.2, 1928.0], [79.3, 1940.0], [79.4, 1949.0], [79.5, 1957.0], [79.6, 1965.0], [79.7, 1974.0], [79.8, 1979.0], [79.9, 1984.0], [80.0, 1992.0], [80.1, 2001.0], [80.2, 2010.0], [80.3, 2019.0], [80.4, 2025.0], [80.5, 2032.0], [80.6, 2036.0], [80.7, 2046.0], [80.8, 2059.0], [80.9, 2066.0], [81.0, 2079.0], [81.1, 2087.0], [81.2, 2093.0], [81.3, 2101.0], [81.4, 2110.0], [81.5, 2119.0], [81.6, 2128.0], [81.7, 2139.0], [81.8, 2151.0], [81.9, 2163.0], [82.0, 2175.0], [82.1, 2183.0], [82.2, 2196.0], [82.3, 2216.0], [82.4, 2229.0], [82.5, 2250.0], [82.6, 2266.0], [82.7, 2277.0], [82.8, 2285.0], [82.9, 2298.0], [83.0, 2319.0], [83.1, 2339.0], [83.2, 2360.0], [83.3, 2374.0], [83.4, 2392.0], [83.5, 2412.0], [83.6, 2439.0], [83.7, 2464.0], [83.8, 2488.0], [83.9, 2515.0], [84.0, 2541.0], [84.1, 2566.0], [84.2, 2599.0], [84.3, 2648.0], [84.4, 2679.0], [84.5, 2729.0], [84.6, 2774.0], [84.7, 2822.0], [84.8, 2866.0], [84.9, 2908.0], [85.0, 2950.0], [85.1, 2978.0], [85.2, 3019.0], [85.3, 3070.0], [85.4, 3125.0], [85.5, 3158.0], [85.6, 3238.0], [85.7, 3291.0], [85.8, 3325.0], [85.9, 3350.0], [86.0, 3435.0], [86.1, 3615.0], [86.2, 3732.0], [86.3, 3891.0], [86.4, 4000.0], [86.5, 4087.0], [86.6, 4189.0], [86.7, 4287.0], [86.8, 4432.0], [86.9, 4640.0], [87.0, 4750.0], [87.1, 4919.0], [87.2, 5221.0], [87.3, 5640.0], [87.4, 5838.0], [87.5, 6034.0], [87.6, 6186.0], [87.7, 6298.0], [87.8, 6377.0], [87.9, 6504.0], [88.0, 6650.0], [88.1, 6775.0], [88.2, 6845.0], [88.3, 6888.0], [88.4, 6978.0], [88.5, 7023.0], [88.6, 7110.0], [88.7, 7194.0], [88.8, 7315.0], [88.9, 7386.0], [89.0, 7443.0], [89.1, 7524.0], [89.2, 7572.0], [89.3, 7602.0], [89.4, 7695.0], [89.5, 7797.0], [89.6, 7862.0], [89.7, 7898.0], [89.8, 7925.0], [89.9, 7977.0], [90.0, 8090.0], [90.1, 8185.0], [90.2, 8294.0], [90.3, 8369.0], [90.4, 8530.0], [90.5, 8595.0], [90.6, 8813.0], [90.7, 9320.0], [90.8, 9519.0], [90.9, 10611.0], [91.0, 11209.0], [91.1, 14185.0], [91.2, 14305.0], [91.3, 14364.0], [91.4, 14393.0], [91.5, 14405.0], [91.6, 14416.0], [91.7, 14428.0], [91.8, 14440.0], [91.9, 14453.0], [92.0, 14466.0], [92.1, 14629.0], [92.2, 15030.0], [92.3, 15114.0], [92.4, 15162.0], [92.5, 15850.0], [92.6, 21038.0], [92.7, 21128.0], [92.8, 27422.0], [92.9, 28119.0], [93.0, 29159.0], [93.1, 31799.0], [93.2, 36175.0], [93.3, 54960.0], [93.4, 61394.0], [93.5, 109569.0], [93.6, 110016.0], [93.7, 110168.0], [93.8, 110324.0], [93.9, 111567.0], [94.0, 112291.0], [94.1, 113298.0], [94.2, 113726.0], [94.3, 114123.0], [94.4, 114521.0], [94.5, 114743.0], [94.6, 114786.0], [94.7, 114829.0], [94.8, 115145.0], [94.9, 115224.0], [95.0, 135957.0], [95.1, 136345.0], [95.2, 136698.0], [95.3, 137123.0], [95.4, 137563.0], [95.5, 137894.0], [95.6, 138288.0], [95.7, 138695.0], [95.8, 139052.0], [95.9, 139451.0], [96.0, 139861.0], [96.1, 140317.0], [96.2, 140694.0], [96.3, 141079.0], [96.4, 141513.0], [96.5, 141865.0], [96.6, 142262.0], [96.7, 142656.0], [96.8, 143020.0], [96.9, 143415.0], [97.0, 143835.0], [97.1, 144152.0], [97.2, 144501.0], [97.3, 144900.0], [97.4, 145343.0], [97.5, 145696.0], [97.6, 151112.0], [97.7, 151488.0], [97.8, 151913.0], [97.9, 153141.0], [98.0, 153501.0], [98.1, 153853.0], [98.2, 154651.0], [98.3, 155169.0], [98.4, 155573.0], [98.5, 156120.0], [98.6, 156509.0], [98.7, 156858.0], [98.8, 157208.0], [98.9, 157586.0], [99.0, 158066.0], [99.1, 158566.0], [99.2, 159015.0], [99.3, 159431.0], [99.4, 159743.0], [99.5, 160022.0], [99.6, 172602.0], [99.7, 173941.0], [99.8, 174832.0], [99.9, 176553.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1776.0, "series": [{"data": [[138400.0, 5.0], [0.0, 1455.0], [141600.0, 7.0], [144800.0, 5.0], [154400.0, 3.0], [151200.0, 2.0], [157600.0, 3.0], [160800.0, 1.0], [173600.0, 2.0], [176800.0, 2.0], [136100.0, 5.0], [142500.0, 5.0], [139300.0, 7.0], [145700.0, 1.0], [155300.0, 7.0], [152100.0, 1.0], [158500.0, 5.0], [174500.0, 3.0], [109900.0, 8.0], [108300.0, 1.0], [113100.0, 2.0], [111500.0, 5.0], [114700.0, 43.0], [116300.0, 1.0], [137000.0, 5.0], [143400.0, 4.0], [140200.0, 2.0], [153000.0, 4.0], [159400.0, 6.0], [156200.0, 5.0], [172200.0, 2.0], [100.0, 1776.0], [137900.0, 3.0], [34500.0, 5.0], [144300.0, 7.0], [141100.0, 4.0], [36100.0, 7.0], [150700.0, 4.0], [153900.0, 2.0], [157100.0, 6.0], [40900.0, 1.0], [176300.0, 2.0], [173100.0, 1.0], [200.0, 1400.0], [58500.0, 2.0], [300.0, 1313.0], [400.0, 1496.0], [113800.0, 2.0], [110600.0, 2.0], [112200.0, 10.0], [500.0, 1748.0], [138800.0, 6.0], [142000.0, 5.0], [145200.0, 5.0], [154800.0, 6.0], [151600.0, 6.0], [600.0, 1530.0], [158000.0, 3.0], [700.0, 896.0], [177200.0, 2.0], [174000.0, 1.0], [800.0, 514.0], [900.0, 391.0], [1000.0, 408.0], [1100.0, 306.0], [1200.0, 347.0], [1300.0, 321.0], [1400.0, 341.0], [1500.0, 537.0], [1600.0, 389.0], [1700.0, 345.0], [1800.0, 270.0], [1900.0, 233.0], [2000.0, 240.0], [136500.0, 8.0], [2100.0, 192.0], [142900.0, 3.0], [139700.0, 8.0], [2200.0, 134.0], [2300.0, 107.0], [2400.0, 80.0], [158900.0, 4.0], [155700.0, 4.0], [2500.0, 73.0], [2600.0, 46.0], [171700.0, 1.0], [2700.0, 39.0], [2800.0, 51.0], [174900.0, 2.0], [2900.0, 51.0], [3000.0, 42.0], [3100.0, 40.0], [3200.0, 31.0], [3300.0, 50.0], [3400.0, 16.0], [3500.0, 8.0], [3700.0, 13.0], [3600.0, 19.0], [3800.0, 14.0], [3900.0, 18.0], [4000.0, 23.0], [4300.0, 14.0], [4100.0, 20.0], [4200.0, 19.0], [4400.0, 13.0], [4600.0, 11.0], [4500.0, 8.0], [4700.0, 16.0], [4800.0, 10.0], [5100.0, 9.0], [4900.0, 14.0], [5000.0, 3.0], [5300.0, 3.0], [5200.0, 4.0], [5600.0, 13.0], [5500.0, 2.0], [5400.0, 6.0], [5700.0, 9.0], [5800.0, 10.0], [6100.0, 14.0], [5900.0, 8.0], [6000.0, 13.0], [6300.0, 21.0], [6200.0, 21.0], [6600.0, 9.0], [6500.0, 17.0], [6400.0, 15.0], [6800.0, 38.0], [6700.0, 23.0], [6900.0, 29.0], [108100.0, 1.0], [109700.0, 2.0], [7000.0, 25.0], [7100.0, 21.0], [111300.0, 1.0], [114500.0, 1.0], [7200.0, 17.0], [7400.0, 29.0], [7300.0, 27.0], [116100.0, 1.0], [7500.0, 44.0], [7600.0, 23.0], [7700.0, 22.0], [7800.0, 38.0], [7900.0, 43.0], [8000.0, 20.0], [8100.0, 21.0], [137400.0, 3.0], [8200.0, 18.0], [8600.0, 9.0], [8400.0, 9.0], [143800.0, 9.0], [140600.0, 6.0], [9200.0, 1.0], [8800.0, 8.0], [9000.0, 3.0], [9400.0, 9.0], [9600.0, 7.0], [153400.0, 5.0], [159800.0, 4.0], [156600.0, 5.0], [10200.0, 1.0], [10400.0, 5.0], [10600.0, 3.0], [11000.0, 3.0], [11200.0, 2.0], [10800.0, 1.0], [172600.0, 1.0], [13800.0, 1.0], [14200.0, 12.0], [14000.0, 3.0], [14400.0, 127.0], [14800.0, 4.0], [14600.0, 6.0], [15000.0, 15.0], [15200.0, 2.0], [15600.0, 3.0], [15800.0, 2.0], [16400.0, 3.0], [21200.0, 6.0], [24800.0, 2.0], [26400.0, 2.0], [27200.0, 5.0], [28000.0, 6.0], [29200.0, 1.0], [138300.0, 3.0], [34400.0, 2.0], [144700.0, 6.0], [141500.0, 6.0], [36000.0, 1.0], [151100.0, 7.0], [37600.0, 1.0], [157500.0, 7.0], [173500.0, 2.0], [176700.0, 2.0], [179900.0, 2.0], [44000.0, 1.0], [55200.0, 2.0], [58400.0, 1.0], [110400.0, 3.0], [112000.0, 2.0], [113600.0, 8.0], [115200.0, 22.0], [137600.0, 4.0], [144000.0, 5.0], [140800.0, 7.0], [153600.0, 8.0], [150400.0, 1.0], [160000.0, 9.0], [156800.0, 6.0], [172800.0, 3.0], [176000.0, 2.0], [179200.0, 1.0], [138500.0, 6.0], [144900.0, 7.0], [141700.0, 5.0], [154500.0, 4.0], [151300.0, 5.0], [157700.0, 3.0], [173700.0, 1.0], [110300.0, 9.0], [111900.0, 2.0], [113500.0, 2.0], [115100.0, 9.0], [116700.0, 1.0], [136200.0, 6.0], [142600.0, 6.0], [139400.0, 4.0], [155400.0, 5.0], [158600.0, 5.0], [171400.0, 1.0], [174600.0, 4.0], [137100.0, 3.0], [33900.0, 1.0], [140300.0, 6.0], [143500.0, 3.0], [36300.0, 1.0], [153100.0, 6.0], [159500.0, 4.0], [156300.0, 4.0], [172300.0, 1.0], [55500.0, 1.0], [56300.0, 3.0], [58700.0, 1.0], [107800.0, 5.0], [114200.0, 2.0], [112600.0, 1.0], [138000.0, 7.0], [141200.0, 6.0], [144400.0, 6.0], [154000.0, 3.0], [150800.0, 2.0], [157200.0, 4.0], [173200.0, 1.0], [179600.0, 2.0], [176400.0, 1.0], [138900.0, 4.0], [145300.0, 3.0], [142100.0, 5.0], [154900.0, 3.0], [151700.0, 2.0], [177300.0, 2.0], [180500.0, 1.0], [110100.0, 11.0], [113300.0, 2.0], [116500.0, 3.0], [136600.0, 5.0], [143000.0, 6.0], [139800.0, 5.0], [152600.0, 1.0], [159000.0, 6.0], [155800.0, 2.0], [175000.0, 1.0], [20900.0, 2.0], [25300.0, 1.0], [27300.0, 1.0], [26900.0, 1.0], [28100.0, 5.0], [27700.0, 2.0], [28500.0, 2.0], [28900.0, 1.0], [29300.0, 2.0], [31700.0, 1.0], [31300.0, 1.0], [30900.0, 1.0], [137500.0, 8.0], [143900.0, 4.0], [140700.0, 5.0], [36200.0, 8.0], [35400.0, 2.0], [153500.0, 8.0], [150300.0, 3.0], [159900.0, 4.0], [156700.0, 5.0], [179100.0, 1.0], [175900.0, 1.0], [172700.0, 1.0], [54600.0, 4.0], [55400.0, 2.0], [114000.0, 8.0], [112400.0, 2.0], [115600.0, 2.0], [136800.0, 4.0], [140000.0, 4.0], [143200.0, 3.0], [152800.0, 2.0], [159200.0, 6.0], [156000.0, 3.0], [172000.0, 2.0], [137700.0, 7.0], [144100.0, 4.0], [140900.0, 5.0], [153700.0, 3.0], [150500.0, 1.0], [156900.0, 7.0], [176100.0, 1.0], [172900.0, 3.0], [109100.0, 1.0], [112300.0, 8.0], [113900.0, 1.0], [138600.0, 5.0], [141800.0, 5.0], [145000.0, 5.0], [154600.0, 3.0], [151400.0, 8.0], [157800.0, 7.0], [173800.0, 2.0], [136300.0, 5.0], [34100.0, 1.0], [142700.0, 5.0], [139500.0, 5.0], [155500.0, 4.0], [158700.0, 3.0], [171500.0, 1.0], [174700.0, 2.0], [54900.0, 1.0], [61300.0, 2.0], [108200.0, 1.0], [109800.0, 3.0], [114600.0, 2.0], [111400.0, 3.0], [113000.0, 1.0], [137200.0, 5.0], [140400.0, 7.0], [143600.0, 7.0], [153200.0, 4.0], [159600.0, 9.0], [156400.0, 8.0], [175600.0, 2.0], [172400.0, 4.0], [138100.0, 2.0], [144500.0, 6.0], [141300.0, 3.0], [150900.0, 2.0], [154100.0, 1.0], [157300.0, 4.0], [179700.0, 2.0], [176500.0, 2.0], [110500.0, 1.0], [113700.0, 3.0], [112100.0, 1.0], [116900.0, 1.0], [139000.0, 7.0], [8300.0, 24.0], [8500.0, 25.0], [8700.0, 10.0], [142200.0, 5.0], [145400.0, 5.0], [9100.0, 1.0], [8900.0, 6.0], [9500.0, 12.0], [9300.0, 6.0], [155000.0, 6.0], [151800.0, 6.0], [158200.0, 5.0], [10100.0, 1.0], [10700.0, 1.0], [11100.0, 6.0], [10900.0, 6.0], [174200.0, 5.0], [14300.0, 56.0], [13900.0, 4.0], [14100.0, 12.0], [14500.0, 2.0], [14700.0, 10.0], [15100.0, 32.0], [15300.0, 4.0], [15700.0, 5.0], [16300.0, 3.0], [21000.0, 29.0], [25400.0, 1.0], [27400.0, 3.0], [27800.0, 3.0], [28200.0, 3.0], [28600.0, 4.0], [29400.0, 1.0], [30200.0, 1.0], [30600.0, 1.0], [31400.0, 1.0], [136700.0, 5.0], [139900.0, 5.0], [143100.0, 4.0], [152700.0, 2.0], [159100.0, 4.0], [155900.0, 5.0], [39600.0, 1.0], [171900.0, 1.0], [54800.0, 1.0], [55600.0, 1.0], [56400.0, 1.0], [58800.0, 1.0], [109600.0, 3.0], [108000.0, 1.0], [114400.0, 12.0], [139200.0, 5.0], [136000.0, 5.0], [142400.0, 6.0], [145600.0, 8.0], [155200.0, 4.0], [152000.0, 3.0], [158400.0, 3.0], [177600.0, 1.0], [174400.0, 2.0], [136900.0, 5.0], [140100.0, 7.0], [143300.0, 8.0], [152900.0, 1.0], [159300.0, 4.0], [156100.0, 1.0], [109500.0, 5.0], [114300.0, 4.0], [111100.0, 1.0], [112700.0, 1.0], [137800.0, 8.0], [141000.0, 5.0], [144200.0, 6.0], [153800.0, 4.0], [157000.0, 4.0], [160200.0, 1.0], [173000.0, 1.0], [176200.0, 3.0], [138700.0, 4.0], [33500.0, 1.0], [34300.0, 1.0], [145100.0, 2.0], [141900.0, 5.0], [154700.0, 3.0], [151500.0, 5.0], [157900.0, 4.0], [173900.0, 3.0], [177100.0, 1.0], [108600.0, 4.0], [110200.0, 15.0], [111800.0, 2.0], [113400.0, 6.0], [115000.0, 6.0], [136400.0, 3.0], [142800.0, 6.0], [139600.0, 2.0], [155600.0, 4.0], [152400.0, 3.0], [158800.0, 5.0], [174800.0, 2.0], [137300.0, 4.0], [140500.0, 2.0], [143700.0, 5.0], [153300.0, 5.0], [159700.0, 6.0], [156500.0, 9.0], [175700.0, 2.0], [172500.0, 3.0], [114100.0, 9.0], [112500.0, 1.0], [115700.0, 2.0], [138200.0, 8.0], [141400.0, 3.0], [144600.0, 3.0], [154200.0, 3.0], [151000.0, 4.0], [157400.0, 7.0], [173400.0, 1.0], [21100.0, 2.0], [27500.0, 1.0], [27900.0, 3.0], [28300.0, 6.0], [29100.0, 3.0], [29500.0, 4.0], [29900.0, 3.0], [30700.0, 1.0], [31500.0, 1.0], [139100.0, 4.0], [135900.0, 4.0], [142300.0, 6.0], [145500.0, 6.0], [155100.0, 2.0], [151900.0, 3.0], [158300.0, 7.0], [171100.0, 1.0], [174300.0, 1.0], [56600.0, 2.0], [61400.0, 4.0], [60600.0, 1.0], [110000.0, 11.0], [111600.0, 3.0], [113200.0, 3.0], [114800.0, 25.0], [116400.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 180500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1775.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 7454.0, "series": [{"data": [[0.0, 7454.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 6794.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3977.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1775.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 4.414634146341465, "minX": 1.6917528E12, "maxY": 858.9725115125757, "series": [{"data": [[1.69175292E12, 218.14122048164666], [1.69175304E12, 4.414634146341465], [1.69175286E12, 316.09278350515484], [1.6917528E12, 858.9725115125757], [1.69175298E12, 9.223214285714285]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69175304E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 12.0, "minX": 1.0, "maxY": 133180.62068965516, "series": [{"data": [[2.0, 33.666666666666664], [3.0, 54.33333333333333], [4.0, 12.0], [5.0, 50.53125], [6.0, 16237.775], [7.0, 46.5], [8.0, 42.5], [9.0, 42.57142857142857], [10.0, 15.0], [11.0, 43.400000000000006], [12.0, 8698.36842105263], [13.0, 751.4999999999999], [14.0, 1804.25], [15.0, 33.666666666666664], [16.0, 52.66666666666667], [17.0, 20.0], [18.0, 119.0], [19.0, 2390.8571428571436], [20.0, 1460.0], [21.0, 43.0], [22.0, 17.0], [23.0, 48.64705882352942], [24.0, 44.8], [25.0, 50.0], [26.0, 22.5], [27.0, 166.75], [28.0, 91.0], [29.0, 172.83333333333331], [30.0, 738.6619718309859], [31.0, 126.66666666666666], [33.0, 130.5], [32.0, 83.33333333333333], [34.0, 186.75], [37.0, 421.0], [36.0, 1762.222222222222], [38.0, 473.5], [41.0, 10791.5], [40.0, 485.3333333333333], [43.0, 419.8333333333333], [42.0, 279.57142857142856], [45.0, 413.0], [44.0, 573.0], [47.0, 585.0], [46.0, 400.5], [49.0, 446.0], [48.0, 446.5], [51.0, 547.75], [50.0, 509.3333333333333], [53.0, 549.0], [52.0, 577.3333333333334], [55.0, 301.3333333333333], [54.0, 325.6666666666667], [57.0, 285.12500000000006], [56.0, 261.0], [59.0, 285.3333333333333], [58.0, 248.5], [60.0, 369.66666666666674], [63.0, 318.0], [62.0, 322.2], [67.0, 240.0], [66.0, 148.5], [65.0, 376.8], [64.0, 334.0], [71.0, 356.2857142857142], [70.0, 318.0], [68.0, 252.0], [75.0, 408.2], [74.0, 404.5], [73.0, 360.3333333333333], [72.0, 299.25], [79.0, 426.0], [77.0, 365.0], [76.0, 402.0], [83.0, 348.75], [82.0, 754.2], [81.0, 358.25], [80.0, 422.1111111111111], [87.0, 325.4], [86.0, 346.4], [85.0, 361.0], [84.0, 329.5], [91.0, 415.2], [90.0, 357.0], [89.0, 282.0], [88.0, 339.3333333333333], [95.0, 385.0], [94.0, 389.0], [93.0, 434.1428571428571], [92.0, 437.0], [99.0, 924.4], [98.0, 1271.0], [97.0, 381.0], [96.0, 372.0], [103.0, 424.25], [102.0, 421.7272727272727], [101.0, 390.75], [100.0, 1297.0], [107.0, 407.7142857142857], [104.0, 408.1428571428571], [111.0, 285.0], [110.0, 346.0], [109.0, 395.0], [108.0, 367.5], [115.0, 287.8], [114.0, 278.0], [113.0, 300.0], [112.0, 340.0], [119.0, 713.4545454545454], [117.0, 285.25], [116.0, 305.22222222222223], [123.0, 541.1111111111111], [127.0, 296.3333333333333], [126.0, 320.0], [125.0, 281.5], [135.0, 325.18181818181824], [134.0, 313.2727272727273], [133.0, 375.36842105263156], [132.0, 370.2], [130.0, 244.0], [129.0, 259.0], [128.0, 286.2857142857143], [143.0, 307.6666666666667], [141.0, 290.4], [140.0, 339.1818181818182], [137.0, 427.5], [136.0, 303.7], [151.0, 402.2], [150.0, 479.6666666666667], [147.0, 364.0], [146.0, 411.4], [145.0, 328.00000000000006], [159.0, 624.0], [158.0, 648.6153846153846], [154.0, 550.0], [153.0, 932.5], [152.0, 550.8333333333333], [166.0, 540.5], [165.0, 579.8333333333333], [164.0, 540.0], [162.0, 560.3333333333334], [161.0, 572.3333333333334], [160.0, 541.0], [175.0, 549.0], [174.0, 541.5], [173.0, 573.5], [172.0, 562.75], [171.0, 578.0833333333334], [170.0, 515.8749999999999], [183.0, 554.4], [182.0, 592.6666666666667], [178.0, 1006.4583333333333], [177.0, 583.0], [176.0, 3839.3076923076933], [191.0, 539.1666666666666], [190.0, 2175.25], [189.0, 913.6666666666666], [186.0, 515.25], [185.0, 537.5], [184.0, 584.3333333333334], [199.0, 612.6666666666666], [198.0, 608.6666666666666], [197.0, 551.7619047619048], [196.0, 733.3939393939396], [195.0, 567.0], [194.0, 604.315789473684], [193.0, 576.8], [192.0, 541.1666666666667], [207.0, 920.2], [205.0, 889.625], [204.0, 1190.6], [203.0, 814.6451612903226], [202.0, 567.0], [201.0, 581.0], [200.0, 568.5], [215.0, 721.8461538461538], [214.0, 617.75], [213.0, 1186.8181818181818], [212.0, 588.3333333333334], [210.0, 559.0833333333334], [209.0, 553.0], [208.0, 1075.764705882353], [223.0, 1107.0], [222.0, 716.5999999999999], [219.0, 1282.0], [218.0, 804.5555555555555], [217.0, 511.0], [216.0, 515.3333333333334], [231.0, 1104.888888888889], [230.0, 1099.25], [229.0, 1129.3333333333333], [228.0, 1079.3333333333333], [227.0, 1104.2222222222222], [226.0, 1096.6], [224.0, 2177.4166666666665], [239.0, 1076.7464788732395], [238.0, 587.8000000000001], [237.0, 533.6153846153846], [236.0, 765.8571428571428], [235.0, 1169.3076923076922], [234.0, 1141.1666666666667], [232.0, 1159.5555555555554], [247.0, 627.1612903225807], [246.0, 574.6], [245.0, 636.6296296296296], [244.0, 592.5555555555555], [243.0, 534.4166666666665], [242.0, 1158.8450704225354], [255.0, 525.7142857142858], [254.0, 603.3384615384615], [253.0, 665.6153846153846], [252.0, 708.6000000000001], [251.0, 654.0], [250.0, 639.85], [249.0, 602.5769230769231], [248.0, 1020.0142857142852], [270.0, 359.0], [271.0, 272.0], [269.0, 64.66666666666667], [268.0, 51.5], [267.0, 14.0], [266.0, 15.0], [265.0, 55.0], [264.0, 207.33333333333331], [263.0, 21.0], [257.0, 721.9183673469386], [256.0, 914.1147540983605], [259.0, 1177.4], [258.0, 789.0285714285715], [262.0, 18788.078201970457], [261.0, 679.8414634146343], [260.0, 1038.0514705882356], [286.0, 445.70000000000005], [287.0, 412.0], [285.0, 405.6666666666667], [284.0, 385.75], [283.0, 228.0], [282.0, 241.0], [281.0, 211.4], [279.0, 224.0], [273.0, 95.66666666666667], [272.0, 18.25], [275.0, 192.0], [274.0, 123.0], [278.0, 183.5], [277.0, 227.66666666666666], [276.0, 231.0], [302.0, 210.0], [303.0, 181.0], [301.0, 214.77777777777777], [300.0, 203.0], [299.0, 247.75], [298.0, 230.0], [297.0, 269.2], [296.0, 303.0], [295.0, 281.5], [289.0, 440.7142857142857], [288.0, 380.0], [291.0, 425.0], [290.0, 391.0], [293.0, 283.0], [292.0, 284.0], [318.0, 15.0], [319.0, 57.25], [317.0, 43.0], [316.0, 14.0], [315.0, 5255.030769230772], [314.0, 31.428571428571423], [313.0, 44.375], [312.0, 40.0], [311.0, 59.33333333333333], [305.0, 208.15384615384613], [304.0, 207.75], [307.0, 178.0], [306.0, 193.21428571428572], [310.0, 16.0], [309.0, 7377.410666666664], [308.0, 188.0], [334.0, 3807.7500000000005], [335.0, 205.0], [333.0, 3316.1818181818185], [332.0, 55.33333333333333], [331.0, 3320.272727272727], [330.0, 47.8], [329.0, 3507.0714285714294], [328.0, 44.166666666666664], [327.0, 3615.616161616161], [321.0, 3784.9662921348317], [320.0, 29.666666666666668], [323.0, 37.0], [322.0, 22.0], [326.0, 17.5], [325.0, 42.0], [324.0, 57.0], [350.0, 67.0], [351.0, 277.70526315789465], [349.0, 65.5], [348.0, 47.0], [347.0, 14.0], [346.0, 52.66666666666667], [345.0, 13.0], [344.0, 14136.125], [342.0, 53.5], [339.0, 152.66666666666666], [338.0, 1837.8749999999995], [337.0, 83.75], [336.0, 7063.666666666666], [340.0, 10282.2], [366.0, 10551.5], [367.0, 45.74999999999999], [365.0, 14134.0], [364.0, 50.179487179487175], [363.0, 58.42857142857143], [362.0, 14.0], [361.0, 32.333333333333336], [360.0, 40.5], [359.0, 5316.5], [353.0, 15.0], [352.0, 15614.279999999995], [355.0, 1919.25], [354.0, 6079.428571428572], [358.0, 3557.2500000000005], [357.0, 60.0], [356.0, 2677.25], [382.0, 45.66666666666667], [383.0, 56.42857142857142], [381.0, 39.0], [380.0, 38.0], [379.0, 441.70588235294116], [378.0, 15.0], [377.0, 95.25], [376.0, 57.75], [375.0, 15.0], [369.0, 5301.25], [368.0, 6048.714285714285], [371.0, 14.0], [370.0, 5297.0], [374.0, 39.0], [373.0, 1826.0], [372.0, 3867.545454545455], [398.0, 98.57142857142857], [399.0, 24.333333333333332], [397.0, 16.0], [396.0, 76.0], [395.0, 57.33333333333333], [394.0, 426.6], [393.0, 209.60000000000002], [392.0, 60.666666666666664], [391.0, 54.833333333333336], [385.0, 586.5], [384.0, 172.25], [387.0, 17.0], [386.0, 208.0], [390.0, 38.666666666666664], [388.0, 13.0], [414.0, 159.2173913043478], [415.0, 185.33333333333334], [413.0, 167.3], [403.0, 379.6666666666667], [402.0, 2941.588235294118], [401.0, 553.25], [400.0, 222.66666666666666], [411.0, 140.2], [410.0, 122.0], [409.0, 134.66666666666666], [407.0, 116.5], [406.0, 156.0], [405.0, 189.54545454545456], [404.0, 1391.2093023255816], [429.0, 257.0], [430.0, 193.33333333333334], [428.0, 329.0], [419.0, 150.95652173913047], [418.0, 105.0], [417.0, 146.7857142857143], [416.0, 1907.1250000000002], [427.0, 244.8], [426.0, 198.0], [425.0, 191.6363636363636], [424.0, 2077.2916666666665], [423.0, 258.1666666666667], [422.0, 200.5], [421.0, 150.14285714285714], [420.0, 165.09090909090907], [446.0, 198.0], [447.0, 243.0], [445.0, 215.85714285714286], [444.0, 205.5], [443.0, 197.4], [442.0, 191.33333333333331], [440.0, 4917.733333333333], [438.0, 1870.5555555555557], [432.0, 169.87500000000003], [434.0, 206.0], [433.0, 194.3333333333333], [437.0, 216.0], [436.0, 218.81818181818178], [461.0, 385.22222222222223], [463.0, 392.25], [460.0, 376.0], [451.0, 208.5], [450.0, 256.3333333333333], [449.0, 260.55555555555554], [448.0, 208.5], [459.0, 305.6], [458.0, 360.0], [457.0, 379.4285714285714], [456.0, 295.8], [455.0, 11584.000000000002], [454.0, 268.77777777777777], [453.0, 205.0], [452.0, 259.6666666666667], [478.0, 265.0], [479.0, 294.5], [477.0, 270.0], [476.0, 296.9], [475.0, 330.0], [474.0, 374.0], [473.0, 354.75], [472.0, 370.0], [471.0, 351.0], [467.0, 12658.235294117645], [466.0, 438.0], [465.0, 440.27777777777777], [464.0, 426.5], [470.0, 446.6666666666667], [494.0, 312.125], [495.0, 358.18749999999994], [493.0, 309.0], [492.0, 233.25], [491.0, 264.0], [490.0, 279.0], [489.0, 278.16666666666663], [488.0, 259.0], [487.0, 255.5], [481.0, 335.0], [480.0, 339.0], [483.0, 462.0], [482.0, 310.3333333333333], [486.0, 289.22222222222223], [485.0, 2824.3333333333335], [484.0, 275.42857142857144], [510.0, 386.0], [511.0, 449.0], [509.0, 391.6666666666667], [508.0, 368.0], [507.0, 355.7199999999999], [505.0, 345.0], [504.0, 318.75], [502.0, 298.0], [498.0, 251.4], [496.0, 329.0], [501.0, 277.6666666666667], [500.0, 300.8], [539.0, 388.15384615384613], [540.0, 330.0], [538.0, 366.0], [537.0, 355.6666666666667], [536.0, 392.3333333333333], [517.0, 528.0], [516.0, 426.5333333333333], [515.0, 426.3], [514.0, 400.75], [513.0, 538.6363636363636], [512.0, 372.5], [526.0, 404.0], [525.0, 6940.538461538461], [522.0, 410.0], [521.0, 475.0], [520.0, 494.0487804878049], [535.0, 968.3846153846154], [534.0, 363.2], [532.0, 432.0], [531.0, 372.9166666666666], [568.0, 4914.391304347825], [572.0, 367.0], [575.0, 338.4], [560.0, 492.75], [563.0, 503.4444444444444], [561.0, 467.75], [574.0, 410.1428571428571], [573.0, 603.0], [571.0, 383.6666666666667], [570.0, 378.66666666666663], [569.0, 4468.478260869565], [559.0, 498.0], [545.0, 387.52941176470586], [544.0, 367.45161290322574], [549.0, 336.77777777777777], [546.0, 3297.0], [551.0, 408.08000000000004], [550.0, 387.125], [558.0, 9031.095238095239], [557.0, 483.2999999999999], [556.0, 432.0], [555.0, 402.2], [554.0, 476.6923076923077], [553.0, 377.35897435897436], [552.0, 325.0], [565.0, 493.1538461538462], [564.0, 452.5], [601.0, 616.5384615384615], [605.0, 469.1739130434783], [607.0, 723.3404255319151], [593.0, 514.1052631578947], [592.0, 523.1538461538462], [595.0, 589.2941176470588], [594.0, 501.2307692307693], [597.0, 512.7105263157895], [596.0, 612.5862068965516], [604.0, 558.1428571428571], [603.0, 779.026666666667], [602.0, 618.1478260869568], [600.0, 819.8181818181819], [583.0, 513.8571428571428], [582.0, 417.0], [581.0, 6848.444444444444], [580.0, 444.66666666666663], [577.0, 420.5], [576.0, 381.84210526315786], [591.0, 542.5714285714286], [590.0, 504.84999999999997], [588.0, 1923.2], [587.0, 457.1363636363637], [586.0, 1276.6153846153848], [584.0, 633.8181818181819], [599.0, 457.6666666666667], [598.0, 515.625], [636.0, 514.0], [639.0, 873.5], [624.0, 762.1621621621621], [626.0, 1802.0], [625.0, 3327.3529411764707], [629.0, 752.3333333333334], [628.0, 594.4545454545455], [638.0, 553.0], [637.0, 711.3333333333334], [635.0, 440.08333333333326], [634.0, 467.25], [633.0, 659.818181818182], [632.0, 568.3], [623.0, 626.4800000000001], [609.0, 482.5384615384616], [608.0, 901.0], [611.0, 475.75], [610.0, 639.4925373134328], [613.0, 923.0], [612.0, 705.8888888888889], [615.0, 435.3333333333333], [614.0, 497.5833333333333], [621.0, 534.6428571428571], [620.0, 551.0500000000001], [617.0, 610.7], [616.0, 589.125], [631.0, 555.2727272727273], [630.0, 628.5], [668.0, 666.6666666666666], [671.0, 683.1333333333334], [656.0, 550.5], [658.0, 533.1666666666666], [657.0, 610.75], [660.0, 661.4444444444445], [659.0, 940.52], [670.0, 693.7058823529412], [669.0, 709.6], [667.0, 3009.842105263158], [666.0, 664.0], [665.0, 779.9736842105262], [664.0, 715.25], [655.0, 554.0], [640.0, 876.0344827586207], [642.0, 579.75], [641.0, 2738.875], [644.0, 607.0], [643.0, 556.4], [647.0, 715.0], [645.0, 605.3235294117648], [654.0, 568.75], [653.0, 636.55], [652.0, 1948.8813559322034], [651.0, 707.2857142857143], [650.0, 4447.0], [648.0, 2178.8], [663.0, 559.3333333333334], [662.0, 597.0], [700.0, 719.4545454545455], [703.0, 2283.1666666666665], [689.0, 772.7941176470589], [691.0, 1398.7272727272727], [690.0, 809.875], [693.0, 730.5], [692.0, 1050.264705882353], [702.0, 817.0], [701.0, 7776.666666666666], [699.0, 1334.3333333333335], [698.0, 1388.4545454545457], [697.0, 757.0], [696.0, 905.1923076923078], [686.0, 688.9047619047618], [673.0, 750.0], [672.0, 691.3157894736843], [676.0, 893.1142857142856], [674.0, 837.5999999999999], [678.0, 567.3333333333334], [677.0, 614.5], [685.0, 603.68], [684.0, 568.5], [682.0, 428.75], [681.0, 641.4], [680.0, 630.125], [695.0, 733.0], [694.0, 730.0], [732.0, 595.0], [735.0, 718.1428571428571], [721.0, 746.0], [723.0, 1031.888888888889], [722.0, 865.6666666666667], [725.0, 1014.5714285714286], [724.0, 1222.7272727272725], [734.0, 1049.0], [733.0, 603.421052631579], [731.0, 651.5833333333334], [730.0, 664.5999999999999], [729.0, 839.1578947368422], [728.0, 687.0], [719.0, 716.5], [704.0, 1018.1111111111111], [709.0, 1177.5853658536582], [706.0, 827.7407407407408], [711.0, 793.304347826087], [710.0, 966.5], [718.0, 944.2857142857142], [717.0, 658.1], [714.0, 611.6666666666666], [713.0, 809.1612903225807], [712.0, 641.0], [727.0, 845.3333333333334], [726.0, 994.6], [766.0, 1011.8888888888889], [767.0, 1517.8275862068965], [753.0, 743.0], [752.0, 1307.7142857142858], [755.0, 738.0], [754.0, 740.0], [765.0, 993.3548387096774], [764.0, 892.5], [763.0, 1506.8333333333335], [762.0, 2481.0], [761.0, 952.3478260869564], [741.0, 752.5], [739.0, 713.5882352941177], [736.0, 641.0], [751.0, 1138.5], [750.0, 1077.5], [749.0, 929.8571428571429], [748.0, 883.1333333333332], [747.0, 959.6615384615387], [745.0, 22.0], [757.0, 677.6666666666666], [756.0, 757.0], [796.0, 1970.8000000000002], [799.0, 778.5], [785.0, 1776.1666666666665], [784.0, 2773.0], [787.0, 1817.4782608695652], [786.0, 787.0], [789.0, 1434.3333333333333], [788.0, 1563.3333333333335], [798.0, 1541.3333333333333], [797.0, 2001.5], [795.0, 1715.2499999999998], [794.0, 1554.0], [793.0, 1608.2], [792.0, 1647.3333333333333], [783.0, 2066.2258064516122], [769.0, 1053.0], [768.0, 1042.3333333333333], [772.0, 1051.75], [771.0, 1014.5], [775.0, 1078.6000000000001], [774.0, 4269.083333333332], [782.0, 1285.6521739130435], [781.0, 1062.2666666666667], [780.0, 933.0], [779.0, 1109.75], [778.0, 1244.111111111111], [777.0, 866.2], [776.0, 891.5625], [791.0, 1624.15], [790.0, 1605.0], [827.0, 1918.6], [820.0, 1747.9090909090908], [830.0, 1572.0], [816.0, 1519.5], [826.0, 1806.5384615384614], [825.0, 1863.4375], [815.0, 1527.0], [800.0, 1613.8333333333335], [802.0, 1621.7777777777778], [801.0, 1621.3333333333333], [805.0, 1663.578947368421], [803.0, 1535.5], [807.0, 1789.0], [806.0, 1686.8888888888891], [814.0, 1753.9999999999998], [813.0, 1505.5], [812.0, 1639.4], [811.0, 1594.5], [810.0, 1851.583333333334], [808.0, 1711.625], [823.0, 1564.0], [822.0, 1429.0], [821.0, 1795.111111111111], [818.0, 1704.9999999999998], [817.0, 1513.0], [858.0, 1574.2875000000004], [862.0, 1095.5], [863.0, 1035.0555555555557], [848.0, 1308.0], [850.0, 1151.076923076923], [849.0, 1065.3823529411764], [853.0, 1550.2812500000002], [852.0, 1211.5], [861.0, 979.7], [860.0, 3072.185185185185], [859.0, 645.0], [856.0, 1048.3333333333333], [839.0, 1002.9999999999999], [838.0, 1090.4666666666667], [837.0, 947.0], [836.0, 793.0], [835.0, 1174.8571428571431], [833.0, 3043.872340425533], [847.0, 1217.05], [846.0, 1203.1914893617022], [845.0, 1101.5], [844.0, 2672.909090909092], [843.0, 1265.0], [842.0, 1205.4444444444443], [841.0, 1286.32], [840.0, 2476.970588235294], [855.0, 696.0], [854.0, 2764.6666666666665], [888.0, 945.4166666666666], [892.0, 499.0], [895.0, 1209.0], [881.0, 788.1891891891894], [891.0, 1023.9090909090909], [890.0, 902.421052631579], [889.0, 1318.6315789473686], [879.0, 400.0], [865.0, 868.6666666666667], [864.0, 1404.8333333333333], [867.0, 5480.428571428571], [866.0, 923.0], [869.0, 1070.4166666666665], [868.0, 470.0], [871.0, 963.5], [870.0, 1061.4761904761906], [877.0, 1035.2777777777778], [876.0, 1174.5], [875.0, 2764.807692307693], [874.0, 1673.5], [873.0, 1703.25], [872.0, 1295.5185185185187], [885.0, 1217.4999999999998], [884.0, 1080.8], [883.0, 904.5714285714287], [882.0, 935.8888888888889], [924.0, 2107.307692307692], [927.0, 612.2857142857142], [912.0, 45579.424242424226], [914.0, 109533.85714285716], [913.0, 83768.45161290323], [926.0, 847.7352941176471], [925.0, 815.1], [923.0, 1945.9531250000002], [922.0, 854.0], [921.0, 945.3333333333334], [920.0, 893.8846153846154], [906.0, 31175.57534246575], [899.0, 888.5], [901.0, 1414.333333333333], [900.0, 1187.421052631579], [903.0, 133180.62068965516], [902.0, 36460.228571428575], [919.0, 58835.46666666666], [918.0, 46976.75362318841], [952.0, 957.0], [958.0, 910.2187499999999], [959.0, 757.9666666666667], [946.0, 679.625], [944.0, 837.7647058823529], [956.0, 715.2222222222223], [954.0, 901.5], [953.0, 631.2812500000001], [943.0, 1353.8347826086956], [928.0, 837.6250000000001], [930.0, 513.8333333333333], [929.0, 973.9444444444443], [933.0, 1526.5483870967741], [931.0, 5132.666666666667], [935.0, 875.8181818181819], [934.0, 905.3333333333334], [942.0, 904.8461538461538], [940.0, 694.1428571428571], [939.0, 1431.3333333333335], [938.0, 485.8333333333333], [937.0, 551.5], [936.0, 815.9999999999999], [950.0, 767.9545454545455], [949.0, 12472.608695652172], [948.0, 688.0], [947.0, 1032.0], [988.0, 1469.8863636363633], [991.0, 1093.3750000000002], [977.0, 37514.82812500001], [979.0, 911.1249999999999], [978.0, 584.1750000000001], [981.0, 891.5833333333334], [980.0, 1056.6190476190477], [990.0, 1344.567901234568], [989.0, 874.0000000000002], [987.0, 1109.1529411764707], [986.0, 413.3684210526316], [985.0, 1235.945945945946], [984.0, 773.5], [975.0, 2007.9021739130446], [960.0, 785.0459770114942], [962.0, 998.2380952380954], [961.0, 994.6000000000003], [964.0, 1059.1093749999998], [963.0, 1173.4545454545457], [966.0, 373.9062499999999], [965.0, 151.0], [973.0, 1625.2857142857142], [972.0, 1148.157894736842], [971.0, 532.6666666666667], [969.0, 527.5], [968.0, 892.3809523809524], [983.0, 691.3333333333334], [982.0, 788.043956043956], [1000.0, 30230.648244338194], [999.0, 1112.54248366013], [998.0, 1179.1980198019794], [997.0, 799.3448275862067], [996.0, 975.7904509283823], [995.0, 2639.9375], [994.0, 1213.1379310344828], [993.0, 1693.9166666666665], [992.0, 1688.5538461538467], [1.0, 42.5]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[675.9257499999994, 10808.64714999995]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 100.46666666666667, "minX": 1.6917528E12, "maxY": 77660.71666666666, "series": [{"data": [[1.69175292E12, 18913.316666666666], [1.69175304E12, 188.28333333333333], [1.69175286E12, 7006.633333333333], [1.6917528E12, 77660.71666666666], [1.69175298E12, 498.6333333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69175292E12, 10478.466666666667], [1.69175304E12, 100.46666666666667], [1.69175286E12, 3539.0], [1.6917528E12, 34154.166666666664], [1.69175298E12, 274.53333333333336]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69175304E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 48.24390243902439, "minX": 1.6917528E12, "maxY": 12402.364647538087, "series": [{"data": [[1.69175292E12, 7640.724573299036], [1.69175304E12, 48.24390243902439], [1.69175286E12, 5120.761512027475], [1.6917528E12, 12402.364647538087], [1.69175298E12, 8763.401785714283]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69175304E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 48.12195121951221, "minX": 1.6917528E12, "maxY": 11018.193694651134, "series": [{"data": [[1.69175292E12, 7635.446808510644], [1.69175304E12, 48.12195121951221], [1.69175286E12, 4961.3690721649455], [1.6917528E12, 11018.193694651134], [1.69175298E12, 8763.27678571428]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69175304E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 30.41463414634146, "minX": 1.6917528E12, "maxY": 337.0466170740367, "series": [{"data": [[1.69175292E12, 118.05377601122257], [1.69175304E12, 30.41463414634146], [1.69175286E12, 330.28659793814455], [1.6917528E12, 337.0466170740367], [1.69175298E12, 40.276785714285715]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69175304E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 12.0, "minX": 1.6917528E12, "maxY": 61425.0, "series": [{"data": [[1.69175292E12, 27443.0], [1.69175304E12, 121.0], [1.69175286E12, 61425.0], [1.6917528E12, 35485.0], [1.69175298E12, 54960.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69175292E12, 1130.5], [1.69175304E12, 99.0], [1.69175286E12, 320.4000000000001], [1.6917528E12, 2609.2000000000007], [1.69175298E12, 179.79999999999998]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69175292E12, 4137.4], [1.69175304E12, 121.0], [1.69175286E12, 56608.34], [1.6917528E12, 10450.599999999991], [1.69175298E12, 54949.64]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69175292E12, 1400.5], [1.69175304E12, 114.29999999999998], [1.69175286E12, 411.0999999999999], [1.6917528E12, 6789.19999999999], [1.69175298E12, 54621.65]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.69175292E12, 12.0], [1.69175304E12, 12.0], [1.69175286E12, 12.0], [1.6917528E12, 12.0], [1.69175298E12, 12.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69175292E12, 603.0], [1.69175304E12, 44.0], [1.69175286E12, 138.0], [1.6917528E12, 690.0], [1.69175298E12, 62.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69175304E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 31.0, "minX": 2.0, "maxY": 174471.0, "series": [{"data": [[528.0, 1101.5], [2.0, 43.0], [650.0, 411.0], [5.0, 70.5], [6.0, 7593.0], [8.0, 116.0], [9.0, 31.0], [10.0, 68.0], [12.0, 63.0], [14.0, 64.0], [16.0, 66.0], [19.0, 180.0], [21.0, 6808.0], [22.0, 143.0], [24.0, 64.5], [26.0, 83.0], [33.0, 139.0], [40.0, 63.5], [41.0, 44.0], [46.0, 403.0], [47.0, 72.5], [48.0, 429.0], [51.0, 127.0], [60.0, 62.0], [63.0, 63.0], [66.0, 40.0], [68.0, 7867.5], [75.0, 65.0], [72.0, 83.0], [78.0, 50.5], [86.0, 62.0], [89.0, 409.0], [103.0, 67.0], [109.0, 61.0], [114.0, 237.5], [130.0, 2025.0], [142.0, 363.0], [150.0, 176.0], [154.0, 2576.0], [153.0, 1621.5], [164.0, 1040.0], [163.0, 1121.5], [175.0, 253.0], [191.0, 254.5], [184.0, 557.0], [193.0, 307.5], [210.0, 2961.0], [209.0, 517.0], [208.0, 4493.5], [223.0, 773.0], [267.0, 217.0], [262.0, 169.0], [259.0, 1110.0], [275.0, 165.0], [272.0, 612.5], [286.0, 643.0], [287.0, 557.5], [281.0, 587.0], [300.0, 769.5], [303.0, 343.0], [309.0, 435.0], [312.0, 589.5], [310.0, 515.0], [311.0, 651.0], [327.0, 683.0], [321.0, 610.0], [323.0, 611.0], [345.0, 350.0], [336.0, 540.5], [342.0, 411.0], [351.0, 625.5], [360.0, 3573.5], [366.0, 1349.0], [358.0, 1611.5], [364.0, 760.5], [382.0, 961.0], [372.0, 489.0], [368.0, 1252.0], [379.0, 455.0], [391.0, 418.0], [420.0, 1702.0], [421.0, 738.0], [433.0, 1029.0], [437.0, 1459.0], [457.0, 927.0], [464.0, 1345.0], [477.0, 896.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[528.0, 171847.0], [650.0, 151388.0], [40.0, 107883.0], [46.0, 114774.0], [47.0, 110642.0], [60.0, 21038.0], [72.0, 21033.5], [5.0, 21036.0], [89.0, 21119.5], [8.0, 21055.0], [153.0, 39611.0], [164.0, 15129.0], [163.0, 112322.0], [10.0, 21051.0], [191.0, 115032.0], [12.0, 21032.0], [193.0, 114758.0], [208.0, 158762.5], [14.0, 21046.0], [16.0, 21049.0], [311.0, 110250.5], [327.0, 44001.0], [342.0, 21052.0], [21.0, 21048.5], [351.0, 110108.0], [366.0, 21074.0], [22.0, 21049.0], [368.0, 37630.0], [382.0, 40951.0], [26.0, 21051.5], [433.0, 172946.0], [477.0, 174471.0], [502.0, 140885.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 650.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 2.0, "maxY": 151388.0, "series": [{"data": [[528.0, 1086.0], [2.0, 43.0], [650.0, 336.0], [5.0, 70.5], [6.0, 7593.0], [8.0, 102.0], [9.0, 31.0], [10.0, 68.0], [12.0, 63.0], [14.0, 64.0], [16.0, 66.0], [19.0, 180.0], [21.0, 6808.0], [22.0, 143.0], [24.0, 64.0], [26.0, 83.0], [33.0, 129.0], [40.0, 63.5], [41.0, 44.0], [46.0, 403.0], [47.0, 70.5], [48.0, 428.0], [51.0, 127.0], [60.0, 62.0], [63.0, 63.0], [66.0, 39.5], [68.0, 7867.5], [75.0, 65.0], [72.0, 83.0], [78.0, 50.5], [86.0, 62.0], [89.0, 409.0], [103.0, 66.0], [109.0, 61.0], [114.0, 237.0], [130.0, 1971.0], [142.0, 363.0], [150.0, 176.0], [154.0, 2569.5], [153.0, 1620.0], [164.0, 1035.0], [163.0, 1121.0], [175.0, 253.0], [191.0, 254.5], [184.0, 557.0], [193.0, 307.0], [210.0, 2924.0], [209.0, 517.0], [208.0, 4493.5], [223.0, 773.0], [267.0, 216.0], [262.0, 168.0], [259.0, 1110.0], [275.0, 165.0], [272.0, 612.5], [286.0, 642.5], [287.0, 556.5], [281.0, 587.0], [300.0, 769.5], [303.0, 343.0], [309.0, 434.0], [312.0, 589.0], [310.0, 515.0], [311.0, 651.0], [327.0, 683.0], [321.0, 610.0], [323.0, 611.0], [345.0, 350.0], [336.0, 540.5], [342.0, 411.0], [351.0, 625.0], [360.0, 3573.5], [366.0, 1346.0], [358.0, 1611.0], [364.0, 759.5], [382.0, 961.0], [372.0, 486.0], [368.0, 1234.0], [379.0, 454.0], [391.0, 418.0], [420.0, 1702.0], [421.0, 738.0], [433.0, 1013.0], [437.0, 1457.0], [457.0, 902.0], [464.0, 1329.5], [477.0, 884.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[528.0, 0.0], [650.0, 151388.0], [40.0, 107883.0], [46.0, 114774.0], [47.0, 110642.0], [60.0, 0.0], [72.0, 0.0], [5.0, 0.0], [89.0, 0.0], [8.0, 0.0], [153.0, 0.0], [164.0, 15114.0], [163.0, 112322.0], [10.0, 0.0], [191.0, 115032.0], [12.0, 0.0], [193.0, 114758.0], [208.0, 0.0], [14.0, 0.0], [16.0, 0.0], [311.0, 110250.5], [327.0, 0.0], [342.0, 0.0], [21.0, 0.0], [351.0, 110108.0], [366.0, 0.0], [22.0, 0.0], [368.0, 0.0], [382.0, 0.0], [26.0, 0.0], [433.0, 0.0], [477.0, 0.0], [502.0, 140885.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 650.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.6, "minX": 1.69175262E12, "maxY": 224.51666666666668, "series": [{"data": [[1.69175292E12, 67.11666666666666], [1.69175262E12, 16.666666666666668], [1.69175304E12, 0.6], [1.69175286E12, 22.683333333333334], [1.6917528E12, 224.51666666666668], [1.69175298E12, 1.75]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69175304E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6917528E12, "maxY": 211.11666666666667, "series": [{"data": [[1.69175292E12, 66.9], [1.69175304E12, 0.6833333333333333], [1.69175286E12, 23.283333333333335], [1.6917528E12, 211.11666666666667], [1.69175298E12, 1.7666666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.69175292E12, 0.016666666666666666], [1.69175286E12, 0.18333333333333332], [1.6917528E12, 0.26666666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}, {"data": [[1.69175292E12, 4.366666666666666], [1.69175286E12, 0.7833333333333333], [1.69175298E12, 0.1]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.6917528E12, 21.233333333333334]], "isOverall": false, "label": "503", "isController": false}, {"data": [[1.6917528E12, 2.6333333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69175304E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.6917528E12, "maxY": 211.11666666666667, "series": [{"data": [[1.69175292E12, 4.383333333333334], [1.69175286E12, 0.9666666666666667], [1.6917528E12, 24.133333333333333], [1.69175298E12, 0.1]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}, {"data": [[1.69175292E12, 66.9], [1.69175304E12, 0.6833333333333333], [1.69175286E12, 23.283333333333335], [1.6917528E12, 211.11666666666667], [1.69175298E12, 1.7666666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69175304E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.6917528E12, "maxY": 211.11666666666667, "series": [{"data": [[1.69175292E12, 66.9], [1.69175304E12, 0.6833333333333333], [1.69175286E12, 23.283333333333335], [1.6917528E12, 211.11666666666667], [1.69175298E12, 1.7666666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.69175292E12, 4.383333333333334], [1.69175286E12, 0.9666666666666667], [1.6917528E12, 24.133333333333333], [1.69175298E12, 0.1]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69175304E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

