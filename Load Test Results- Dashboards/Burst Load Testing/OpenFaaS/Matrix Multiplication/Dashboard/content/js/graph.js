/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 63.0, "minX": 0.0, "maxY": 65581.0, "series": [{"data": [[0.0, 63.0], [0.1, 79.0], [0.2, 90.0], [0.3, 98.0], [0.4, 106.0], [0.5, 111.0], [0.6, 126.0], [0.7, 160.0], [0.8, 171.0], [0.9, 180.0], [1.0, 185.0], [1.1, 188.0], [1.2, 193.0], [1.3, 196.0], [1.4, 200.0], [1.5, 202.0], [1.6, 204.0], [1.7, 208.0], [1.8, 210.0], [1.9, 211.0], [2.0, 214.0], [2.1, 216.0], [2.2, 218.0], [2.3, 219.0], [2.4, 221.0], [2.5, 223.0], [2.6, 225.0], [2.7, 227.0], [2.8, 229.0], [2.9, 231.0], [3.0, 233.0], [3.1, 235.0], [3.2, 238.0], [3.3, 243.0], [3.4, 247.0], [3.5, 252.0], [3.6, 258.0], [3.7, 263.0], [3.8, 266.0], [3.9, 269.0], [4.0, 270.0], [4.1, 272.0], [4.2, 273.0], [4.3, 275.0], [4.4, 277.0], [4.5, 279.0], [4.6, 281.0], [4.7, 283.0], [4.8, 285.0], [4.9, 287.0], [5.0, 288.0], [5.1, 289.0], [5.2, 291.0], [5.3, 293.0], [5.4, 295.0], [5.5, 296.0], [5.6, 298.0], [5.7, 300.0], [5.8, 301.0], [5.9, 303.0], [6.0, 305.0], [6.1, 306.0], [6.2, 307.0], [6.3, 309.0], [6.4, 310.0], [6.5, 312.0], [6.6, 314.0], [6.7, 315.0], [6.8, 317.0], [6.9, 319.0], [7.0, 320.0], [7.1, 321.0], [7.2, 323.0], [7.3, 325.0], [7.4, 325.0], [7.5, 326.0], [7.6, 327.0], [7.7, 329.0], [7.8, 330.0], [7.9, 331.0], [8.0, 332.0], [8.1, 333.0], [8.2, 335.0], [8.3, 336.0], [8.4, 336.0], [8.5, 337.0], [8.6, 339.0], [8.7, 339.0], [8.8, 341.0], [8.9, 342.0], [9.0, 343.0], [9.1, 344.0], [9.2, 345.0], [9.3, 346.0], [9.4, 347.0], [9.5, 348.0], [9.6, 349.0], [9.7, 350.0], [9.8, 352.0], [9.9, 352.0], [10.0, 354.0], [10.1, 355.0], [10.2, 356.0], [10.3, 358.0], [10.4, 359.0], [10.5, 361.0], [10.6, 362.0], [10.7, 364.0], [10.8, 367.0], [10.9, 368.0], [11.0, 372.0], [11.1, 376.0], [11.2, 378.0], [11.3, 382.0], [11.4, 383.0], [11.5, 385.0], [11.6, 388.0], [11.7, 390.0], [11.8, 391.0], [11.9, 393.0], [12.0, 394.0], [12.1, 394.0], [12.2, 395.0], [12.3, 397.0], [12.4, 397.0], [12.5, 398.0], [12.6, 398.0], [12.7, 400.0], [12.8, 401.0], [12.9, 402.0], [13.0, 402.0], [13.1, 403.0], [13.2, 404.0], [13.3, 405.0], [13.4, 406.0], [13.5, 407.0], [13.6, 408.0], [13.7, 409.0], [13.8, 410.0], [13.9, 411.0], [14.0, 413.0], [14.1, 414.0], [14.2, 415.0], [14.3, 416.0], [14.4, 417.0], [14.5, 418.0], [14.6, 419.0], [14.7, 420.0], [14.8, 421.0], [14.9, 423.0], [15.0, 424.0], [15.1, 425.0], [15.2, 425.0], [15.3, 426.0], [15.4, 427.0], [15.5, 428.0], [15.6, 429.0], [15.7, 430.0], [15.8, 430.0], [15.9, 431.0], [16.0, 432.0], [16.1, 433.0], [16.2, 434.0], [16.3, 434.0], [16.4, 435.0], [16.5, 436.0], [16.6, 437.0], [16.7, 437.0], [16.8, 438.0], [16.9, 439.0], [17.0, 439.0], [17.1, 440.0], [17.2, 441.0], [17.3, 442.0], [17.4, 443.0], [17.5, 444.0], [17.6, 444.0], [17.7, 445.0], [17.8, 446.0], [17.9, 446.0], [18.0, 447.0], [18.1, 448.0], [18.2, 448.0], [18.3, 449.0], [18.4, 450.0], [18.5, 451.0], [18.6, 452.0], [18.7, 452.0], [18.8, 453.0], [18.9, 454.0], [19.0, 455.0], [19.1, 455.0], [19.2, 456.0], [19.3, 457.0], [19.4, 458.0], [19.5, 459.0], [19.6, 460.0], [19.7, 461.0], [19.8, 462.0], [19.9, 462.0], [20.0, 463.0], [20.1, 464.0], [20.2, 465.0], [20.3, 466.0], [20.4, 466.0], [20.5, 467.0], [20.6, 468.0], [20.7, 469.0], [20.8, 470.0], [20.9, 470.0], [21.0, 471.0], [21.1, 472.0], [21.2, 473.0], [21.3, 474.0], [21.4, 475.0], [21.5, 476.0], [21.6, 477.0], [21.7, 478.0], [21.8, 479.0], [21.9, 480.0], [22.0, 481.0], [22.1, 482.0], [22.2, 483.0], [22.3, 485.0], [22.4, 486.0], [22.5, 488.0], [22.6, 489.0], [22.7, 490.0], [22.8, 493.0], [22.9, 495.0], [23.0, 497.0], [23.1, 498.0], [23.2, 500.0], [23.3, 503.0], [23.4, 505.0], [23.5, 507.0], [23.6, 509.0], [23.7, 511.0], [23.8, 512.0], [23.9, 513.0], [24.0, 515.0], [24.1, 515.0], [24.2, 516.0], [24.3, 517.0], [24.4, 518.0], [24.5, 518.0], [24.6, 519.0], [24.7, 520.0], [24.8, 520.0], [24.9, 521.0], [25.0, 522.0], [25.1, 522.0], [25.2, 523.0], [25.3, 524.0], [25.4, 525.0], [25.5, 526.0], [25.6, 526.0], [25.7, 527.0], [25.8, 527.0], [25.9, 528.0], [26.0, 529.0], [26.1, 530.0], [26.2, 530.0], [26.3, 531.0], [26.4, 532.0], [26.5, 534.0], [26.6, 534.0], [26.7, 536.0], [26.8, 536.0], [26.9, 537.0], [27.0, 538.0], [27.1, 539.0], [27.2, 540.0], [27.3, 541.0], [27.4, 541.0], [27.5, 542.0], [27.6, 544.0], [27.7, 545.0], [27.8, 545.0], [27.9, 546.0], [28.0, 547.0], [28.1, 548.0], [28.2, 549.0], [28.3, 551.0], [28.4, 551.0], [28.5, 553.0], [28.6, 553.0], [28.7, 554.0], [28.8, 555.0], [28.9, 556.0], [29.0, 557.0], [29.1, 558.0], [29.2, 559.0], [29.3, 560.0], [29.4, 561.0], [29.5, 562.0], [29.6, 562.0], [29.7, 563.0], [29.8, 564.0], [29.9, 565.0], [30.0, 566.0], [30.1, 567.0], [30.2, 567.0], [30.3, 568.0], [30.4, 568.0], [30.5, 569.0], [30.6, 570.0], [30.7, 571.0], [30.8, 572.0], [30.9, 572.0], [31.0, 573.0], [31.1, 573.0], [31.2, 574.0], [31.3, 575.0], [31.4, 576.0], [31.5, 576.0], [31.6, 577.0], [31.7, 578.0], [31.8, 578.0], [31.9, 579.0], [32.0, 580.0], [32.1, 581.0], [32.2, 582.0], [32.3, 582.0], [32.4, 583.0], [32.5, 584.0], [32.6, 585.0], [32.7, 585.0], [32.8, 586.0], [32.9, 587.0], [33.0, 588.0], [33.1, 589.0], [33.2, 589.0], [33.3, 590.0], [33.4, 591.0], [33.5, 592.0], [33.6, 593.0], [33.7, 594.0], [33.8, 595.0], [33.9, 596.0], [34.0, 597.0], [34.1, 598.0], [34.2, 598.0], [34.3, 599.0], [34.4, 600.0], [34.5, 602.0], [34.6, 603.0], [34.7, 605.0], [34.8, 606.0], [34.9, 607.0], [35.0, 609.0], [35.1, 610.0], [35.2, 611.0], [35.3, 613.0], [35.4, 615.0], [35.5, 617.0], [35.6, 619.0], [35.7, 621.0], [35.8, 623.0], [35.9, 625.0], [36.0, 626.0], [36.1, 628.0], [36.2, 630.0], [36.3, 631.0], [36.4, 632.0], [36.5, 634.0], [36.6, 635.0], [36.7, 636.0], [36.8, 637.0], [36.9, 638.0], [37.0, 639.0], [37.1, 640.0], [37.2, 641.0], [37.3, 642.0], [37.4, 644.0], [37.5, 645.0], [37.6, 646.0], [37.7, 647.0], [37.8, 648.0], [37.9, 649.0], [38.0, 650.0], [38.1, 651.0], [38.2, 652.0], [38.3, 653.0], [38.4, 654.0], [38.5, 655.0], [38.6, 656.0], [38.7, 657.0], [38.8, 658.0], [38.9, 660.0], [39.0, 661.0], [39.1, 662.0], [39.2, 663.0], [39.3, 665.0], [39.4, 666.0], [39.5, 667.0], [39.6, 669.0], [39.7, 670.0], [39.8, 672.0], [39.9, 673.0], [40.0, 675.0], [40.1, 675.0], [40.2, 677.0], [40.3, 677.0], [40.4, 679.0], [40.5, 680.0], [40.6, 682.0], [40.7, 683.0], [40.8, 684.0], [40.9, 685.0], [41.0, 687.0], [41.1, 688.0], [41.2, 689.0], [41.3, 691.0], [41.4, 691.0], [41.5, 692.0], [41.6, 693.0], [41.7, 695.0], [41.8, 695.0], [41.9, 696.0], [42.0, 697.0], [42.1, 698.0], [42.2, 699.0], [42.3, 700.0], [42.4, 701.0], [42.5, 703.0], [42.6, 704.0], [42.7, 705.0], [42.8, 706.0], [42.9, 707.0], [43.0, 708.0], [43.1, 709.0], [43.2, 711.0], [43.3, 712.0], [43.4, 713.0], [43.5, 714.0], [43.6, 716.0], [43.7, 717.0], [43.8, 719.0], [43.9, 720.0], [44.0, 721.0], [44.1, 723.0], [44.2, 724.0], [44.3, 726.0], [44.4, 727.0], [44.5, 730.0], [44.6, 732.0], [44.7, 734.0], [44.8, 736.0], [44.9, 739.0], [45.0, 741.0], [45.1, 743.0], [45.2, 746.0], [45.3, 749.0], [45.4, 752.0], [45.5, 753.0], [45.6, 755.0], [45.7, 758.0], [45.8, 760.0], [45.9, 761.0], [46.0, 763.0], [46.1, 765.0], [46.2, 767.0], [46.3, 768.0], [46.4, 771.0], [46.5, 772.0], [46.6, 775.0], [46.7, 776.0], [46.8, 779.0], [46.9, 781.0], [47.0, 783.0], [47.1, 785.0], [47.2, 788.0], [47.3, 791.0], [47.4, 794.0], [47.5, 796.0], [47.6, 799.0], [47.7, 802.0], [47.8, 805.0], [47.9, 808.0], [48.0, 810.0], [48.1, 812.0], [48.2, 815.0], [48.3, 817.0], [48.4, 819.0], [48.5, 821.0], [48.6, 824.0], [48.7, 827.0], [48.8, 830.0], [48.9, 833.0], [49.0, 836.0], [49.1, 838.0], [49.2, 841.0], [49.3, 844.0], [49.4, 848.0], [49.5, 853.0], [49.6, 859.0], [49.7, 864.0], [49.8, 869.0], [49.9, 873.0], [50.0, 878.0], [50.1, 881.0], [50.2, 886.0], [50.3, 891.0], [50.4, 896.0], [50.5, 900.0], [50.6, 908.0], [50.7, 915.0], [50.8, 923.0], [50.9, 931.0], [51.0, 939.0], [51.1, 947.0], [51.2, 953.0], [51.3, 966.0], [51.4, 977.0], [51.5, 988.0], [51.6, 1004.0], [51.7, 1014.0], [51.8, 1030.0], [51.9, 1050.0], [52.0, 1066.0], [52.1, 1089.0], [52.2, 1105.0], [52.3, 1116.0], [52.4, 1126.0], [52.5, 1143.0], [52.6, 1170.0], [52.7, 1188.0], [52.8, 1203.0], [52.9, 1211.0], [53.0, 1216.0], [53.1, 1219.0], [53.2, 1223.0], [53.3, 1226.0], [53.4, 1230.0], [53.5, 1233.0], [53.6, 1240.0], [53.7, 1251.0], [53.8, 1262.0], [53.9, 1275.0], [54.0, 1289.0], [54.1, 1301.0], [54.2, 1309.0], [54.3, 1319.0], [54.4, 1324.0], [54.5, 1330.0], [54.6, 1334.0], [54.7, 1338.0], [54.8, 1342.0], [54.9, 1344.0], [55.0, 1347.0], [55.1, 1349.0], [55.2, 1351.0], [55.3, 1354.0], [55.4, 1356.0], [55.5, 1358.0], [55.6, 1361.0], [55.7, 1366.0], [55.8, 1371.0], [55.9, 1376.0], [56.0, 1382.0], [56.1, 1389.0], [56.2, 1395.0], [56.3, 1403.0], [56.4, 1409.0], [56.5, 1415.0], [56.6, 1420.0], [56.7, 1426.0], [56.8, 1431.0], [56.9, 1434.0], [57.0, 1439.0], [57.1, 1443.0], [57.2, 1447.0], [57.3, 1449.0], [57.4, 1452.0], [57.5, 1455.0], [57.6, 1459.0], [57.7, 1460.0], [57.8, 1463.0], [57.9, 1465.0], [58.0, 1468.0], [58.1, 1469.0], [58.2, 1471.0], [58.3, 1473.0], [58.4, 1475.0], [58.5, 1477.0], [58.6, 1479.0], [58.7, 1481.0], [58.8, 1484.0], [58.9, 1486.0], [59.0, 1489.0], [59.1, 1492.0], [59.2, 1496.0], [59.3, 1499.0], [59.4, 1503.0], [59.5, 1507.0], [59.6, 1511.0], [59.7, 1514.0], [59.8, 1520.0], [59.9, 1524.0], [60.0, 1529.0], [60.1, 1533.0], [60.2, 1536.0], [60.3, 1543.0], [60.4, 1547.0], [60.5, 1552.0], [60.6, 1558.0], [60.7, 1562.0], [60.8, 1567.0], [60.9, 1572.0], [61.0, 1576.0], [61.1, 1581.0], [61.2, 1584.0], [61.3, 1586.0], [61.4, 1589.0], [61.5, 1591.0], [61.6, 1594.0], [61.7, 1596.0], [61.8, 1598.0], [61.9, 1600.0], [62.0, 1602.0], [62.1, 1604.0], [62.2, 1608.0], [62.3, 1611.0], [62.4, 1615.0], [62.5, 1619.0], [62.6, 1623.0], [62.7, 1628.0], [62.8, 1634.0], [62.9, 1641.0], [63.0, 1646.0], [63.1, 1652.0], [63.2, 1657.0], [63.3, 1660.0], [63.4, 1664.0], [63.5, 1669.0], [63.6, 1674.0], [63.7, 1680.0], [63.8, 1684.0], [63.9, 1689.0], [64.0, 1694.0], [64.1, 1700.0], [64.2, 1705.0], [64.3, 1708.0], [64.4, 1712.0], [64.5, 1715.0], [64.6, 1721.0], [64.7, 1725.0], [64.8, 1728.0], [64.9, 1733.0], [65.0, 1737.0], [65.1, 1743.0], [65.2, 1748.0], [65.3, 1753.0], [65.4, 1761.0], [65.5, 1766.0], [65.6, 1773.0], [65.7, 1780.0], [65.8, 1785.0], [65.9, 1794.0], [66.0, 1802.0], [66.1, 1810.0], [66.2, 1815.0], [66.3, 1822.0], [66.4, 1832.0], [66.5, 1840.0], [66.6, 1849.0], [66.7, 1857.0], [66.8, 1863.0], [66.9, 1870.0], [67.0, 1878.0], [67.1, 1888.0], [67.2, 1897.0], [67.3, 1910.0], [67.4, 1920.0], [67.5, 1940.0], [67.6, 1951.0], [67.7, 1964.0], [67.8, 1977.0], [67.9, 1993.0], [68.0, 2011.0], [68.1, 2035.0], [68.2, 2055.0], [68.3, 2083.0], [68.4, 2116.0], [68.5, 2154.0], [68.6, 2191.0], [68.7, 2252.0], [68.8, 2326.0], [68.9, 2402.0], [69.0, 2490.0], [69.1, 2617.0], [69.2, 2773.0], [69.3, 2906.0], [69.4, 2983.0], [69.5, 3100.0], [69.6, 3157.0], [69.7, 3203.0], [69.8, 3216.0], [69.9, 3227.0], [70.0, 3238.0], [70.1, 3251.0], [70.2, 3266.0], [70.3, 3289.0], [70.4, 3310.0], [70.5, 3322.0], [70.6, 3332.0], [70.7, 3342.0], [70.8, 3350.0], [70.9, 3357.0], [71.0, 3366.0], [71.1, 3372.0], [71.2, 3381.0], [71.3, 3390.0], [71.4, 3401.0], [71.5, 3412.0], [71.6, 3431.0], [71.7, 3441.0], [71.8, 3448.0], [71.9, 3457.0], [72.0, 3466.0], [72.1, 3471.0], [72.2, 3479.0], [72.3, 3488.0], [72.4, 3494.0], [72.5, 3503.0], [72.6, 3510.0], [72.7, 3519.0], [72.8, 3525.0], [72.9, 3530.0], [73.0, 3536.0], [73.1, 3543.0], [73.2, 3553.0], [73.3, 3561.0], [73.4, 3568.0], [73.5, 3578.0], [73.6, 3584.0], [73.7, 3591.0], [73.8, 3597.0], [73.9, 3603.0], [74.0, 3611.0], [74.1, 3616.0], [74.2, 3621.0], [74.3, 3627.0], [74.4, 3634.0], [74.5, 3643.0], [74.6, 3652.0], [74.7, 3662.0], [74.8, 3669.0], [74.9, 3678.0], [75.0, 3686.0], [75.1, 3696.0], [75.2, 3707.0], [75.3, 3715.0], [75.4, 3723.0], [75.5, 3731.0], [75.6, 3740.0], [75.7, 3748.0], [75.8, 3757.0], [75.9, 3765.0], [76.0, 3772.0], [76.1, 3780.0], [76.2, 3791.0], [76.3, 3800.0], [76.4, 3810.0], [76.5, 3820.0], [76.6, 3835.0], [76.7, 3847.0], [76.8, 3859.0], [76.9, 3871.0], [77.0, 3889.0], [77.1, 3898.0], [77.2, 3921.0], [77.3, 3940.0], [77.4, 3958.0], [77.5, 3988.0], [77.6, 4022.0], [77.7, 4053.0], [77.8, 4103.0], [77.9, 4153.0], [78.0, 4196.0], [78.1, 4271.0], [78.2, 4339.0], [78.3, 4436.0], [78.4, 4503.0], [78.5, 4652.0], [78.6, 4750.0], [78.7, 4818.0], [78.8, 4973.0], [78.9, 5071.0], [79.0, 5192.0], [79.1, 5383.0], [79.2, 5784.0], [79.3, 6263.0], [79.4, 6594.0], [79.5, 6920.0], [79.6, 7182.0], [79.7, 7289.0], [79.8, 7339.0], [79.9, 7376.0], [80.0, 7402.0], [80.1, 7426.0], [80.2, 7450.0], [80.3, 7470.0], [80.4, 7487.0], [80.5, 7512.0], [80.6, 7542.0], [80.7, 7555.0], [80.8, 7576.0], [80.9, 7590.0], [81.0, 7603.0], [81.1, 7615.0], [81.2, 7629.0], [81.3, 7646.0], [81.4, 7663.0], [81.5, 7677.0], [81.6, 7689.0], [81.7, 7695.0], [81.8, 7708.0], [81.9, 7723.0], [82.0, 7742.0], [82.1, 7758.0], [82.2, 7776.0], [82.3, 7789.0], [82.4, 7805.0], [82.5, 7820.0], [82.6, 7832.0], [82.7, 7849.0], [82.8, 7863.0], [82.9, 7879.0], [83.0, 7899.0], [83.1, 7931.0], [83.2, 7950.0], [83.3, 7965.0], [83.4, 7993.0], [83.5, 8025.0], [83.6, 8043.0], [83.7, 8084.0], [83.8, 8108.0], [83.9, 8146.0], [84.0, 8199.0], [84.1, 8250.0], [84.2, 8308.0], [84.3, 8395.0], [84.4, 8527.0], [84.5, 8690.0], [84.6, 8940.0], [84.7, 9110.0], [84.8, 9317.0], [84.9, 9570.0], [85.0, 10440.0], [85.1, 10787.0], [85.2, 11110.0], [85.3, 11302.0], [85.4, 12159.0], [85.5, 13502.0], [85.6, 14301.0], [85.7, 14722.0], [85.8, 15413.0], [85.9, 15533.0], [86.0, 15590.0], [86.1, 15633.0], [86.2, 15680.0], [86.3, 15715.0], [86.4, 15751.0], [86.5, 15781.0], [86.6, 15803.0], [86.7, 15820.0], [86.8, 15839.0], [86.9, 15861.0], [87.0, 15892.0], [87.1, 15913.0], [87.2, 15938.0], [87.3, 15959.0], [87.4, 15982.0], [87.5, 15999.0], [87.6, 16019.0], [87.7, 16034.0], [87.8, 16054.0], [87.9, 16086.0], [88.0, 16110.0], [88.1, 16136.0], [88.2, 16167.0], [88.3, 16201.0], [88.4, 16235.0], [88.5, 16277.0], [88.6, 16312.0], [88.7, 16344.0], [88.8, 16395.0], [88.9, 16532.0], [89.0, 16673.0], [89.1, 16881.0], [89.2, 17097.0], [89.3, 17299.0], [89.4, 17584.0], [89.5, 18132.0], [89.6, 19295.0], [89.7, 20794.0], [89.8, 21454.0], [89.9, 22597.0], [90.0, 23825.0], [90.1, 28191.0], [90.2, 29363.0], [90.3, 31524.0], [90.4, 31717.0], [90.5, 31783.0], [90.6, 31843.0], [90.7, 31895.0], [90.8, 31926.0], [90.9, 31951.0], [91.0, 31987.0], [91.1, 32011.0], [91.2, 32040.0], [91.3, 32071.0], [91.4, 32112.0], [91.5, 32151.0], [91.6, 32187.0], [91.7, 32218.0], [91.8, 32261.0], [91.9, 32345.0], [92.0, 32452.0], [92.1, 32577.0], [92.2, 32852.0], [92.3, 33216.0], [92.4, 33540.0], [92.5, 34971.0], [92.6, 35578.0], [92.7, 38991.0], [92.8, 45432.0], [92.9, 57764.0], [93.0, 60062.0], [93.1, 60071.0], [93.2, 60076.0], [93.3, 60081.0], [93.4, 60084.0], [93.5, 60087.0], [93.6, 60092.0], [93.7, 60095.0], [93.8, 60102.0], [93.9, 60111.0], [94.0, 60127.0], [94.1, 60143.0], [94.2, 60175.0], [94.3, 60209.0], [94.4, 60235.0], [94.5, 60263.0], [94.6, 60296.0], [94.7, 60325.0], [94.8, 60368.0], [94.9, 60421.0], [95.0, 60448.0], [95.1, 60477.0], [95.2, 60524.0], [95.3, 60562.0], [95.4, 60586.0], [95.5, 60625.0], [95.6, 60665.0], [95.7, 60704.0], [95.8, 60742.0], [95.9, 60822.0], [96.0, 61235.0], [96.1, 61370.0], [96.2, 61440.0], [96.3, 61500.0], [96.4, 61572.0], [96.5, 61615.0], [96.6, 61701.0], [96.7, 61774.0], [96.8, 61941.0], [96.9, 62884.0], [97.0, 63363.0], [97.1, 63489.0], [97.2, 63584.0], [97.3, 63668.0], [97.4, 63718.0], [97.5, 63821.0], [97.6, 64163.0], [97.7, 65027.0], [97.8, 65033.0], [97.9, 65036.0], [98.0, 65038.0], [98.1, 65039.0], [98.2, 65042.0], [98.3, 65045.0], [98.4, 65048.0], [98.5, 65053.0], [98.6, 65058.0], [98.7, 65062.0], [98.8, 65065.0], [98.9, 65068.0], [99.0, 65070.0], [99.1, 65075.0], [99.2, 65077.0], [99.3, 65082.0], [99.4, 65085.0], [99.5, 65092.0], [99.6, 65097.0], [99.7, 65102.0], [99.8, 65123.0], [99.9, 65180.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 2229.0, "series": [{"data": [[0.0, 63.0], [100.0, 212.0], [32900.0, 5.0], [33300.0, 10.0], [33700.0, 3.0], [34100.0, 1.0], [35300.0, 2.0], [34900.0, 1.0], [35700.0, 1.0], [38500.0, 4.0], [37700.0, 1.0], [38900.0, 1.0], [42900.0, 2.0], [42500.0, 1.0], [45300.0, 1.0], [200.0, 861.0], [53300.0, 1.0], [54500.0, 2.0], [55700.0, 1.0], [56100.0, 1.0], [56900.0, 2.0], [57700.0, 2.0], [58100.0, 4.0], [58900.0, 1.0], [60100.0, 100.0], [61300.0, 25.0], [60900.0, 4.0], [60500.0, 55.0], [61700.0, 27.0], [63300.0, 11.0], [62900.0, 1.0], [62100.0, 2.0], [62500.0, 1.0], [63700.0, 26.0], [64100.0, 5.0], [64500.0, 1.0], [65300.0, 8.0], [300.0, 1402.0], [400.0, 2095.0], [500.0, 2229.0], [600.0, 1581.0], [700.0, 1078.0], [800.0, 579.0], [900.0, 216.0], [1000.0, 115.0], [1100.0, 123.0], [1200.0, 264.0], [1300.0, 433.0], [1400.0, 609.0], [1500.0, 515.0], [1600.0, 442.0], [1700.0, 375.0], [1800.0, 250.0], [1900.0, 145.0], [2000.0, 81.0], [2100.0, 56.0], [2300.0, 25.0], [2200.0, 31.0], [2400.0, 21.0], [2500.0, 18.0], [2600.0, 9.0], [2700.0, 19.0], [2800.0, 13.0], [2900.0, 22.0], [3000.0, 17.0], [3100.0, 39.0], [3300.0, 207.0], [3200.0, 134.0], [3400.0, 216.0], [3500.0, 271.0], [3600.0, 263.0], [3700.0, 231.0], [3800.0, 164.0], [3900.0, 82.0], [4000.0, 53.0], [4100.0, 43.0], [4300.0, 28.0], [4200.0, 23.0], [4500.0, 15.0], [4600.0, 16.0], [4400.0, 25.0], [4700.0, 24.0], [4800.0, 15.0], [5000.0, 19.0], [5100.0, 16.0], [4900.0, 18.0], [5300.0, 10.0], [5200.0, 12.0], [5600.0, 4.0], [5400.0, 9.0], [5500.0, 3.0], [5700.0, 2.0], [5900.0, 6.0], [6000.0, 7.0], [6100.0, 3.0], [6300.0, 4.0], [6200.0, 6.0], [6400.0, 9.0], [6500.0, 5.0], [6600.0, 5.0], [6700.0, 6.0], [6800.0, 7.0], [6900.0, 8.0], [7000.0, 6.0], [7100.0, 9.0], [7300.0, 49.0], [7400.0, 95.0], [7200.0, 23.0], [7600.0, 151.0], [7500.0, 110.0], [7700.0, 122.0], [7800.0, 129.0], [7900.0, 81.0], [8100.0, 50.0], [8000.0, 69.0], [8600.0, 9.0], [8500.0, 15.0], [8300.0, 26.0], [8700.0, 6.0], [8200.0, 34.0], [8400.0, 16.0], [8900.0, 7.0], [8800.0, 11.0], [9200.0, 8.0], [9100.0, 11.0], [9000.0, 14.0], [9400.0, 10.0], [9500.0, 7.0], [9300.0, 7.0], [9600.0, 3.0], [9700.0, 2.0], [10100.0, 1.0], [10200.0, 3.0], [9800.0, 1.0], [10000.0, 1.0], [10400.0, 4.0], [10700.0, 9.0], [10500.0, 5.0], [10300.0, 6.0], [10600.0, 4.0], [11000.0, 8.0], [11100.0, 12.0], [11200.0, 9.0], [10800.0, 7.0], [10900.0, 3.0], [11300.0, 5.0], [11400.0, 5.0], [11500.0, 2.0], [11600.0, 1.0], [11700.0, 2.0], [11800.0, 3.0], [12000.0, 1.0], [12100.0, 2.0], [12200.0, 1.0], [12300.0, 4.0], [12700.0, 1.0], [13000.0, 1.0], [12900.0, 2.0], [13200.0, 3.0], [13300.0, 2.0], [13600.0, 2.0], [13400.0, 5.0], [13700.0, 1.0], [13500.0, 2.0], [13900.0, 2.0], [14100.0, 8.0], [14200.0, 5.0], [14300.0, 4.0], [14700.0, 6.0], [14600.0, 8.0], [14500.0, 6.0], [14800.0, 5.0], [14400.0, 1.0], [14900.0, 3.0], [15300.0, 3.0], [15100.0, 1.0], [15000.0, 3.0], [15600.0, 48.0], [15800.0, 88.0], [15700.0, 67.0], [15500.0, 30.0], [15400.0, 14.0], [15900.0, 94.0], [16000.0, 91.0], [16100.0, 67.0], [16200.0, 53.0], [16300.0, 50.0], [16400.0, 14.0], [16600.0, 13.0], [17200.0, 8.0], [16800.0, 7.0], [17000.0, 6.0], [17400.0, 3.0], [17800.0, 5.0], [18400.0, 2.0], [17600.0, 4.0], [19400.0, 3.0], [19200.0, 4.0], [18800.0, 4.0], [19000.0, 2.0], [18600.0, 1.0], [19800.0, 1.0], [20400.0, 1.0], [19600.0, 1.0], [21200.0, 1.0], [21000.0, 6.0], [21400.0, 2.0], [20600.0, 1.0], [20800.0, 2.0], [22200.0, 3.0], [22400.0, 2.0], [21800.0, 1.0], [21600.0, 1.0], [22600.0, 8.0], [22800.0, 3.0], [23600.0, 3.0], [24400.0, 1.0], [23800.0, 1.0], [24800.0, 1.0], [26600.0, 1.0], [26200.0, 1.0], [26400.0, 1.0], [27000.0, 2.0], [26800.0, 1.0], [28200.0, 1.0], [28400.0, 1.0], [28000.0, 2.0], [28600.0, 1.0], [27800.0, 1.0], [29200.0, 5.0], [29400.0, 1.0], [29000.0, 3.0], [30400.0, 2.0], [30200.0, 2.0], [30000.0, 1.0], [31600.0, 10.0], [32600.0, 10.0], [32400.0, 21.0], [31800.0, 38.0], [32000.0, 62.0], [32200.0, 43.0], [32800.0, 4.0], [34400.0, 2.0], [33200.0, 4.0], [34000.0, 1.0], [33600.0, 2.0], [35200.0, 6.0], [35600.0, 2.0], [37600.0, 2.0], [38800.0, 2.0], [42400.0, 2.0], [42800.0, 1.0], [44800.0, 1.0], [55200.0, 1.0], [57200.0, 1.0], [60400.0, 59.0], [60000.0, 162.0], [60800.0, 16.0], [61200.0, 11.0], [62000.0, 3.0], [61600.0, 28.0], [63200.0, 8.0], [62800.0, 3.0], [62400.0, 2.0], [63600.0, 26.0], [64000.0, 6.0], [64400.0, 4.0], [65200.0, 6.0], [64800.0, 2.0], [33900.0, 2.0], [33500.0, 4.0], [33100.0, 3.0], [34700.0, 2.0], [35100.0, 3.0], [35500.0, 1.0], [37500.0, 1.0], [38700.0, 1.0], [39100.0, 1.0], [42300.0, 2.0], [44300.0, 1.0], [43100.0, 1.0], [44700.0, 1.0], [55100.0, 1.0], [56300.0, 3.0], [57900.0, 2.0], [58300.0, 1.0], [58700.0, 2.0], [60300.0, 51.0], [60700.0, 35.0], [61100.0, 3.0], [61500.0, 32.0], [63100.0, 2.0], [61900.0, 5.0], [62300.0, 2.0], [62700.0, 1.0], [65100.0, 53.0], [63500.0, 24.0], [63900.0, 6.0], [64300.0, 3.0], [64700.0, 1.0], [65500.0, 1.0], [16900.0, 13.0], [16500.0, 16.0], [17100.0, 12.0], [16700.0, 10.0], [17300.0, 10.0], [17700.0, 6.0], [18100.0, 1.0], [17900.0, 2.0], [17500.0, 9.0], [19300.0, 3.0], [19100.0, 5.0], [18900.0, 2.0], [19700.0, 1.0], [19500.0, 4.0], [20900.0, 3.0], [21300.0, 1.0], [21100.0, 5.0], [20700.0, 5.0], [20500.0, 1.0], [22300.0, 4.0], [21900.0, 1.0], [22500.0, 4.0], [21700.0, 2.0], [22100.0, 1.0], [23100.0, 1.0], [22700.0, 2.0], [23500.0, 1.0], [23700.0, 1.0], [26500.0, 1.0], [26900.0, 3.0], [26700.0, 2.0], [28500.0, 1.0], [28100.0, 1.0], [28300.0, 1.0], [27900.0, 1.0], [27700.0, 1.0], [29100.0, 4.0], [29500.0, 2.0], [29300.0, 2.0], [28900.0, 2.0], [29900.0, 4.0], [29700.0, 1.0], [30300.0, 1.0], [30700.0, 1.0], [30100.0, 3.0], [31700.0, 32.0], [31500.0, 5.0], [32100.0, 53.0], [31900.0, 65.0], [32300.0, 21.0], [32700.0, 7.0], [32500.0, 12.0], [33000.0, 9.0], [33800.0, 5.0], [33400.0, 4.0], [35400.0, 4.0], [35000.0, 4.0], [35800.0, 1.0], [38600.0, 3.0], [37800.0, 1.0], [39000.0, 1.0], [42600.0, 2.0], [42200.0, 1.0], [45000.0, 1.0], [45400.0, 4.0], [55400.0, 1.0], [55800.0, 1.0], [58600.0, 1.0], [60200.0, 67.0], [60600.0, 52.0], [61000.0, 1.0], [61400.0, 27.0], [61800.0, 13.0], [63400.0, 17.0], [62200.0, 2.0], [63000.0, 1.0], [62600.0, 1.0], [65000.0, 393.0], [63800.0, 7.0], [64200.0, 4.0], [65400.0, 1.0], [64600.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 65500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1410.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 7221.0, "series": [{"data": [[0.0, 4641.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 7221.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 6728.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1410.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 6.161290322580645, "minX": 1.69211874E12, "maxY": 100.0, "series": [{"data": [[1.69211898E12, 100.0], [1.69211928E12, 100.0], [1.6921203E12, 52.36867469879526], [1.69212018E12, 83.5396825396825], [1.69211958E12, 100.0], [1.69211988E12, 98.86285714285714], [1.69211946E12, 100.0], [1.69211976E12, 100.0], [1.69211886E12, 100.0], [1.69211916E12, 100.0], [1.69211874E12, 46.285714285714285], [1.69211904E12, 100.0], [1.69212006E12, 97.09743589743593], [1.69212036E12, 29.23522316043426], [1.69211994E12, 98.0], [1.69212024E12, 72.17712177121776], [1.69211934E12, 100.0], [1.69211964E12, 100.0], [1.69211922E12, 100.0], [1.69211952E12, 100.0], [1.69211892E12, 100.0], [1.69212042E12, 6.161290322580645], [1.6921188E12, 100.0], [1.69211982E12, 100.0], [1.69212012E12, 92.2321630804075], [1.6921197E12, 100.0], [1.69212E12, 98.0], [1.6921191E12, 100.0], [1.6921194E12, 100.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69212042E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 172.71428571428572, "minX": 1.0, "maxY": 18457.0, "series": [{"data": [[2.0, 172.71428571428572], [3.0, 189.15000000000003], [4.0, 252.45098039215682], [5.0, 488.0], [6.0, 470.0], [7.0, 377.3333333333333], [8.0, 1584.7241379310344], [9.0, 784.3333333333333], [10.0, 4179.117647058824], [11.0, 2523.2812500000005], [12.0, 4083.7647058823536], [13.0, 3005.0], [14.0, 479.0], [15.0, 702.4999999999999], [16.0, 861.2068965517241], [17.0, 437.25], [18.0, 755.4193548387096], [19.0, 1779.6250000000002], [20.0, 3191.869565217391], [21.0, 551.0], [22.0, 4260.392156862745], [23.0, 1056.8181818181818], [24.0, 1115.3076923076924], [25.0, 473.2], [26.0, 1332.1875], [27.0, 1939.888888888889], [28.0, 4917.333333333333], [29.0, 1330.4444444444446], [30.0, 2571.6666666666665], [31.0, 18457.0], [33.0, 533.0], [32.0, 1348.5], [34.0, 6693.22], [35.0, 2903.428571428571], [37.0, 2689.8400000000006], [36.0, 4909.779220779223], [39.0, 789.5348837209302], [38.0, 2078.285714285714], [41.0, 580.0], [40.0, 3549.0909090909104], [43.0, 2866.8709677419356], [42.0, 1556.6041666666667], [44.0, 1032.9310344827584], [45.0, 1827.0238095238103], [47.0, 2247.916666666667], [46.0, 4300.444444444445], [49.0, 8357.452380952382], [48.0, 2059.3103448275865], [51.0, 6908.251908396945], [50.0, 4730.108695652174], [53.0, 6496.25], [52.0, 6381.035087719297], [55.0, 13966.57142857143], [54.0, 2222.5714285714284], [57.0, 5834.416666666666], [56.0, 1140.0], [59.0, 5346.9333333333325], [58.0, 5861.7941176470595], [61.0, 427.5], [60.0, 2388.589285714284], [63.0, 1744.227272727273], [62.0, 5200.266666666666], [64.0, 1532.6363636363637], [67.0, 9818.833333333332], [66.0, 5249.909090909088], [65.0, 2096.6521739130435], [71.0, 2328.4130434782605], [70.0, 2735.5400000000004], [69.0, 9405.70588235294], [68.0, 4910.310344827586], [74.0, 4164.076923076923], [75.0, 4847.783464566928], [73.0, 7397.712499999999], [72.0, 6450.368181818185], [79.0, 10405.142857142857], [78.0, 3701.281249999999], [77.0, 1683.548387096774], [76.0, 561.0], [82.0, 4939.365217391307], [83.0, 4408.395833333334], [81.0, 9447.010752688175], [80.0, 5381.185185185185], [87.0, 6256.352517985608], [86.0, 9010.041666666668], [85.0, 9619.7], [84.0, 7472.363636363635], [91.0, 7048.972350230415], [90.0, 4124.98387096774], [89.0, 3117.142857142857], [88.0, 6471.830188679246], [92.0, 9044.349056603774], [95.0, 9259.594594594591], [94.0, 9017.120481927712], [93.0, 1340.8181818181818], [99.0, 8253.05769230769], [98.0, 8279.13336688476], [97.0, 5445.885542168679], [96.0, 6106.398148148145], [100.0, 8393.338611261304], [1.0, 2878.4545454545455]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[91.53050000000056, 7574.8268000000035]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 60.3, "minX": 1.69211874E12, "maxY": 220480.71666666667, "series": [{"data": [[1.69211898E12, 180522.96666666667], [1.69211928E12, 216046.58333333334], [1.6921203E12, 209698.21666666667], [1.69212018E12, 219822.0], [1.69211958E12, 113179.8], [1.69211988E12, 160650.2], [1.69211946E12, 146237.65], [1.69211976E12, 212651.5], [1.69211886E12, 199773.65], [1.69211916E12, 112419.31666666667], [1.69211874E12, 1722.3333333333333], [1.69211904E12, 179262.68333333332], [1.69212006E12, 184523.26666666666], [1.69212036E12, 212391.3], [1.69211994E12, 220480.71666666667], [1.69212024E12, 203212.0], [1.69211934E12, 179606.61666666667], [1.69211964E12, 160615.11666666667], [1.69211922E12, 174193.3], [1.69211952E12, 198868.96666666667], [1.69211892E12, 142624.63333333333], [1.69212042E12, 56098.933333333334], [1.6921188E12, 210019.63333333333], [1.69211982E12, 179317.31666666668], [1.69212012E12, 215346.33333333334], [1.6921197E12, 74862.86666666667], [1.69212E12, 105872.71666666666], [1.6921191E12, 206064.7], [1.6921194E12, 147273.06666666668]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69211898E12, 1972.4666666666667], [1.69211928E12, 2396.2], [1.6921203E12, 2307.0], [1.69212018E12, 2422.3], [1.69211958E12, 1259.9666666666667], [1.69211988E12, 1799.1333333333334], [1.69211946E12, 1629.1], [1.69211976E12, 2401.7], [1.69211886E12, 2211.7], [1.69211916E12, 1237.0], [1.69211874E12, 60.3], [1.69211904E12, 1998.2], [1.69212006E12, 2078.8], [1.69212036E12, 2330.133333333333], [1.69211994E12, 2430.9666666666667], [1.69212024E12, 2254.9666666666667], [1.69211934E12, 2021.1666666666667], [1.69211964E12, 1807.8], [1.69211922E12, 1946.2666666666667], [1.69211952E12, 2217.3333333333335], [1.69211892E12, 1540.0], [1.69212042E12, 614.2666666666667], [1.6921188E12, 2424.5333333333333], [1.69211982E12, 1995.3666666666666], [1.69212012E12, 2378.9666666666667], [1.6921197E12, 790.2333333333333], [1.69212E12, 1164.9666666666667], [1.6921191E12, 2312.4333333333334], [1.6921194E12, 1606.2666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69212042E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 262.2380952380952, "minX": 1.69211874E12, "maxY": 15100.958333333323, "series": [{"data": [[1.69211898E12, 8612.844621513948], [1.69211928E12, 7033.29451287794], [1.6921203E12, 4335.946987951804], [1.69212018E12, 6145.148526077092], [1.69211958E12, 13483.964774951073], [1.69211988E12, 10705.168571428563], [1.69211946E12, 9428.51923076923], [1.69211976E12, 8019.072706935114], [1.69211886E12, 6286.7892156862745], [1.69211916E12, 12968.379518072281], [1.69211874E12, 262.2380952380952], [1.69211904E12, 8621.234666666669], [1.69212006E12, 7872.244871794869], [1.69212036E12, 2832.6875753920376], [1.69211994E12, 6065.931428571438], [1.69212024E12, 5556.934809348094], [1.69211934E12, 7797.912117177091], [1.69211964E12, 7609.980683506688], [1.69211922E12, 7921.174863387975], [1.69211952E12, 8028.560624249705], [1.69211892E12, 9552.677257525087], [1.69212042E12, 1510.4976958525353], [1.6921188E12, 4638.052023121387], [1.69211982E12, 6923.2957937584815], [1.69212012E12, 7359.901472253686], [1.6921197E12, 15100.958333333323], [1.69212E12, 10202.03355704698], [1.6921191E12, 6893.519953051646], [1.6921194E12, 8692.69357495882]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69212042E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 261.3333333333333, "minX": 1.69211874E12, "maxY": 4323.160469667315, "series": [{"data": [[1.69211898E12, 2905.192563081011], [1.69211928E12, 2719.853303471445], [1.6921203E12, 2106.0915662650564], [1.69212018E12, 3167.3356009070267], [1.69211958E12, 4323.160469667315], [1.69211988E12, 3863.4671428571446], [1.69211946E12, 3429.1506410256425], [1.69211976E12, 3779.0279642058154], [1.69211886E12, 2547.821078431368], [1.69211916E12, 4118.407630522084], [1.69211874E12, 261.3333333333333], [1.69211904E12, 3884.965333333334], [1.69212006E12, 3117.215384615384], [1.69212036E12, 1276.885404101329], [1.69211994E12, 3810.072000000001], [1.69212024E12, 3196.7958179581797], [1.69211934E12, 3628.2809587217043], [1.69211964E12, 3390.674591381871], [1.69211922E12, 3095.508196721315], [1.69211952E12, 3302.314525810327], [1.69211892E12, 2913.0769230769256], [1.69212042E12, 396.6912442396312], [1.6921188E12, 2966.206936416184], [1.69211982E12, 3131.162822252376], [1.69212012E12, 3272.4405436013594], [1.6921197E12, 3486.3065476190477], [1.69212E12, 4111.657718120805], [1.6921191E12, 3261.809859154926], [1.6921194E12, 3497.4019769357524]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69212042E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 16.093997734994332, "minX": 1.69211874E12, "maxY": 37.95238095238095, "series": [{"data": [[1.69211898E12, 16.863213811421005], [1.69211928E12, 21.77491601343783], [1.6921203E12, 16.807228915662648], [1.69212018E12, 18.55895691609977], [1.69211958E12, 24.01174168297455], [1.69211988E12, 19.558571428571437], [1.69211946E12, 27.102564102564116], [1.69211976E12, 19.11633109619689], [1.69211886E12, 16.448529411764678], [1.69211916E12, 16.728915662650603], [1.69211874E12, 37.95238095238095], [1.69211904E12, 20.822666666666674], [1.69212006E12, 17.58333333333335], [1.69212036E12, 16.83232810615198], [1.69211994E12, 16.472000000000016], [1.69212024E12, 17.61623616236162], [1.69211934E12, 31.93741677762982], [1.69211964E12, 18.725111441307558], [1.69211922E12, 17.266393442622974], [1.69211952E12, 25.90636254501801], [1.69211892E12, 17.093645484949832], [1.69212042E12, 18.331797235023057], [1.6921188E12, 17.196531791907486], [1.69211982E12, 20.059701492537314], [1.69212012E12, 16.093997734994332], [1.6921197E12, 21.449404761904766], [1.69212E12, 25.13870246085011], [1.6921191E12, 17.248826291079826], [1.6921194E12, 25.306425041186145]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69212042E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 63.0, "minX": 1.69211874E12, "maxY": 58903.0, "series": [{"data": [[1.69211898E12, 38550.0], [1.69211928E12, 45396.0], [1.6921203E12, 45436.0], [1.69212018E12, 38991.0], [1.69211958E12, 58692.0], [1.69211988E12, 58163.0], [1.69211946E12, 37875.0], [1.69211976E12, 45432.0], [1.69211886E12, 33029.0], [1.69211916E12, 43102.0], [1.69211874E12, 580.0], [1.69211904E12, 58723.0], [1.69212006E12, 58130.0], [1.69212036E12, 44826.0], [1.69211994E12, 39118.0], [1.69212024E12, 35262.0], [1.69211934E12, 58170.0], [1.69211964E12, 58796.0], [1.69211922E12, 38654.0], [1.69211952E12, 38632.0], [1.69211892E12, 57900.0], [1.69212042E12, 1691.0], [1.6921188E12, 42932.0], [1.69211982E12, 58903.0], [1.69212012E12, 45498.0], [1.6921197E12, 56176.0], [1.69212E12, 44726.0], [1.6921191E12, 56332.0], [1.6921194E12, 57919.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69211898E12, 7783.6], [1.69211928E12, 7708.400000000001], [1.6921203E12, 3895.7999999999993], [1.69212018E12, 7968.7], [1.69211958E12, 15931.199999999999], [1.69211988E12, 15799.5], [1.69211946E12, 9510.20000000006], [1.69211976E12, 12951.400000000067], [1.69211886E12, 7623.200000000003], [1.69211916E12, 16215.0], [1.69211874E12, 474.2], [1.69211904E12, 15371.000000000011], [1.69212006E12, 7688.0], [1.69212036E12, 1875.2], [1.69211994E12, 14407.20000000001], [1.69212024E12, 8328.900000000003], [1.69211934E12, 14100.800000000148], [1.69211964E12, 11273.800000000008], [1.69211922E12, 8059.599999999999], [1.69211952E12, 8137.0], [1.69211892E12, 8220.5], [1.69212042E12, 705.5999999999999], [1.6921188E12, 7856.8], [1.69211982E12, 7867.000000000001], [1.69212012E12, 8115.399999999999], [1.6921197E12, 11175.0], [1.69212E12, 15970.5], [1.6921191E12, 8036.0], [1.6921194E12, 8155.399999999999]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69211898E12, 33037.15999999999], [1.69211928E12, 32280.319999999996], [1.6921203E12, 32421.620000000003], [1.69212018E12, 32154.31], [1.69211958E12, 50014.40000000005], [1.69211988E12, 32578.75], [1.69211946E12, 32502.460000000003], [1.69211976E12, 32977.399999999994], [1.69211886E12, 32469.35999999998], [1.69211916E12, 33702.2], [1.69211874E12, 580.0], [1.69211904E12, 35330.51999999999], [1.69212006E12, 32258.37], [1.69212036E12, 15961.56], [1.69211994E12, 32627.27999999998], [1.69212024E12, 32611.269999999993], [1.69211934E12, 32311.56], [1.69211964E12, 34887.36000000006], [1.69211922E12, 32134.68], [1.69211952E12, 33044.69999999998], [1.69211892E12, 33836.39999999999], [1.69212042E12, 1426.6599999999996], [1.6921188E12, 32060.520000000004], [1.69211982E12, 35501.210000000174], [1.69212012E12, 32396.9], [1.6921197E12, 55195.5], [1.69212E12, 32315.95], [1.6921191E12, 32708.13], [1.6921194E12, 41876.17999999919]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69211898E12, 15975.199999999997], [1.69211928E12, 15775.4], [1.6921203E12, 8030.599999999993], [1.69212018E12, 16143.199999999999], [1.69211958E12, 28262.799999999974], [1.69211988E12, 31704.0], [1.69211946E12, 19373.39999999995], [1.69211976E12, 17862.499999999927], [1.69211886E12, 15773.199999999997], [1.69211916E12, 29313.5], [1.69211874E12, 569.7999999999998], [1.69211904E12, 17699.89999999992], [1.69212006E12, 15982.399999999996], [1.69212036E12, 3813.399999999998], [1.69211994E12, 16939.399999999998], [1.69212024E12, 16205.749999999998], [1.69211934E12, 16495.6], [1.69211964E12, 17143.800000000003], [1.69211922E12, 16001.999999999998], [1.69211952E12, 16263.5], [1.69211892E12, 16032.0], [1.69212042E12, 807.0999999999999], [1.6921188E12, 16029.9], [1.69211982E12, 16047.650000000003], [1.69212012E12, 16309.3], [1.6921197E12, 27573.75], [1.69212E12, 17175.5], [1.6921191E12, 16147.4], [1.6921194E12, 21890.600000000017]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.69211898E12, 74.0], [1.69211928E12, 82.0], [1.6921203E12, 97.0], [1.69212018E12, 75.0], [1.69211958E12, 112.0], [1.69211988E12, 94.0], [1.69211946E12, 106.0], [1.69211976E12, 85.0], [1.69211886E12, 96.0], [1.69211916E12, 83.0], [1.69211874E12, 159.0], [1.69211904E12, 111.0], [1.69212006E12, 71.0], [1.69212036E12, 63.0], [1.69211994E12, 83.0], [1.69212024E12, 68.0], [1.69211934E12, 85.0], [1.69211964E12, 90.0], [1.69211922E12, 72.0], [1.69211952E12, 87.0], [1.69211892E12, 79.0], [1.69212042E12, 70.0], [1.6921188E12, 85.0], [1.69211982E12, 98.0], [1.69212012E12, 72.0], [1.6921197E12, 108.0], [1.69212E12, 110.0], [1.6921191E12, 91.0], [1.6921194E12, 126.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69211898E12, 781.0], [1.69211928E12, 805.0], [1.6921203E12, 646.0], [1.69212018E12, 1187.5], [1.69211958E12, 1342.0], [1.69211988E12, 815.0], [1.69211946E12, 774.0], [1.69211976E12, 1275.0], [1.69211886E12, 681.0], [1.69211916E12, 1030.0], [1.69211874E12, 218.0], [1.69211904E12, 992.0], [1.69212006E12, 756.0], [1.69212036E12, 554.5], [1.69211994E12, 936.0], [1.69212024E12, 682.5], [1.69211934E12, 1054.0], [1.69211964E12, 703.0], [1.69211922E12, 848.0], [1.69211952E12, 1324.0], [1.69211892E12, 790.0], [1.69212042E12, 368.0], [1.6921188E12, 731.0], [1.69211982E12, 850.0], [1.69212012E12, 839.0], [1.6921197E12, 775.5], [1.69212E12, 1320.5], [1.6921191E12, 819.5], [1.6921194E12, 825.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69212042E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 319.0, "minX": 1.0, "maxY": 65370.0, "series": [{"data": [[32.0, 319.0], [2.0, 6244.0], [36.0, 843.5], [3.0, 875.0], [4.0, 8696.5], [5.0, 1116.0], [6.0, 769.0], [7.0, 963.5], [8.0, 1851.0], [9.0, 1194.5], [10.0, 1413.5], [11.0, 995.0], [12.0, 853.0], [13.0, 764.5], [14.0, 721.5], [15.0, 713.5], [16.0, 723.0], [1.0, 5037.0], [17.0, 712.5], [18.0, 760.0], [19.0, 714.0], [20.0, 722.5], [21.0, 752.5], [22.0, 1020.0], [23.0, 1308.0], [24.0, 1382.5], [25.0, 1550.0], [26.0, 1235.0], [27.0, 1439.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 65063.0], [36.0, 60248.5], [3.0, 65062.0], [4.0, 65036.5], [5.0, 65049.0], [6.0, 60538.0], [7.0, 65041.5], [8.0, 65070.0], [9.0, 61769.0], [10.0, 63653.5], [11.0, 63726.5], [12.0, 60858.0], [13.0, 61481.0], [14.0, 61087.5], [15.0, 61608.0], [16.0, 61386.0], [1.0, 65066.0], [17.0, 61724.5], [18.0, 61363.0], [19.0, 61111.0], [20.0, 61423.5], [21.0, 61579.5], [22.0, 60636.5], [23.0, 60388.5], [24.0, 61423.5], [25.0, 65370.0], [26.0, 60157.0], [27.0, 60270.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 36.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 8696.5, "series": [{"data": [[32.0, 318.5], [2.0, 6244.0], [36.0, 843.5], [3.0, 875.0], [4.0, 8696.5], [5.0, 1116.0], [6.0, 769.0], [7.0, 963.0], [8.0, 1851.0], [9.0, 1194.5], [10.0, 1413.5], [11.0, 995.0], [12.0, 853.0], [13.0, 764.5], [14.0, 721.5], [15.0, 713.5], [16.0, 723.0], [1.0, 5037.0], [17.0, 712.5], [18.0, 760.0], [19.0, 714.0], [20.0, 722.5], [21.0, 752.5], [22.0, 1020.0], [23.0, 1308.0], [24.0, 1382.5], [25.0, 1550.0], [26.0, 1235.0], [27.0, 1439.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 0.0], [36.0, 0.0], [3.0, 0.0], [4.0, 0.0], [5.0, 0.0], [6.0, 0.0], [7.0, 0.0], [8.0, 0.0], [9.0, 0.0], [10.0, 0.0], [11.0, 0.0], [12.0, 0.0], [13.0, 0.0], [14.0, 0.0], [15.0, 0.0], [16.0, 0.0], [1.0, 0.0], [17.0, 0.0], [18.0, 0.0], [19.0, 0.0], [20.0, 0.0], [21.0, 0.0], [22.0, 0.0], [23.0, 0.0], [24.0, 0.0], [25.0, 0.0], [26.0, 0.0], [27.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 36.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.9, "minX": 1.69211874E12, "maxY": 14.9, "series": [{"data": [[1.69211898E12, 12.55], [1.69211928E12, 14.883333333333333], [1.6921203E12, 13.433333333333334], [1.69212018E12, 14.45], [1.69211958E12, 8.516666666666667], [1.69211988E12, 11.633333333333333], [1.69211946E12, 10.4], [1.69211976E12, 14.9], [1.69211886E12, 13.6], [1.69211916E12, 8.3], [1.69211874E12, 1.9], [1.69211904E12, 12.5], [1.69212006E12, 12.966666666666667], [1.69212036E12, 13.3], [1.69211994E12, 14.583333333333334], [1.69212024E12, 13.4], [1.69211934E12, 12.516666666666667], [1.69211964E12, 11.216666666666667], [1.69211922E12, 12.2], [1.69211952E12, 13.883333333333333], [1.69211892E12, 9.966666666666667], [1.69212042E12, 3.433333333333333], [1.6921188E12, 14.533333333333333], [1.69211982E12, 12.283333333333333], [1.69212012E12, 14.616666666666667], [1.6921197E12, 5.6], [1.69212E12, 7.45], [1.6921191E12, 14.2], [1.6921194E12, 10.116666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69212042E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.69211874E12, "maxY": 14.05, "series": [{"data": [[1.69211898E12, 11.383333333333333], [1.69211928E12, 13.85], [1.6921203E12, 13.333333333333334], [1.69212018E12, 14.0], [1.69211958E12, 7.283333333333333], [1.69211988E12, 10.4], [1.69211946E12, 9.416666666666666], [1.69211976E12, 13.883333333333333], [1.69211886E12, 12.783333333333333], [1.69211916E12, 7.15], [1.69211874E12, 0.35], [1.69211904E12, 11.55], [1.69212006E12, 12.0], [1.69212036E12, 13.466666666666667], [1.69211994E12, 14.05], [1.69212024E12, 13.033333333333333], [1.69211934E12, 11.683333333333334], [1.69211964E12, 10.45], [1.69211922E12, 11.25], [1.69211952E12, 12.816666666666666], [1.69211892E12, 8.9], [1.69212042E12, 3.55], [1.6921188E12, 14.016666666666667], [1.69211982E12, 11.533333333333333], [1.69212012E12, 13.75], [1.6921197E12, 4.566666666666666], [1.69212E12, 6.733333333333333], [1.6921191E12, 13.366666666666667], [1.6921194E12, 9.283333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.69211898E12, 0.016666666666666666], [1.69212006E12, 0.016666666666666666]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.69211898E12, 1.15], [1.69211928E12, 1.0333333333333334], [1.6921203E12, 0.5], [1.69212018E12, 0.7], [1.69211958E12, 1.2333333333333334], [1.69211988E12, 1.2666666666666666], [1.69211946E12, 0.9833333333333333], [1.69211976E12, 1.0166666666666666], [1.69211886E12, 0.8166666666666667], [1.69211916E12, 1.15], [1.69211904E12, 0.95], [1.69212006E12, 0.9833333333333333], [1.69212036E12, 0.35], [1.69211994E12, 0.5333333333333333], [1.69212024E12, 0.5166666666666667], [1.69211934E12, 0.8333333333333334], [1.69211964E12, 0.7666666666666667], [1.69211922E12, 0.95], [1.69211952E12, 1.0666666666666667], [1.69211892E12, 1.0666666666666667], [1.69212042E12, 0.06666666666666667], [1.6921188E12, 0.4], [1.69211982E12, 0.75], [1.69212012E12, 0.9666666666666667], [1.6921197E12, 1.0333333333333334], [1.69212E12, 0.7166666666666667], [1.6921191E12, 0.8333333333333334], [1.6921194E12, 0.8333333333333334]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69212042E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.69211874E12, "maxY": 14.05, "series": [{"data": [[1.69211898E12, 11.383333333333333], [1.69211928E12, 13.85], [1.6921203E12, 13.333333333333334], [1.69212018E12, 14.0], [1.69211958E12, 7.283333333333333], [1.69211988E12, 10.4], [1.69211946E12, 9.416666666666666], [1.69211976E12, 13.883333333333333], [1.69211886E12, 12.783333333333333], [1.69211916E12, 7.15], [1.69211874E12, 0.35], [1.69211904E12, 11.55], [1.69212006E12, 12.0], [1.69212036E12, 13.466666666666667], [1.69211994E12, 14.05], [1.69212024E12, 13.033333333333333], [1.69211934E12, 11.683333333333334], [1.69211964E12, 10.45], [1.69211922E12, 11.25], [1.69211952E12, 12.816666666666666], [1.69211892E12, 8.9], [1.69212042E12, 3.55], [1.6921188E12, 14.016666666666667], [1.69211982E12, 11.533333333333333], [1.69212012E12, 13.75], [1.6921197E12, 4.566666666666666], [1.69212E12, 6.733333333333333], [1.6921191E12, 13.366666666666667], [1.6921194E12, 9.283333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.69211898E12, 1.1666666666666667], [1.69211928E12, 1.0333333333333334], [1.6921203E12, 0.5], [1.69212018E12, 0.7], [1.69211958E12, 1.2333333333333334], [1.69211988E12, 1.2666666666666666], [1.69211946E12, 0.9833333333333333], [1.69211976E12, 1.0166666666666666], [1.69211886E12, 0.8166666666666667], [1.69211916E12, 1.15], [1.69211904E12, 0.95], [1.69212006E12, 1.0], [1.69212036E12, 0.35], [1.69211994E12, 0.5333333333333333], [1.69212024E12, 0.5166666666666667], [1.69211934E12, 0.8333333333333334], [1.69211964E12, 0.7666666666666667], [1.69211922E12, 0.95], [1.69211952E12, 1.0666666666666667], [1.69211892E12, 1.0666666666666667], [1.69212042E12, 0.06666666666666667], [1.6921188E12, 0.4], [1.69211982E12, 0.75], [1.69212012E12, 0.9666666666666667], [1.6921197E12, 1.0333333333333334], [1.69212E12, 0.7166666666666667], [1.6921191E12, 0.8333333333333334], [1.6921194E12, 0.8333333333333334]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69212042E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.69211874E12, "maxY": 14.05, "series": [{"data": [[1.69211898E12, 11.383333333333333], [1.69211928E12, 13.85], [1.6921203E12, 13.333333333333334], [1.69212018E12, 14.0], [1.69211958E12, 7.283333333333333], [1.69211988E12, 10.4], [1.69211946E12, 9.416666666666666], [1.69211976E12, 13.883333333333333], [1.69211886E12, 12.783333333333333], [1.69211916E12, 7.15], [1.69211874E12, 0.35], [1.69211904E12, 11.55], [1.69212006E12, 12.0], [1.69212036E12, 13.466666666666667], [1.69211994E12, 14.05], [1.69212024E12, 13.033333333333333], [1.69211934E12, 11.683333333333334], [1.69211964E12, 10.45], [1.69211922E12, 11.25], [1.69211952E12, 12.816666666666666], [1.69211892E12, 8.9], [1.69212042E12, 3.55], [1.6921188E12, 14.016666666666667], [1.69211982E12, 11.533333333333333], [1.69212012E12, 13.75], [1.6921197E12, 4.566666666666666], [1.69212E12, 6.733333333333333], [1.6921191E12, 13.366666666666667], [1.6921194E12, 9.283333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.69211898E12, 1.1666666666666667], [1.69211928E12, 1.0333333333333334], [1.6921203E12, 0.5], [1.69212018E12, 0.7], [1.69211958E12, 1.2333333333333334], [1.69211988E12, 1.2666666666666666], [1.69211946E12, 0.9833333333333333], [1.69211976E12, 1.0166666666666666], [1.69211886E12, 0.8166666666666667], [1.69211916E12, 1.15], [1.69211904E12, 0.95], [1.69212006E12, 1.0], [1.69212036E12, 0.35], [1.69211994E12, 0.5333333333333333], [1.69212024E12, 0.5166666666666667], [1.69211934E12, 0.8333333333333334], [1.69211964E12, 0.7666666666666667], [1.69211922E12, 0.95], [1.69211952E12, 1.0666666666666667], [1.69211892E12, 1.0666666666666667], [1.69212042E12, 0.06666666666666667], [1.6921188E12, 0.4], [1.69211982E12, 0.75], [1.69212012E12, 0.9666666666666667], [1.6921197E12, 1.0333333333333334], [1.69212E12, 0.7166666666666667], [1.6921191E12, 0.8333333333333334], [1.6921194E12, 0.8333333333333334]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69212042E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

