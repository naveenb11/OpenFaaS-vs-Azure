/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 16.0, "minX": 0.0, "maxY": 69347.0, "series": [{"data": [[0.0, 16.0], [0.1, 17.0], [0.2, 19.0], [0.3, 19.0], [0.4, 20.0], [0.5, 20.0], [0.6, 21.0], [0.7, 22.0], [0.8, 22.0], [0.9, 22.0], [1.0, 23.0], [1.1, 23.0], [1.2, 24.0], [1.3, 25.0], [1.4, 25.0], [1.5, 26.0], [1.6, 27.0], [1.7, 28.0], [1.8, 28.0], [1.9, 29.0], [2.0, 31.0], [2.1, 32.0], [2.2, 33.0], [2.3, 34.0], [2.4, 35.0], [2.5, 37.0], [2.6, 38.0], [2.7, 40.0], [2.8, 41.0], [2.9, 42.0], [3.0, 44.0], [3.1, 46.0], [3.2, 48.0], [3.3, 50.0], [3.4, 51.0], [3.5, 52.0], [3.6, 53.0], [3.7, 55.0], [3.8, 56.0], [3.9, 57.0], [4.0, 58.0], [4.1, 59.0], [4.2, 60.0], [4.3, 61.0], [4.4, 62.0], [4.5, 64.0], [4.6, 65.0], [4.7, 66.0], [4.8, 67.0], [4.9, 68.0], [5.0, 70.0], [5.1, 71.0], [5.2, 72.0], [5.3, 74.0], [5.4, 75.0], [5.5, 77.0], [5.6, 78.0], [5.7, 80.0], [5.8, 82.0], [5.9, 83.0], [6.0, 85.0], [6.1, 86.0], [6.2, 87.0], [6.3, 88.0], [6.4, 89.0], [6.5, 90.0], [6.6, 91.0], [6.7, 92.0], [6.8, 93.0], [6.9, 95.0], [7.0, 96.0], [7.1, 98.0], [7.2, 99.0], [7.3, 101.0], [7.4, 102.0], [7.5, 103.0], [7.6, 104.0], [7.7, 106.0], [7.8, 107.0], [7.9, 108.0], [8.0, 109.0], [8.1, 110.0], [8.2, 111.0], [8.3, 113.0], [8.4, 114.0], [8.5, 115.0], [8.6, 116.0], [8.7, 118.0], [8.8, 119.0], [8.9, 120.0], [9.0, 121.0], [9.1, 123.0], [9.2, 124.0], [9.3, 126.0], [9.4, 127.0], [9.5, 128.0], [9.6, 129.0], [9.7, 131.0], [9.8, 132.0], [9.9, 133.0], [10.0, 134.0], [10.1, 136.0], [10.2, 137.0], [10.3, 138.0], [10.4, 140.0], [10.5, 141.0], [10.6, 142.0], [10.7, 144.0], [10.8, 145.0], [10.9, 146.0], [11.0, 147.0], [11.1, 148.0], [11.2, 149.0], [11.3, 150.0], [11.4, 150.0], [11.5, 152.0], [11.6, 152.0], [11.7, 153.0], [11.8, 154.0], [11.9, 156.0], [12.0, 157.0], [12.1, 157.0], [12.2, 158.0], [12.3, 159.0], [12.4, 160.0], [12.5, 161.0], [12.6, 162.0], [12.7, 163.0], [12.8, 164.0], [12.9, 165.0], [13.0, 165.0], [13.1, 166.0], [13.2, 167.0], [13.3, 168.0], [13.4, 169.0], [13.5, 169.0], [13.6, 170.0], [13.7, 171.0], [13.8, 173.0], [13.9, 174.0], [14.0, 174.0], [14.1, 175.0], [14.2, 176.0], [14.3, 177.0], [14.4, 178.0], [14.5, 178.0], [14.6, 179.0], [14.7, 180.0], [14.8, 181.0], [14.9, 182.0], [15.0, 182.0], [15.1, 183.0], [15.2, 184.0], [15.3, 185.0], [15.4, 186.0], [15.5, 187.0], [15.6, 188.0], [15.7, 189.0], [15.8, 189.0], [15.9, 190.0], [16.0, 191.0], [16.1, 192.0], [16.2, 193.0], [16.3, 194.0], [16.4, 194.0], [16.5, 195.0], [16.6, 196.0], [16.7, 197.0], [16.8, 198.0], [16.9, 199.0], [17.0, 199.0], [17.1, 200.0], [17.2, 201.0], [17.3, 202.0], [17.4, 203.0], [17.5, 204.0], [17.6, 205.0], [17.7, 206.0], [17.8, 206.0], [17.9, 207.0], [18.0, 208.0], [18.1, 209.0], [18.2, 210.0], [18.3, 211.0], [18.4, 212.0], [18.5, 213.0], [18.6, 213.0], [18.7, 215.0], [18.8, 216.0], [18.9, 217.0], [19.0, 217.0], [19.1, 218.0], [19.2, 219.0], [19.3, 220.0], [19.4, 220.0], [19.5, 221.0], [19.6, 222.0], [19.7, 223.0], [19.8, 224.0], [19.9, 224.0], [20.0, 225.0], [20.1, 226.0], [20.2, 227.0], [20.3, 228.0], [20.4, 229.0], [20.5, 230.0], [20.6, 231.0], [20.7, 232.0], [20.8, 233.0], [20.9, 234.0], [21.0, 235.0], [21.1, 236.0], [21.2, 237.0], [21.3, 237.0], [21.4, 238.0], [21.5, 239.0], [21.6, 240.0], [21.7, 241.0], [21.8, 242.0], [21.9, 243.0], [22.0, 244.0], [22.1, 245.0], [22.2, 246.0], [22.3, 247.0], [22.4, 247.0], [22.5, 249.0], [22.6, 250.0], [22.7, 251.0], [22.8, 252.0], [22.9, 253.0], [23.0, 254.0], [23.1, 255.0], [23.2, 256.0], [23.3, 257.0], [23.4, 258.0], [23.5, 259.0], [23.6, 260.0], [23.7, 261.0], [23.8, 262.0], [23.9, 263.0], [24.0, 264.0], [24.1, 265.0], [24.2, 266.0], [24.3, 267.0], [24.4, 268.0], [24.5, 270.0], [24.6, 271.0], [24.7, 272.0], [24.8, 273.0], [24.9, 274.0], [25.0, 275.0], [25.1, 276.0], [25.2, 277.0], [25.3, 278.0], [25.4, 280.0], [25.5, 281.0], [25.6, 282.0], [25.7, 283.0], [25.8, 285.0], [25.9, 286.0], [26.0, 287.0], [26.1, 288.0], [26.2, 289.0], [26.3, 291.0], [26.4, 292.0], [26.5, 294.0], [26.6, 295.0], [26.7, 296.0], [26.8, 298.0], [26.9, 299.0], [27.0, 301.0], [27.1, 302.0], [27.2, 304.0], [27.3, 305.0], [27.4, 306.0], [27.5, 307.0], [27.6, 309.0], [27.7, 310.0], [27.8, 311.0], [27.9, 313.0], [28.0, 314.0], [28.1, 316.0], [28.2, 317.0], [28.3, 318.0], [28.4, 320.0], [28.5, 322.0], [28.6, 323.0], [28.7, 325.0], [28.8, 327.0], [28.9, 329.0], [29.0, 330.0], [29.1, 331.0], [29.2, 333.0], [29.3, 334.0], [29.4, 337.0], [29.5, 338.0], [29.6, 341.0], [29.7, 342.0], [29.8, 343.0], [29.9, 345.0], [30.0, 346.0], [30.1, 348.0], [30.2, 350.0], [30.3, 351.0], [30.4, 354.0], [30.5, 356.0], [30.6, 358.0], [30.7, 360.0], [30.8, 362.0], [30.9, 364.0], [31.0, 365.0], [31.1, 367.0], [31.2, 370.0], [31.3, 371.0], [31.4, 373.0], [31.5, 376.0], [31.6, 378.0], [31.7, 379.0], [31.8, 381.0], [31.9, 383.0], [32.0, 385.0], [32.1, 386.0], [32.2, 389.0], [32.3, 391.0], [32.4, 393.0], [32.5, 395.0], [32.6, 398.0], [32.7, 401.0], [32.8, 403.0], [32.9, 406.0], [33.0, 409.0], [33.1, 412.0], [33.2, 415.0], [33.3, 418.0], [33.4, 421.0], [33.5, 425.0], [33.6, 429.0], [33.7, 432.0], [33.8, 435.0], [33.9, 438.0], [34.0, 441.0], [34.1, 444.0], [34.2, 446.0], [34.3, 450.0], [34.4, 453.0], [34.5, 458.0], [34.6, 462.0], [34.7, 470.0], [34.8, 474.0], [34.9, 480.0], [35.0, 487.0], [35.1, 491.0], [35.2, 497.0], [35.3, 507.0], [35.4, 513.0], [35.5, 521.0], [35.6, 527.0], [35.7, 535.0], [35.8, 545.0], [35.9, 553.0], [36.0, 560.0], [36.1, 567.0], [36.2, 574.0], [36.3, 582.0], [36.4, 589.0], [36.5, 595.0], [36.6, 604.0], [36.7, 613.0], [36.8, 622.0], [36.9, 638.0], [37.0, 649.0], [37.1, 663.0], [37.2, 676.0], [37.3, 693.0], [37.4, 708.0], [37.5, 723.0], [37.6, 736.0], [37.7, 745.0], [37.8, 760.0], [37.9, 773.0], [38.0, 790.0], [38.1, 803.0], [38.2, 817.0], [38.3, 833.0], [38.4, 849.0], [38.5, 872.0], [38.6, 885.0], [38.7, 895.0], [38.8, 908.0], [38.9, 921.0], [39.0, 944.0], [39.1, 958.0], [39.2, 970.0], [39.3, 989.0], [39.4, 1009.0], [39.5, 1028.0], [39.6, 1046.0], [39.7, 1070.0], [39.8, 1084.0], [39.9, 1095.0], [40.0, 1106.0], [40.1, 1117.0], [40.2, 1125.0], [40.3, 1133.0], [40.4, 1140.0], [40.5, 1154.0], [40.6, 1168.0], [40.7, 1174.0], [40.8, 1181.0], [40.9, 1186.0], [41.0, 1192.0], [41.1, 1196.0], [41.2, 1201.0], [41.3, 1206.0], [41.4, 1209.0], [41.5, 1214.0], [41.6, 1221.0], [41.7, 1225.0], [41.8, 1230.0], [41.9, 1232.0], [42.0, 1237.0], [42.1, 1241.0], [42.2, 1244.0], [42.3, 1248.0], [42.4, 1252.0], [42.5, 1256.0], [42.6, 1262.0], [42.7, 1267.0], [42.8, 1271.0], [42.9, 1273.0], [43.0, 1276.0], [43.1, 1279.0], [43.2, 1282.0], [43.3, 1285.0], [43.4, 1288.0], [43.5, 1292.0], [43.6, 1297.0], [43.7, 1300.0], [43.8, 1302.0], [43.9, 1305.0], [44.0, 1307.0], [44.1, 1310.0], [44.2, 1312.0], [44.3, 1315.0], [44.4, 1318.0], [44.5, 1321.0], [44.6, 1324.0], [44.7, 1326.0], [44.8, 1329.0], [44.9, 1332.0], [45.0, 1336.0], [45.1, 1340.0], [45.2, 1344.0], [45.3, 1348.0], [45.4, 1350.0], [45.5, 1353.0], [45.6, 1358.0], [45.7, 1362.0], [45.8, 1368.0], [45.9, 1372.0], [46.0, 1374.0], [46.1, 1377.0], [46.2, 1379.0], [46.3, 1383.0], [46.4, 1387.0], [46.5, 1389.0], [46.6, 1393.0], [46.7, 1397.0], [46.8, 1400.0], [46.9, 1403.0], [47.0, 1406.0], [47.1, 1411.0], [47.2, 1414.0], [47.3, 1422.0], [47.4, 1428.0], [47.5, 1434.0], [47.6, 1439.0], [47.7, 1443.0], [47.8, 1447.0], [47.9, 1451.0], [48.0, 1457.0], [48.1, 1461.0], [48.2, 1467.0], [48.3, 1472.0], [48.4, 1477.0], [48.5, 1482.0], [48.6, 1485.0], [48.7, 1492.0], [48.8, 1498.0], [48.9, 1502.0], [49.0, 1506.0], [49.1, 1510.0], [49.2, 1515.0], [49.3, 1520.0], [49.4, 1526.0], [49.5, 1530.0], [49.6, 1535.0], [49.7, 1540.0], [49.8, 1544.0], [49.9, 1550.0], [50.0, 1555.0], [50.1, 1562.0], [50.2, 1567.0], [50.3, 1572.0], [50.4, 1579.0], [50.5, 1584.0], [50.6, 1589.0], [50.7, 1593.0], [50.8, 1600.0], [50.9, 1605.0], [51.0, 1610.0], [51.1, 1614.0], [51.2, 1619.0], [51.3, 1625.0], [51.4, 1630.0], [51.5, 1636.0], [51.6, 1640.0], [51.7, 1645.0], [51.8, 1651.0], [51.9, 1657.0], [52.0, 1665.0], [52.1, 1671.0], [52.2, 1677.0], [52.3, 1685.0], [52.4, 1690.0], [52.5, 1698.0], [52.6, 1703.0], [52.7, 1710.0], [52.8, 1717.0], [52.9, 1722.0], [53.0, 1729.0], [53.1, 1737.0], [53.2, 1746.0], [53.3, 1755.0], [53.4, 1760.0], [53.5, 1767.0], [53.6, 1776.0], [53.7, 1784.0], [53.8, 1791.0], [53.9, 1799.0], [54.0, 1805.0], [54.1, 1813.0], [54.2, 1817.0], [54.3, 1821.0], [54.4, 1828.0], [54.5, 1842.0], [54.6, 1851.0], [54.7, 1864.0], [54.8, 1876.0], [54.9, 1892.0], [55.0, 1902.0], [55.1, 1913.0], [55.2, 1926.0], [55.3, 1934.0], [55.4, 1945.0], [55.5, 1961.0], [55.6, 1980.0], [55.7, 1996.0], [55.8, 2012.0], [55.9, 2025.0], [56.0, 2035.0], [56.1, 2050.0], [56.2, 2068.0], [56.3, 2087.0], [56.4, 2096.0], [56.5, 2109.0], [56.6, 2117.0], [56.7, 2132.0], [56.8, 2149.0], [56.9, 2164.0], [57.0, 2175.0], [57.1, 2186.0], [57.2, 2208.0], [57.3, 2220.0], [57.4, 2231.0], [57.5, 2242.0], [57.6, 2271.0], [57.7, 2290.0], [57.8, 2302.0], [57.9, 2323.0], [58.0, 2345.0], [58.1, 2360.0], [58.2, 2379.0], [58.3, 2400.0], [58.4, 2417.0], [58.5, 2436.0], [58.6, 2448.0], [58.7, 2475.0], [58.8, 2494.0], [58.9, 2515.0], [59.0, 2533.0], [59.1, 2561.0], [59.2, 2582.0], [59.3, 2609.0], [59.4, 2626.0], [59.5, 2671.0], [59.6, 2706.0], [59.7, 2737.0], [59.8, 2790.0], [59.9, 2829.0], [60.0, 2858.0], [60.1, 2891.0], [60.2, 2929.0], [60.3, 2962.0], [60.4, 2983.0], [60.5, 3014.0], [60.6, 3036.0], [60.7, 3084.0], [60.8, 3123.0], [60.9, 3159.0], [61.0, 3177.0], [61.1, 3191.0], [61.2, 3201.0], [61.3, 3211.0], [61.4, 3219.0], [61.5, 3225.0], [61.6, 3232.0], [61.7, 3240.0], [61.8, 3250.0], [61.9, 3261.0], [62.0, 3269.0], [62.1, 3277.0], [62.2, 3285.0], [62.3, 3290.0], [62.4, 3295.0], [62.5, 3302.0], [62.6, 3311.0], [62.7, 3325.0], [62.8, 3332.0], [62.9, 3338.0], [63.0, 3352.0], [63.1, 3359.0], [63.2, 3370.0], [63.3, 3379.0], [63.4, 3388.0], [63.5, 3397.0], [63.6, 3409.0], [63.7, 3424.0], [63.8, 3439.0], [63.9, 3451.0], [64.0, 3468.0], [64.1, 3479.0], [64.2, 3494.0], [64.3, 3505.0], [64.4, 3518.0], [64.5, 3530.0], [64.6, 3537.0], [64.7, 3547.0], [64.8, 3563.0], [64.9, 3576.0], [65.0, 3589.0], [65.1, 3599.0], [65.2, 3607.0], [65.3, 3621.0], [65.4, 3633.0], [65.5, 3645.0], [65.6, 3654.0], [65.7, 3662.0], [65.8, 3675.0], [65.9, 3682.0], [66.0, 3694.0], [66.1, 3701.0], [66.2, 3706.0], [66.3, 3716.0], [66.4, 3725.0], [66.5, 3738.0], [66.6, 3748.0], [66.7, 3759.0], [66.8, 3766.0], [66.9, 3772.0], [67.0, 3779.0], [67.1, 3790.0], [67.2, 3801.0], [67.3, 3809.0], [67.4, 3817.0], [67.5, 3824.0], [67.6, 3831.0], [67.7, 3838.0], [67.8, 3849.0], [67.9, 3858.0], [68.0, 3865.0], [68.1, 3874.0], [68.2, 3883.0], [68.3, 3891.0], [68.4, 3899.0], [68.5, 3907.0], [68.6, 3916.0], [68.7, 3926.0], [68.8, 3932.0], [68.9, 3941.0], [69.0, 3945.0], [69.1, 3956.0], [69.2, 3968.0], [69.3, 3977.0], [69.4, 3983.0], [69.5, 3994.0], [69.6, 4001.0], [69.7, 4010.0], [69.8, 4015.0], [69.9, 4024.0], [70.0, 4033.0], [70.1, 4044.0], [70.2, 4054.0], [70.3, 4064.0], [70.4, 4073.0], [70.5, 4079.0], [70.6, 4088.0], [70.7, 4096.0], [70.8, 4107.0], [70.9, 4117.0], [71.0, 4126.0], [71.1, 4135.0], [71.2, 4141.0], [71.3, 4150.0], [71.4, 4159.0], [71.5, 4164.0], [71.6, 4170.0], [71.7, 4183.0], [71.8, 4192.0], [71.9, 4202.0], [72.0, 4212.0], [72.1, 4224.0], [72.2, 4234.0], [72.3, 4250.0], [72.4, 4256.0], [72.5, 4271.0], [72.6, 4282.0], [72.7, 4296.0], [72.8, 4308.0], [72.9, 4316.0], [73.0, 4324.0], [73.1, 4339.0], [73.2, 4347.0], [73.3, 4356.0], [73.4, 4364.0], [73.5, 4375.0], [73.6, 4394.0], [73.7, 4411.0], [73.8, 4420.0], [73.9, 4428.0], [74.0, 4438.0], [74.1, 4445.0], [74.2, 4454.0], [74.3, 4463.0], [74.4, 4473.0], [74.5, 4483.0], [74.6, 4491.0], [74.7, 4497.0], [74.8, 4505.0], [74.9, 4514.0], [75.0, 4522.0], [75.1, 4530.0], [75.2, 4536.0], [75.3, 4545.0], [75.4, 4558.0], [75.5, 4566.0], [75.6, 4576.0], [75.7, 4582.0], [75.8, 4592.0], [75.9, 4601.0], [76.0, 4606.0], [76.1, 4612.0], [76.2, 4618.0], [76.3, 4624.0], [76.4, 4633.0], [76.5, 4638.0], [76.6, 4645.0], [76.7, 4654.0], [76.8, 4662.0], [76.9, 4669.0], [77.0, 4676.0], [77.1, 4680.0], [77.2, 4687.0], [77.3, 4695.0], [77.4, 4703.0], [77.5, 4714.0], [77.6, 4728.0], [77.7, 4738.0], [77.8, 4743.0], [77.9, 4752.0], [78.0, 4763.0], [78.1, 4771.0], [78.2, 4779.0], [78.3, 4786.0], [78.4, 4798.0], [78.5, 4809.0], [78.6, 4817.0], [78.7, 4827.0], [78.8, 4838.0], [78.9, 4846.0], [79.0, 4858.0], [79.1, 4869.0], [79.2, 4880.0], [79.3, 4893.0], [79.4, 4910.0], [79.5, 4918.0], [79.6, 4927.0], [79.7, 4935.0], [79.8, 4944.0], [79.9, 4955.0], [80.0, 4968.0], [80.1, 4976.0], [80.2, 4986.0], [80.3, 4995.0], [80.4, 5005.0], [80.5, 5015.0], [80.6, 5025.0], [80.7, 5035.0], [80.8, 5044.0], [80.9, 5054.0], [81.0, 5065.0], [81.1, 5073.0], [81.2, 5083.0], [81.3, 5093.0], [81.4, 5107.0], [81.5, 5119.0], [81.6, 5131.0], [81.7, 5139.0], [81.8, 5149.0], [81.9, 5161.0], [82.0, 5167.0], [82.1, 5174.0], [82.2, 5185.0], [82.3, 5194.0], [82.4, 5206.0], [82.5, 5221.0], [82.6, 5233.0], [82.7, 5247.0], [82.8, 5258.0], [82.9, 5271.0], [83.0, 5281.0], [83.1, 5298.0], [83.2, 5316.0], [83.3, 5337.0], [83.4, 5356.0], [83.5, 5369.0], [83.6, 5380.0], [83.7, 5399.0], [83.8, 5415.0], [83.9, 5430.0], [84.0, 5440.0], [84.1, 5452.0], [84.2, 5469.0], [84.3, 5481.0], [84.4, 5491.0], [84.5, 5508.0], [84.6, 5519.0], [84.7, 5528.0], [84.8, 5539.0], [84.9, 5550.0], [85.0, 5561.0], [85.1, 5574.0], [85.2, 5584.0], [85.3, 5603.0], [85.4, 5618.0], [85.5, 5636.0], [85.6, 5647.0], [85.7, 5661.0], [85.8, 5672.0], [85.9, 5684.0], [86.0, 5704.0], [86.1, 5724.0], [86.2, 5742.0], [86.3, 5755.0], [86.4, 5768.0], [86.5, 5782.0], [86.6, 5799.0], [86.7, 5822.0], [86.8, 5837.0], [86.9, 5851.0], [87.0, 5872.0], [87.1, 5889.0], [87.2, 5923.0], [87.3, 5956.0], [87.4, 5981.0], [87.5, 6007.0], [87.6, 6030.0], [87.7, 6058.0], [87.8, 6081.0], [87.9, 6105.0], [88.0, 6144.0], [88.1, 6195.0], [88.2, 6221.0], [88.3, 6253.0], [88.4, 6293.0], [88.5, 6328.0], [88.6, 6351.0], [88.7, 6390.0], [88.8, 6437.0], [88.9, 6470.0], [89.0, 6507.0], [89.1, 6536.0], [89.2, 6569.0], [89.3, 6588.0], [89.4, 6627.0], [89.5, 6655.0], [89.6, 6683.0], [89.7, 6696.0], [89.8, 6731.0], [89.9, 6763.0], [90.0, 6831.0], [90.1, 6869.0], [90.2, 6931.0], [90.3, 6981.0], [90.4, 7055.0], [90.5, 7107.0], [90.6, 7155.0], [90.7, 7260.0], [90.8, 7336.0], [90.9, 7392.0], [91.0, 7449.0], [91.1, 7487.0], [91.2, 7534.0], [91.3, 7569.0], [91.4, 7602.0], [91.5, 7631.0], [91.6, 7669.0], [91.7, 7702.0], [91.8, 7756.0], [91.9, 7814.0], [92.0, 7850.0], [92.1, 7883.0], [92.2, 7949.0], [92.3, 8016.0], [92.4, 8085.0], [92.5, 8150.0], [92.6, 8232.0], [92.7, 8289.0], [92.8, 8395.0], [92.9, 8477.0], [93.0, 8556.0], [93.1, 8655.0], [93.2, 8768.0], [93.3, 8895.0], [93.4, 9161.0], [93.5, 9375.0], [93.6, 9610.0], [93.7, 9880.0], [93.8, 10223.0], [93.9, 10533.0], [94.0, 10613.0], [94.1, 10710.0], [94.2, 10745.0], [94.3, 10777.0], [94.4, 10816.0], [94.5, 10866.0], [94.6, 10919.0], [94.7, 11013.0], [94.8, 11144.0], [94.9, 11276.0], [95.0, 11339.0], [95.1, 11358.0], [95.2, 11477.0], [95.3, 11607.0], [95.4, 11696.0], [95.5, 11752.0], [95.6, 11779.0], [95.7, 11815.0], [95.8, 11846.0], [95.9, 11871.0], [96.0, 11929.0], [96.1, 12040.0], [96.2, 12180.0], [96.3, 12415.0], [96.4, 12539.0], [96.5, 12628.0], [96.6, 12729.0], [96.7, 12862.0], [96.8, 13272.0], [96.9, 13755.0], [97.0, 13923.0], [97.1, 14468.0], [97.2, 14906.0], [97.3, 15437.0], [97.4, 15714.0], [97.5, 16021.0], [97.6, 16622.0], [97.7, 17472.0], [97.8, 18231.0], [97.9, 19154.0], [98.0, 19967.0], [98.1, 20959.0], [98.2, 25835.0], [98.3, 28359.0], [98.4, 30133.0], [98.5, 31909.0], [98.6, 32521.0], [98.7, 33578.0], [98.8, 36641.0], [98.9, 37348.0], [99.0, 38367.0], [99.1, 56820.0], [99.2, 60448.0], [99.3, 60709.0], [99.4, 61378.0], [99.5, 61878.0], [99.6, 62984.0], [99.7, 64605.0], [99.8, 65138.0], [99.9, 66189.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1980.0, "series": [{"data": [[0.0, 1444.0], [68300.0, 2.0], [65900.0, 3.0], [100.0, 1960.0], [33300.0, 2.0], [32900.0, 3.0], [33700.0, 1.0], [36100.0, 3.0], [36900.0, 1.0], [37300.0, 5.0], [37700.0, 1.0], [38100.0, 3.0], [38900.0, 2.0], [38500.0, 1.0], [200.0, 1980.0], [54900.0, 4.0], [56500.0, 1.0], [55700.0, 1.0], [56900.0, 1.0], [61300.0, 4.0], [60900.0, 9.0], [60500.0, 7.0], [59700.0, 2.0], [62100.0, 4.0], [62900.0, 7.0], [62500.0, 1.0], [63300.0, 4.0], [61700.0, 5.0], [65300.0, 3.0], [63700.0, 4.0], [64900.0, 2.0], [66600.0, 2.0], [68200.0, 2.0], [300.0, 1148.0], [400.0, 516.0], [500.0, 264.0], [600.0, 161.0], [700.0, 140.0], [800.0, 138.0], [900.0, 119.0], [1000.0, 117.0], [1100.0, 247.0], [1200.0, 504.0], [1300.0, 616.0], [1400.0, 414.0], [1500.0, 389.0], [1600.0, 349.0], [1700.0, 278.0], [1800.0, 209.0], [1900.0, 147.0], [2000.0, 146.0], [2100.0, 145.0], [2200.0, 126.0], [2300.0, 102.0], [2400.0, 106.0], [2500.0, 89.0], [2600.0, 63.0], [2700.0, 47.0], [2800.0, 64.0], [2900.0, 61.0], [3000.0, 61.0], [3100.0, 86.0], [3300.0, 213.0], [3200.0, 257.0], [3400.0, 144.0], [3500.0, 171.0], [3600.0, 191.0], [3700.0, 225.0], [3800.0, 243.0], [3900.0, 233.0], [4000.0, 232.0], [4100.0, 228.0], [4200.0, 172.0], [4300.0, 186.0], [68100.0, 2.0], [4600.0, 296.0], [4500.0, 229.0], [4400.0, 214.0], [4700.0, 211.0], [4800.0, 188.0], [5100.0, 198.0], [5000.0, 198.0], [4900.0, 202.0], [5200.0, 156.0], [5300.0, 119.0], [5600.0, 143.0], [5500.0, 164.0], [5400.0, 146.0], [5700.0, 125.0], [5800.0, 106.0], [6100.0, 49.0], [6000.0, 77.0], [5900.0, 70.0], [6200.0, 63.0], [6300.0, 59.0], [6400.0, 54.0], [6500.0, 72.0], [6600.0, 73.0], [6900.0, 37.0], [6800.0, 40.0], [6700.0, 45.0], [7100.0, 34.0], [7000.0, 33.0], [7200.0, 21.0], [7300.0, 29.0], [7400.0, 47.0], [7500.0, 50.0], [7600.0, 57.0], [7700.0, 40.0], [7900.0, 24.0], [7800.0, 54.0], [8100.0, 26.0], [8000.0, 31.0], [8700.0, 19.0], [8300.0, 19.0], [8200.0, 31.0], [8400.0, 26.0], [8600.0, 20.0], [8500.0, 21.0], [8800.0, 14.0], [9100.0, 9.0], [9200.0, 10.0], [9000.0, 5.0], [8900.0, 8.0], [9300.0, 9.0], [9500.0, 8.0], [9600.0, 11.0], [9400.0, 9.0], [9700.0, 7.0], [9800.0, 5.0], [9900.0, 10.0], [10200.0, 2.0], [10100.0, 5.0], [10000.0, 3.0], [10300.0, 7.0], [10500.0, 21.0], [10400.0, 6.0], [10600.0, 19.0], [10700.0, 61.0], [10900.0, 27.0], [10800.0, 34.0], [11100.0, 17.0], [11000.0, 16.0], [11200.0, 14.0], [11300.0, 48.0], [11700.0, 53.0], [11600.0, 23.0], [11400.0, 12.0], [11500.0, 14.0], [11800.0, 52.0], [11900.0, 30.0], [12100.0, 12.0], [12000.0, 16.0], [12200.0, 4.0], [12500.0, 20.0], [12400.0, 18.0], [12700.0, 21.0], [12300.0, 9.0], [12600.0, 17.0], [12800.0, 9.0], [12900.0, 9.0], [13000.0, 6.0], [13300.0, 4.0], [13200.0, 3.0], [13100.0, 1.0], [13700.0, 16.0], [13800.0, 13.0], [13500.0, 4.0], [13600.0, 1.0], [14200.0, 4.0], [14300.0, 3.0], [14100.0, 2.0], [13900.0, 2.0], [14000.0, 7.0], [14800.0, 5.0], [14400.0, 5.0], [14700.0, 9.0], [14600.0, 2.0], [15300.0, 8.0], [14900.0, 8.0], [15200.0, 2.0], [15000.0, 2.0], [15100.0, 1.0], [15400.0, 5.0], [15600.0, 12.0], [15800.0, 5.0], [15500.0, 2.0], [15700.0, 6.0], [15900.0, 7.0], [16100.0, 4.0], [16300.0, 1.0], [16000.0, 6.0], [16200.0, 5.0], [16600.0, 10.0], [16400.0, 1.0], [17200.0, 2.0], [17000.0, 1.0], [17400.0, 3.0], [16800.0, 2.0], [17800.0, 1.0], [18200.0, 9.0], [18400.0, 1.0], [18000.0, 3.0], [17600.0, 1.0], [18600.0, 4.0], [19200.0, 3.0], [18800.0, 1.0], [19800.0, 4.0], [20400.0, 1.0], [19600.0, 4.0], [20000.0, 1.0], [20200.0, 1.0], [21000.0, 4.0], [20800.0, 6.0], [20600.0, 1.0], [25400.0, 3.0], [25200.0, 1.0], [26000.0, 2.0], [25800.0, 3.0], [26200.0, 2.0], [28000.0, 5.0], [28200.0, 3.0], [28400.0, 3.0], [28800.0, 1.0], [29600.0, 1.0], [29000.0, 1.0], [30600.0, 2.0], [30000.0, 1.0], [31600.0, 3.0], [32400.0, 2.0], [31800.0, 5.0], [32000.0, 3.0], [32200.0, 7.0], [32600.0, 2.0], [32800.0, 1.0], [33200.0, 1.0], [36400.0, 3.0], [36800.0, 2.0], [37200.0, 3.0], [38000.0, 1.0], [37600.0, 1.0], [56400.0, 1.0], [56800.0, 2.0], [58000.0, 5.0], [61200.0, 2.0], [60400.0, 4.0], [59600.0, 2.0], [62000.0, 2.0], [62800.0, 1.0], [62400.0, 1.0], [63200.0, 2.0], [61600.0, 2.0], [64000.0, 3.0], [65200.0, 4.0], [63600.0, 2.0], [64800.0, 1.0], [66400.0, 3.0], [66300.0, 2.0], [68700.0, 2.0], [34300.0, 2.0], [33100.0, 1.0], [33500.0, 4.0], [36300.0, 2.0], [36700.0, 1.0], [38700.0, 3.0], [38300.0, 2.0], [37100.0, 1.0], [37500.0, 1.0], [37900.0, 1.0], [55100.0, 3.0], [57900.0, 1.0], [61100.0, 1.0], [60300.0, 1.0], [60700.0, 5.0], [59900.0, 1.0], [61900.0, 4.0], [61500.0, 5.0], [62300.0, 1.0], [63100.0, 1.0], [64700.0, 1.0], [65100.0, 10.0], [68600.0, 1.0], [69300.0, 1.0], [67700.0, 1.0], [66100.0, 2.0], [16500.0, 4.0], [16900.0, 1.0], [17100.0, 5.0], [16700.0, 1.0], [17900.0, 4.0], [18100.0, 7.0], [18300.0, 2.0], [17500.0, 1.0], [19300.0, 1.0], [19100.0, 7.0], [18900.0, 1.0], [19700.0, 3.0], [20100.0, 2.0], [20300.0, 1.0], [19900.0, 1.0], [19500.0, 1.0], [20700.0, 3.0], [20900.0, 8.0], [21100.0, 2.0], [20500.0, 1.0], [22700.0, 1.0], [25300.0, 1.0], [28300.0, 9.0], [28100.0, 1.0], [27900.0, 2.0], [29500.0, 2.0], [29100.0, 3.0], [29700.0, 1.0], [30300.0, 1.0], [30100.0, 3.0], [29900.0, 2.0], [30900.0, 1.0], [31700.0, 2.0], [31500.0, 2.0], [31300.0, 1.0], [32500.0, 3.0], [32100.0, 3.0], [31900.0, 2.0], [32300.0, 3.0], [32700.0, 2.0], [34200.0, 5.0], [33000.0, 1.0], [33400.0, 2.0], [36600.0, 2.0], [36200.0, 2.0], [37000.0, 7.0], [37400.0, 7.0], [37800.0, 2.0], [39000.0, 1.0], [55000.0, 2.0], [58200.0, 2.0], [57800.0, 1.0], [61400.0, 4.0], [61000.0, 3.0], [60600.0, 10.0], [61800.0, 2.0], [63400.0, 1.0], [64600.0, 2.0], [65000.0, 7.0], [63800.0, 1.0], [65400.0, 2.0], [68400.0, 1.0], [66000.0, 4.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 69300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2400.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 8788.0, "series": [{"data": [[0.0, 5844.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2400.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 8788.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 2968.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 110.94930597465283, "minX": 1.69175262E12, "maxY": 848.421272554607, "series": [{"data": [[1.69175262E12, 848.421272554607], [1.69175274E12, 110.94930597465283], [1.69175268E12, 801.8856094203989]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69175274E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 26.0, "minX": 1.0, "maxY": 54941.0, "series": [{"data": [[2.0, 80.0], [4.0, 65.27500000000002], [5.0, 48319.0], [6.0, 4892.833333333334], [7.0, 54941.0], [8.0, 47.0], [9.0, 7901.0714285714275], [10.0, 53.4], [11.0, 48.666666666666664], [12.0, 50.81818181818182], [14.0, 12027.8], [15.0, 30097.25], [16.0, 38.0], [17.0, 41.666666666666664], [18.0, 40.5], [19.0, 49.485714285714295], [20.0, 61.294117647058826], [21.0, 24026.42857142857], [22.0, 47.0], [23.0, 54.5], [24.0, 53.0], [25.0, 29111.0], [26.0, 67.33333333333333], [27.0, 34307.5], [28.0, 40.0], [29.0, 1300.2000000000003], [30.0, 33.0], [31.0, 55.666666666666664], [33.0, 57.5], [32.0, 35.0], [34.0, 110.2], [35.0, 158.5], [36.0, 147.00000000000003], [37.0, 131.66666666666669], [38.0, 130.0], [39.0, 78.0], [40.0, 248.03333333333333], [41.0, 166.42857142857142], [43.0, 65.2], [42.0, 372.11111111111114], [44.0, 85.55555555555556], [45.0, 2911.25], [46.0, 168.25], [47.0, 79.0], [48.0, 161.5], [49.0, 161.5], [50.0, 122.8], [51.0, 191.0], [53.0, 345.0], [52.0, 89.0], [54.0, 363.62500000000006], [57.0, 78.0], [56.0, 82.0], [59.0, 117.9], [58.0, 93.38461538461537], [61.0, 214.75], [60.0, 102.57142857142858], [63.0, 167.68000000000004], [62.0, 223.62962962962965], [66.0, 921.1499999999997], [65.0, 128.5], [64.0, 115.3], [71.0, 160.6], [70.0, 668.75], [69.0, 934.25], [68.0, 6533.5], [73.0, 218.9230769230769], [74.0, 287.5], [75.0, 993.2], [77.0, 1034.3333333333333], [78.0, 246.85714285714283], [79.0, 100.8], [76.0, 1301.2], [83.0, 906.7499999999999], [82.0, 122.57142857142858], [81.0, 209.26315789473685], [80.0, 84.64285714285712], [87.0, 310.3333333333333], [86.0, 1369.0], [85.0, 362.94736842105266], [84.0, 86.5], [91.0, 125.33333333333334], [90.0, 521.5625], [89.0, 63.0], [88.0, 883.1818181818182], [92.0, 160.0], [93.0, 104.66666666666667], [94.0, 166.84615384615384], [95.0, 354.5], [99.0, 68.92307692307692], [98.0, 60.0], [97.0, 496.33333333333337], [96.0, 68.5], [100.0, 101.33333333333333], [103.0, 289.50000000000006], [102.0, 199.66666666666666], [101.0, 120.25], [107.0, 119.30434782608694], [105.0, 127.75], [104.0, 173.62500000000003], [111.0, 231.9375], [110.0, 114.5], [109.0, 124.33333333333333], [108.0, 160.4666666666667], [112.0, 329.3636363636364], [113.0, 376.75], [115.0, 381.5], [114.0, 302.09090909090907], [116.0, 341.2307692307692], [117.0, 311.6666666666667], [118.0, 269.0], [119.0, 320.2142857142857], [120.0, 745.6666666666666], [121.0, 1546.272727272727], [122.0, 2049.578947368421], [123.0, 3669.333333333333], [125.0, 1727.875], [126.0, 1323.7272727272727], [127.0, 673.3333333333334], [124.0, 16579.272727272728], [128.0, 690.8], [135.0, 2965.176470588235], [134.0, 70.5], [133.0, 62.0], [131.0, 83.0], [130.0, 82.0], [129.0, 193.99999999999997], [136.0, 269.6923076923077], [137.0, 168.61904761904765], [142.0, 266.0], [143.0, 171.875], [141.0, 135.42857142857142], [140.0, 132.4], [138.0, 263.8125], [144.0, 131.0], [147.0, 487.5769230769231], [148.0, 183.66666666666669], [150.0, 150.5], [151.0, 266.6], [149.0, 110.7727272727273], [146.0, 121.5], [152.0, 156.33333333333331], [158.0, 252.4], [159.0, 212.0], [157.0, 202.7], [156.0, 197.5], [155.0, 366.2307692307693], [154.0, 537.1428571428571], [153.0, 603.9756097560975], [160.0, 230.75], [161.0, 461.7333333333333], [162.0, 574.25], [167.0, 369.6666666666667], [166.0, 1248.4166666666667], [165.0, 1064.25], [164.0, 1493.125], [163.0, 887.0], [170.0, 319.8333333333333], [171.0, 19678.57142857143], [174.0, 9503.285714285716], [175.0, 31753.47826086956], [173.0, 322.7777777777777], [172.0, 42342.166666666664], [169.0, 4154.7], [168.0, 5391.875000000001], [176.0, 1658.8461538461536], [179.0, 335.50000000000006], [183.0, 4075.2], [182.0, 123.0], [181.0, 120.5], [180.0, 9144.2], [178.0, 2152.5], [177.0, 15674.4], [184.0, 14144.500000000004], [188.0, 268.0], [190.0, 13803.714285714284], [191.0, 29905.666666666668], [189.0, 979.1999999999999], [187.0, 634.5217391304348], [186.0, 188.25], [185.0, 20079.695652173912], [193.0, 476.8333333333333], [194.0, 609.5], [195.0, 417.40000000000003], [199.0, 437.68749999999994], [198.0, 551.5833333333333], [197.0, 408.1666666666667], [196.0, 375.90909090909093], [192.0, 6568.299999999999], [201.0, 573.3571428571428], [206.0, 231.85714285714286], [205.0, 234.3], [203.0, 5409.349999999999], [202.0, 221.25], [200.0, 2366.444444444445], [211.0, 1298.6666666666667], [212.0, 1365.5714285714284], [213.0, 7387.428571428572], [214.0, 6512.777777777777], [215.0, 752.25], [210.0, 3940.214285714286], [209.0, 214.125], [208.0, 883.8076923076922], [217.0, 291.6363636363636], [218.0, 929.9333333333333], [219.0, 302.625], [220.0, 8887.095238095239], [221.0, 205.66666666666666], [222.0, 783.6], [223.0, 16019.0], [224.0, 5613.0], [227.0, 5776.333333333334], [228.0, 1348.0], [231.0, 647.6666666666666], [230.0, 184.5], [229.0, 2793.5], [226.0, 215.57142857142858], [225.0, 9458.571428571428], [234.0, 848.5833333333333], [236.0, 212.0454545454545], [237.0, 683.1562500000001], [239.0, 4347.2307692307695], [235.0, 493.3333333333333], [233.0, 223.5], [232.0, 195.6], [247.0, 1246.9677419354837], [246.0, 476.235294117647], [245.0, 1215.0], [244.0, 540.9473684210526], [243.0, 326.0], [242.0, 543.1521739130437], [241.0, 936.3333333333334], [240.0, 384.2727272727273], [249.0, 702.0769230769231], [255.0, 207.5], [254.0, 1234.0], [253.0, 1219.0], [252.0, 787.1875], [251.0, 225.625], [250.0, 665.9999999999999], [248.0, 430.41666666666663], [271.0, 2533.6], [257.0, 228.66666666666666], [263.0, 1175.0], [256.0, 194.85714285714286], [261.0, 999.8888888888889], [260.0, 2051.5], [266.0, 6175.583333333333], [270.0, 4081.6999999999994], [269.0, 191.33333333333334], [268.0, 444.1250000000001], [258.0, 772.25], [267.0, 120.0], [265.0, 1248.9285714285713], [264.0, 5039.5], [273.0, 455.6470588235294], [272.0, 5620.259259259259], [274.0, 440.3571428571429], [275.0, 3376.439999999999], [276.0, 1357.25], [277.0, 7359.909090909091], [278.0, 883.9000000000001], [279.0, 118.0], [287.0, 114.0], [281.0, 770.7333333333332], [280.0, 103.0], [283.0, 691.0], [282.0, 140.0], [286.0, 138.11111111111111], [285.0, 92.0], [284.0, 466.42857142857144], [290.0, 758.9374999999999], [289.0, 2237.9090909090905], [288.0, 346.05000000000007], [291.0, 1029.3333333333333], [294.0, 637.7142857142858], [293.0, 1034.8135593220334], [292.0, 296.5555555555556], [295.0, 375.8125], [298.0, 1054.7777777777778], [297.0, 8767.062500000002], [303.0, 1703.866666666667], [302.0, 602.3333333333334], [300.0, 238.5], [299.0, 174.72727272727272], [318.0, 271.25], [310.0, 1014.625], [309.0, 1249.0666666666668], [308.0, 199.14285714285714], [312.0, 841.0], [315.0, 11938.64705882353], [319.0, 444.125], [317.0, 4138.0], [316.0, 46324.333333333336], [314.0, 271.25], [311.0, 729.2], [305.0, 126.7], [304.0, 25593.159999999996], [307.0, 196.0], [306.0, 435.59999999999997], [332.0, 8408.296296296297], [324.0, 874.0], [325.0, 1974.7222222222222], [326.0, 628.9090909090909], [327.0, 158.875], [323.0, 492.6923076923077], [322.0, 289.0], [321.0, 645.3333333333334], [320.0, 365.6666666666667], [330.0, 602.2], [331.0, 699.3333333333333], [335.0, 597.8888888888889], [329.0, 270.1111111111111], [328.0, 368.4], [334.0, 6511.333333333334], [333.0, 477.0], [338.0, 827.2], [340.0, 40682.625], [341.0, 117.16666666666667], [342.0, 653.5833333333333], [343.0, 373.6000000000001], [336.0, 146.0], [344.0, 611.25], [345.0, 312.0], [346.0, 279.0], [347.0, 4685.799999999999], [348.0, 716.0], [339.0, 2258.5384615384614], [350.0, 1030.4], [349.0, 1286.0], [351.0, 1305.0], [353.0, 523.9], [354.0, 431.33333333333337], [355.0, 251.5], [364.0, 386.3333333333333], [365.0, 1124.3913043478258], [367.0, 228.6], [366.0, 821.4705882352941], [356.0, 820.0645161290323], [357.0, 878.0], [358.0, 1989.8333333333333], [359.0, 595.5555555555555], [352.0, 3169.142857142858], [360.0, 1314.3043478260875], [361.0, 1448.75], [362.0, 1339.6], [363.0, 1009.625], [369.0, 1368.909090909091], [368.0, 343.28571428571433], [370.0, 1311.0], [371.0, 1017.9090909090908], [372.0, 1375.2857142857142], [373.0, 2512.3333333333335], [375.0, 1936.6363636363637], [374.0, 1576.3333333333333], [377.0, 488.54545454545456], [380.0, 6891.0], [381.0, 1597.4285714285713], [382.0, 1744.5], [383.0, 889.2666666666668], [376.0, 1729.5], [379.0, 5234.0], [378.0, 742.3043478260869], [398.0, 227.0], [394.0, 2966.684210526316], [385.0, 979.6666666666666], [395.0, 412.6666666666667], [399.0, 16191.454545454548], [396.0, 277.0], [393.0, 2478.5], [392.0, 6685.6], [391.0, 754.0714285714286], [390.0, 563.5714285714286], [389.0, 230.5], [388.0, 238.23076923076923], [401.0, 1230.8], [404.0, 1030.5833333333333], [405.0, 3926.0526315789475], [406.0, 21171.666666666664], [407.0, 1991.4545454545455], [400.0, 1432.1290322580644], [408.0, 640.0], [415.0, 9904.764705882353], [414.0, 1415.0625], [409.0, 706.9473684210528], [410.0, 1210.4], [411.0, 6490.764705882353], [412.0, 1007.2500000000001], [403.0, 253.0], [402.0, 237.0], [413.0, 271.75], [430.0, 1114.1851851851852], [425.0, 2633.75], [429.0, 414.59999999999997], [431.0, 287.5], [428.0, 1475.1818181818182], [427.0, 3563.0], [426.0, 3015.0], [423.0, 1581.7368421052633], [417.0, 964.0], [416.0, 1586.533333333333], [419.0, 315.0], [418.0, 4482.833333333334], [422.0, 2385.0], [421.0, 276.0], [420.0, 226.0], [432.0, 676.0], [436.0, 699.0], [437.0, 605.5], [438.0, 485.8461538461538], [439.0, 218.25], [445.0, 2723.692307692307], [435.0, 264.6666666666667], [434.0, 1579.3684210526317], [433.0, 207.0], [446.0, 874.0], [447.0, 1399.6250000000005], [441.0, 12160.5], [440.0, 120.5], [443.0, 1752.0], [442.0, 280.0], [450.0, 1836.2857142857142], [448.0, 991.8749999999999], [449.0, 251.75], [451.0, 2594.3749999999995], [461.0, 1274.0], [460.0, 1285.0], [462.0, 1491.2857142857144], [463.0, 849.3636363636364], [453.0, 3951.8333333333335], [452.0, 4645.0], [454.0, 936.3333333333334], [455.0, 1873.6250000000002], [456.0, 682.25], [457.0, 1153.4117647058822], [458.0, 7134.874999999999], [459.0, 1124.5833333333333], [476.0, 15341.117647058822], [464.0, 925.1111111111111], [465.0, 646.8], [466.0, 1497.75], [470.0, 1219.3333333333335], [469.0, 281.4], [471.0, 1363.1818181818182], [479.0, 1582.888888888889], [472.0, 1212.7428571428575], [478.0, 1361.8], [477.0, 14231.214285714283], [475.0, 9262.428571428572], [473.0, 1323.25], [493.0, 561.7857142857142], [482.0, 1685.5], [481.0, 845.8], [480.0, 1121.6666666666667], [492.0, 229.4], [483.0, 1050.3333333333333], [486.0, 581.952380952381], [485.0, 318.3333333333333], [484.0, 354.3333333333333], [487.0, 2682.1428571428573], [488.0, 1415.857142857143], [490.0, 2951.1764705882356], [489.0, 3798.3333333333335], [491.0, 1428.2499999999998], [494.0, 1695.2], [495.0, 1407.5], [508.0, 1207.6], [504.0, 629.6], [497.0, 1053.2307692307693], [496.0, 18444.666666666668], [499.0, 1281.5], [503.0, 4469.363636363636], [502.0, 2153.1666666666665], [501.0, 643.3333333333333], [500.0, 1576.5], [506.0, 977.3], [507.0, 1894.8333333333328], [511.0, 2907.2], [510.0, 3890.25], [509.0, 568.0769230769231], [505.0, 247.0], [536.0, 2195.25], [524.0, 1741.2222222222224], [512.0, 3477.8], [516.0, 877.5], [515.0, 389.5], [514.0, 368.0], [513.0, 6159.090909090909], [517.0, 389.8], [519.0, 296.6363636363636], [518.0, 390.5], [540.0, 1793.6315789473683], [539.0, 6907.230769230768], [538.0, 2656.2000000000007], [537.0, 3401.0], [541.0, 1774.5], [542.0, 776.625], [543.0, 1545.3], [528.0, 141.42857142857142], [529.0, 176.2], [531.0, 170.875], [530.0, 234.75], [532.0, 645.25], [534.0, 1193.0], [533.0, 2384.7407407407404], [535.0, 2593.0], [521.0, 685.8], [520.0, 491.9], [522.0, 1866.75], [523.0, 3247.0], [525.0, 1520.6666666666667], [526.0, 887.5], [527.0, 883.1428571428571], [551.0, 1662.142857142857], [555.0, 2030.9090909090908], [544.0, 1211.5], [546.0, 2496.0], [547.0, 1932.7058823529412], [548.0, 868.6999999999999], [550.0, 760.4090909090909], [560.0, 1225.4285714285716], [575.0, 18967.857142857145], [574.0, 1226.0], [573.0, 660.6666666666666], [572.0, 249.0], [571.0, 3754.666666666667], [570.0, 1482.0], [569.0, 2717.3333333333335], [568.0, 1498.0], [561.0, 5968.692307692308], [562.0, 1978.5714285714287], [564.0, 1798.6666666666667], [563.0, 1653.5], [565.0, 2671.375], [566.0, 2087.277777777778], [552.0, 1217.8], [553.0, 1909.0], [554.0, 1923.3157894736842], [556.0, 2489.8571428571427], [558.0, 1734.6000000000001], [557.0, 2819.2142857142853], [559.0, 521.6666666666666], [582.0, 1871.0666666666666], [589.0, 2942.5], [580.0, 1269.4545454545453], [579.0, 991.5], [577.0, 26.0], [590.0, 2666.8], [591.0, 3257.0], [581.0, 2188.875], [583.0, 1899.625], [600.0, 1500.3333333333333], [601.0, 933.0769230769231], [602.0, 683.7777777777777], [603.0, 222.0], [604.0, 387.9375], [605.0, 262.7333333333333], [606.0, 215.4], [607.0, 509.3333333333333], [592.0, 1791.8749999999998], [593.0, 7597.133333333334], [594.0, 2179.0], [595.0, 1132.25], [596.0, 3542.4285714285716], [597.0, 1202.7142857142858], [598.0, 1195.0], [599.0, 552.1333333333334], [585.0, 2069.2727272727275], [586.0, 3312.0], [587.0, 2483.5], [588.0, 3642.3333333333335], [611.0, 2522.0], [619.0, 664.6666666666667], [608.0, 525.25], [610.0, 55.3], [623.0, 1559.1666666666667], [620.0, 622.8181818181819], [622.0, 1110.0], [612.0, 637.5714285714286], [613.0, 620.0000000000001], [615.0, 1386.3333333333333], [632.0, 1725.0000000000002], [636.0, 820.0], [635.0, 1063.0], [633.0, 1105.5555555555557], [637.0, 588.0], [639.0, 847.6666666666666], [638.0, 761.0], [624.0, 1898.0], [625.0, 2141.2857142857147], [626.0, 691.5], [629.0, 3402.1666666666665], [628.0, 588.857142857143], [630.0, 1967.5], [631.0, 1434.869565217391], [616.0, 866.717391304348], [617.0, 2829.777777777778], [618.0, 2632.25], [667.0, 2271.7499999999995], [644.0, 13459.562499999998], [641.0, 3779.0], [640.0, 829.5], [642.0, 1435.4117647058824], [643.0, 177.0], [645.0, 44851.470588235294], [646.0, 2724.7500000000005], [647.0, 11607.454545454546], [664.0, 3886.3333333333335], [666.0, 366.0], [665.0, 2834.2999999999997], [668.0, 551.3333333333334], [669.0, 971.3333333333334], [671.0, 1157.0], [670.0, 1200.875], [656.0, 784.8571428571427], [659.0, 1983.25], [658.0, 2537.941176470588], [657.0, 758.7777777777778], [661.0, 513.2], [660.0, 281.3333333333333], [662.0, 2026.7142857142858], [663.0, 3196.5], [654.0, 2314.5], [653.0, 379.58333333333337], [652.0, 951.0], [650.0, 2053.95], [649.0, 12215.857142857143], [648.0, 2269.6666666666665], [655.0, 3030.1111111111113], [698.0, 947.6249999999999], [674.0, 3806.0], [673.0, 2584.833333333333], [672.0, 1410.8], [675.0, 1010.1111111111111], [676.0, 2323.9], [678.0, 1087.0], [677.0, 1693.7142857142858], [679.0, 1244.1034482758619], [697.0, 1064.3809523809525], [696.0, 618.4615384615385], [699.0, 1162.6666666666667], [700.0, 2926.0], [701.0, 1780.3333333333335], [702.0, 1195.7916666666667], [703.0, 2237.25], [688.0, 1482.0], [690.0, 1113.6666666666667], [691.0, 897.9047619047617], [692.0, 806.3], [693.0, 1708.111111111111], [694.0, 758.125], [695.0, 701.875], [680.0, 1122.0], [681.0, 1662.666666666667], [686.0, 1387.6], [685.0, 2956.75], [683.0, 3194.142857142857], [682.0, 2399.2], [687.0, 1285.0], [730.0, 1420.9090909090908], [705.0, 2040.1666666666667], [704.0, 835.6086956521739], [706.0, 2036.8333333333333], [707.0, 1351.7999999999997], [709.0, 4397.849999999999], [708.0, 2198.1666666666665], [711.0, 2157.0], [710.0, 2019.6666666666667], [729.0, 1243.8], [728.0, 569.0], [732.0, 2900.222222222222], [731.0, 291.0], [733.0, 1704.3333333333335], [734.0, 1663.8571428571427], [735.0, 1301.0810810810815], [720.0, 943.2], [717.0, 2399.25], [716.0, 1090.6], [713.0, 1236.5], [712.0, 2313.0000000000005], [718.0, 2475.2], [719.0, 1379.923076923077], [721.0, 2146.916666666667], [722.0, 2693.5], [723.0, 2329.25], [724.0, 1151.7], [725.0, 1229.4285714285713], [727.0, 424.0], [726.0, 333.6666666666667], [740.0, 1120.5555555555557], [747.0, 1798.8750000000002], [737.0, 1826.75], [736.0, 1066.8], [739.0, 1053.0], [738.0, 816.4285714285714], [750.0, 1682.4], [751.0, 1205.3333333333333], [748.0, 1165.5], [749.0, 2177.3846153846152], [741.0, 3043.8636363636356], [742.0, 2610.7368421052633], [743.0, 981.0], [760.0, 1271.875], [762.0, 1293.5454545454545], [761.0, 1805.0], [763.0, 1397.7857142857142], [765.0, 3211.6], [764.0, 2572.25], [767.0, 5558.285714285715], [752.0, 1237.5], [766.0, 1522.5], [753.0, 1062.2857142857142], [755.0, 2007.8000000000004], [754.0, 1173.6666666666667], [756.0, 1585.222222222222], [757.0, 1499.6], [759.0, 164.0], [744.0, 1238.6956521739132], [745.0, 1833.75], [746.0, 862.7142857142856], [775.0, 1537.4166666666667], [779.0, 1456.0], [768.0, 7924.187500000001], [769.0, 19856.285714285714], [771.0, 6924.363636363638], [770.0, 12233.222222222223], [772.0, 1325.4285714285716], [773.0, 10847.028169014082], [774.0, 4115.571428571428], [784.0, 3035.125], [786.0, 4055.0], [785.0, 2204.9189189189187], [799.0, 1057.0], [798.0, 3118.0], [796.0, 4252.857142857143], [797.0, 2519.1111111111113], [793.0, 2318.166666666667], [792.0, 149.33333333333331], [795.0, 1595.7499999999998], [788.0, 4035.0], [789.0, 2234.8], [790.0, 6544.8], [791.0, 1526.6363636363635], [776.0, 2386.75], [777.0, 2365.25], [778.0, 1322.5714285714287], [780.0, 2245.3333333333335], [782.0, 1400.0384615384617], [824.0, 2977.1111111111113], [814.0, 1705.0], [801.0, 1573.7272727272725], [802.0, 2167.090909090909], [807.0, 2836.5], [806.0, 3701.363636363636], [805.0, 3132.2000000000007], [804.0, 1417.0], [803.0, 2945.25], [825.0, 5614.526315789473], [826.0, 25793.8], [829.0, 3423.7250000000013], [827.0, 1544.2], [831.0, 731.1666666666666], [830.0, 3794.65625], [808.0, 2346.1428571428573], [809.0, 2472.5000000000005], [812.0, 2250.5], [815.0, 957.0], [816.0, 1328.6], [817.0, 664.3243243243244], [819.0, 1874.272727272727], [821.0, 30176.733333333334], [820.0, 2876.75], [822.0, 2433.8], [823.0, 9863.500000000002], [837.0, 2634.2500000000005], [833.0, 2527.9444444444443], [834.0, 1311.6666666666665], [836.0, 2548.4736842105262], [835.0, 3963.4], [847.0, 2401.3333333333335], [846.0, 1492.7272727272727], [838.0, 4303.5], [839.0, 3074.4385964912276], [840.0, 2793.3999999999996], [841.0, 1768.2500000000002], [844.0, 1669.857142857143], [843.0, 2195.0], [842.0, 1778.0], [845.0, 2617.4], [849.0, 2746.875], [863.0, 2096.0], [862.0, 3511.0], [861.0, 3577.9473684210525], [856.0, 2287.055555555555], [857.0, 3652.1666666666665], [859.0, 1767.6666666666667], [858.0, 2241.5], [860.0, 4087.0], [850.0, 1658.0555555555554], [851.0, 3349.0930232558135], [853.0, 1986.0714285714284], [852.0, 996.5], [855.0, 2945.777777777778], [854.0, 5092.636363636364], [891.0, 2788.888888888889], [878.0, 1580.142857142857], [867.0, 1889.0], [872.0, 1590.8], [873.0, 5100.612903225807], [874.0, 1483.0], [875.0, 278.3333333333333], [877.0, 3054.272727272727], [876.0, 2648.047619047619], [879.0, 2451.8888888888887], [864.0, 1682.0000000000002], [866.0, 1425.6666666666667], [865.0, 1413.8333333333333], [880.0, 3552.857142857143], [895.0, 2990.619047619048], [894.0, 3524.5483870967755], [893.0, 1934.4], [892.0, 3545.0], [890.0, 3255.25], [889.0, 2708.666666666667], [888.0, 3312.0172413793102], [871.0, 650.3749999999999], [869.0, 3219.25], [868.0, 3851.0], [881.0, 3983.8333333333335], [884.0, 4157.000000000001], [883.0, 3580.4705882352937], [882.0, 2753.6666666666665], [885.0, 2650.8947368421054], [886.0, 3307.9285714285716], [887.0, 2188.0], [901.0, 1012.75], [897.0, 1843.9285714285713], [896.0, 1827.2], [911.0, 6169.625000000001], [910.0, 2481.21052631579], [908.0, 3084.4615384615386], [909.0, 2623.333333333334], [906.0, 4215.357142857142], [907.0, 2890.714285714286], [898.0, 2467.6666666666665], [899.0, 2305.6923076923076], [900.0, 4299.076923076923], [903.0, 2636.2777777777783], [902.0, 2033.9285714285713], [920.0, 1068.2], [923.0, 2729.882352941176], [922.0, 1133.0], [924.0, 2269.0], [925.0, 2823.410256410256], [926.0, 2883.3333333333335], [927.0, 4241.961538461538], [912.0, 2773.194444444445], [913.0, 1712.4166666666665], [914.0, 2249.7], [915.0, 3173.807692307692], [916.0, 2820.6060606060605], [919.0, 2828.9375], [918.0, 3408.230769230769], [917.0, 2691.6666666666665], [904.0, 2524.428571428571], [905.0, 11448.885714285716], [934.0, 2542.083333333333], [929.0, 3057.344827586207], [928.0, 2671.7999999999997], [943.0, 1980.3333333333333], [942.0, 4629.526315789473], [938.0, 3437.9166666666665], [940.0, 2457.472222222222], [939.0, 1600.7], [941.0, 2664.7199999999993], [931.0, 2950.5], [930.0, 2350.5], [932.0, 3038.3571428571427], [933.0, 2400.75], [935.0, 7099.54347826087], [953.0, 1371.9999999999998], [952.0, 3422.7950819672133], [954.0, 2649.5], [955.0, 3212.0505617977537], [956.0, 1762.1764705882351], [957.0, 1097.3333333333333], [959.0, 102.0], [944.0, 2361.6470588235284], [958.0, 2804.674418604651], [945.0, 2821.0512820512818], [951.0, 3067.276315789474], [950.0, 4271.217391304347], [949.0, 4409.857142857142], [948.0, 3971.4430379746814], [947.0, 1593.6666666666667], [946.0, 2987.894736842106], [936.0, 2851.124999999999], [937.0, 2631.875], [989.0, 1804.8666666666668], [962.0, 2588.25], [960.0, 2825.25], [961.0, 1523.0], [963.0, 2997.6440677966107], [965.0, 1860.3333333333333], [964.0, 5323.848484848483], [966.0, 2343.307692307692], [968.0, 1977.9571428571433], [969.0, 4298.379310344831], [970.0, 2654.4545454545455], [971.0, 6392.222222222221], [973.0, 2424.698630136987], [972.0, 7933.686274509802], [975.0, 2546.333333333333], [976.0, 2125.875], [991.0, 7158.980769230766], [990.0, 8083.650485436893], [988.0, 4212.321052631578], [987.0, 2266.5], [986.0, 2144.7540983606564], [985.0, 6424.700000000002], [984.0, 3255.359550561798], [967.0, 2552.4193548387093], [977.0, 2170.0256410256416], [978.0, 3710.908163265305], [979.0, 2463.185185185185], [980.0, 7536.121212121212], [981.0, 4225.397260273973], [982.0, 3151.249999999999], [983.0, 3444.5], [996.0, 2584.229508196722], [994.0, 3542.668789808918], [997.0, 2985.0116279069757], [998.0, 3273.8996023856885], [999.0, 3185.56], [1000.0, 4516.255774456514], [995.0, 3922.513513513515], [993.0, 3012.6104294478514], [992.0, 4108.1028037383185], [1.0, 57.5]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[756.891900000002, 3580.2628999999956]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3885.3333333333335, "minX": 1.69175262E12, "maxY": 73124.48333333334, "series": [{"data": [[1.69175262E12, 28310.483333333334], [1.69175274E12, 11063.55], [1.69175268E12, 73124.48333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69175262E12, 12807.416666666666], [1.69175274E12, 3885.3333333333335], [1.69175268E12, 31577.266666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69175274E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3116.6326685659997, "minX": 1.69175262E12, "maxY": 3747.3764337054663, "series": [{"data": [[1.69175262E12, 3116.6326685659997], [1.69175274E12, 3734.458660229334], [1.69175268E12, 3747.3764337054663]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69175274E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1394.3053711526875, "minX": 1.69175262E12, "maxY": 3254.2984401284402, "series": [{"data": [[1.69175262E12, 3116.6100664767337], [1.69175274E12, 1394.3053711526875], [1.69175268E12, 3254.2984401284402]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69175274E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 10.98600703471484, "minX": 1.69175262E12, "maxY": 12.414624881291532, "series": [{"data": [[1.69175262E12, 12.414624881291532], [1.69175274E12, 11.713337356668687], [1.69175268E12, 10.98600703471484]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69175274E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 26.0, "minX": 1.69175262E12, "maxY": 59901.0, "series": [{"data": [[1.69175262E12, 19795.0], [1.69175274E12, 58265.0], [1.69175268E12, 59901.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69175262E12, 6630.6], [1.69175274E12, 1624.3], [1.69175268E12, 7382.799999999999]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69175262E12, 14153.290000000103], [1.69175274E12, 30035.999999999996], [1.69175268E12, 32427.660000000007]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69175262E12, 8181.949999999999], [1.69175274E12, 3333.5999999999967], [1.69175268E12, 11796.249999999995]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.69175262E12, 35.0], [1.69175274E12, 26.0], [1.69175268E12, 31.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69175262E12, 2180.0], [1.69175274E12, 136.0], [1.69175268E12, 1583.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69175274E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 18.5, "minX": 2.0, "maxY": 68283.0, "series": [{"data": [[2.0, 47.0], [6.0, 28041.0], [7.0, 57915.0], [13.0, 44.0], [16.0, 55.0], [30.0, 199.5], [34.0, 52.0], [45.0, 60.0], [46.0, 64.0], [55.0, 8154.0], [63.0, 48.0], [66.0, 5080.5], [82.0, 1329.0], [90.0, 2055.5], [109.0, 4761.0], [111.0, 2530.5], [114.0, 245.5], [119.0, 1264.0], [121.0, 275.0], [125.0, 1223.5], [129.0, 90.0], [143.0, 183.0], [151.0, 4814.0], [158.0, 5088.0], [154.0, 102.0], [164.0, 1617.5], [172.0, 362.0], [173.0, 254.0], [183.0, 1720.0], [178.0, 2416.0], [181.0, 10770.5], [184.0, 275.5], [192.0, 4942.0], [196.0, 381.0], [205.0, 2125.5], [204.0, 5744.0], [206.0, 1597.0], [202.0, 4531.0], [203.0, 301.0], [210.0, 4727.0], [208.0, 529.0], [209.0, 196.0], [213.0, 119.0], [216.0, 4263.0], [225.0, 3061.0], [229.0, 3826.5], [231.0, 5157.0], [230.0, 4559.0], [227.0, 3261.0], [226.0, 4065.0], [224.0, 394.0], [228.0, 314.5], [233.0, 2565.5], [237.0, 2387.0], [232.0, 5482.0], [239.0, 3351.5], [236.0, 4342.0], [241.0, 3869.0], [247.0, 3522.5], [245.0, 3789.0], [242.0, 3703.0], [240.0, 407.0], [249.0, 5337.0], [252.0, 3599.0], [253.0, 1661.0], [255.0, 210.0], [267.0, 2145.0], [259.0, 4861.5], [257.0, 4411.0], [266.0, 3630.0], [263.0, 330.0], [258.0, 187.5], [284.0, 4486.0], [272.0, 3896.0], [285.0, 3835.5], [281.0, 198.0], [293.0, 752.5], [312.0, 1708.5], [313.0, 3332.0], [333.0, 2575.0], [328.0, 1718.0], [366.0, 2298.0], [383.0, 3494.0], [434.0, 1656.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[20.0, 3414.5], [27.0, 5231.0], [29.0, 34.0], [55.0, 18.5], [66.0, 2297.5], [90.0, 68283.0], [109.0, 3823.0], [111.0, 3934.0], [125.0, 11320.0], [129.0, 65736.0], [143.0, 64999.0], [151.0, 25.0], [158.0, 5059.0], [164.0, 2297.0], [183.0, 85.0], [178.0, 258.0], [181.0, 44.0], [184.0, 65130.5], [192.0, 4841.0], [196.0, 5186.5], [205.0, 558.0], [204.0, 10546.0], [206.0, 4394.0], [202.0, 4289.0], [203.0, 61535.5], [210.0, 4414.0], [208.0, 4440.0], [216.0, 9375.0], [225.0, 3241.0], [229.0, 3236.0], [231.0, 5092.5], [230.0, 4490.0], [227.0, 3285.0], [226.0, 23.0], [224.0, 60516.0], [228.0, 61781.5], [233.0, 4426.0], [237.0, 1101.5], [232.0, 5247.0], [239.0, 4489.0], [236.0, 3441.0], [241.0, 3647.0], [247.0, 4697.0], [245.0, 4256.0], [242.0, 3654.0], [240.0, 453.5], [249.0, 4871.5], [252.0, 3044.0], [253.0, 769.5], [267.0, 350.5], [259.0, 4326.0], [257.0, 2563.0], [266.0, 1962.0], [263.0, 66319.0], [258.0, 63968.0], [284.0, 34.0], [272.0, 223.0], [285.0, 3694.5], [293.0, 71.0], [312.0, 4160.5], [313.0, 3005.0], [333.0, 3615.0], [328.0, 951.0], [366.0, 1814.0], [383.0, 336.0], [434.0, 1123.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 434.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 2.0, "maxY": 57915.0, "series": [{"data": [[2.0, 47.0], [6.0, 28041.0], [7.0, 57915.0], [13.0, 44.0], [16.0, 55.0], [30.0, 199.5], [34.0, 52.0], [45.0, 60.0], [46.0, 64.0], [55.0, 8154.0], [63.0, 48.0], [66.0, 5080.5], [82.0, 1329.0], [90.0, 2055.5], [109.0, 4761.0], [111.0, 2530.5], [114.0, 245.5], [119.0, 1264.0], [121.0, 274.0], [125.0, 1223.5], [129.0, 90.0], [143.0, 183.0], [151.0, 4814.0], [158.0, 5088.0], [154.0, 102.0], [164.0, 1617.5], [172.0, 362.0], [173.0, 254.0], [183.0, 1720.0], [178.0, 2416.0], [181.0, 10770.5], [184.0, 275.5], [192.0, 4942.0], [196.0, 381.0], [205.0, 2125.5], [204.0, 5744.0], [206.0, 1597.0], [202.0, 4531.0], [203.0, 301.0], [210.0, 4727.0], [208.0, 529.0], [209.0, 196.0], [213.0, 119.0], [216.0, 4263.0], [225.0, 3061.0], [229.0, 3826.5], [231.0, 5157.0], [230.0, 4559.0], [227.0, 3261.0], [226.0, 4065.0], [224.0, 394.0], [228.0, 314.5], [233.0, 2565.5], [237.0, 2387.0], [232.0, 5482.0], [239.0, 3351.5], [236.0, 4342.0], [241.0, 3869.0], [247.0, 3522.5], [245.0, 3789.0], [242.0, 3703.0], [240.0, 407.0], [249.0, 5337.0], [252.0, 3599.0], [253.0, 1661.0], [255.0, 210.0], [267.0, 2145.0], [259.0, 4861.5], [257.0, 4411.0], [266.0, 3630.0], [263.0, 330.0], [258.0, 187.5], [284.0, 4486.0], [272.0, 3896.0], [285.0, 3835.5], [281.0, 198.0], [293.0, 752.5], [312.0, 1708.0], [313.0, 3332.0], [333.0, 2575.0], [328.0, 1718.0], [366.0, 2298.0], [383.0, 3494.0], [434.0, 1656.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[20.0, 3414.5], [27.0, 5231.0], [29.0, 34.0], [55.0, 18.5], [66.0, 2297.5], [90.0, 0.0], [109.0, 3823.0], [111.0, 3934.0], [125.0, 11320.0], [129.0, 0.0], [143.0, 0.0], [151.0, 25.0], [158.0, 5059.0], [164.0, 2297.0], [183.0, 85.0], [178.0, 258.0], [181.0, 44.0], [184.0, 0.0], [192.0, 4841.0], [196.0, 5186.5], [205.0, 558.0], [204.0, 10546.0], [206.0, 4394.0], [202.0, 4289.0], [203.0, 0.0], [210.0, 4414.0], [208.0, 20.0], [216.0, 9375.0], [225.0, 3241.0], [229.0, 3236.0], [231.0, 5092.5], [230.0, 4490.0], [227.0, 3285.0], [226.0, 23.0], [224.0, 0.0], [228.0, 0.0], [233.0, 4426.0], [237.0, 1101.5], [232.0, 5247.0], [239.0, 4489.0], [236.0, 3441.0], [241.0, 3647.0], [247.0, 4697.0], [245.0, 4256.0], [242.0, 3654.0], [240.0, 31.0], [249.0, 4871.5], [252.0, 3044.0], [253.0, 765.0], [267.0, 350.5], [259.0, 4326.0], [257.0, 2563.0], [266.0, 1962.0], [263.0, 0.0], [258.0, 0.0], [284.0, 34.0], [272.0, 223.0], [285.0, 3694.5], [293.0, 71.0], [312.0, 4160.5], [313.0, 3005.0], [333.0, 3615.0], [328.0, 888.0], [366.0, 1680.5], [383.0, 323.0], [434.0, 1123.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 434.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 24.283333333333335, "minX": 1.69175262E12, "maxY": 204.63333333333333, "series": [{"data": [[1.69175262E12, 104.41666666666667], [1.69175274E12, 24.283333333333335], [1.69175268E12, 204.63333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69175274E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.0166666666666666, "minX": 1.69175262E12, "maxY": 177.16666666666666, "series": [{"data": [[1.69175262E12, 80.1], [1.69175274E12, 26.6], [1.69175268E12, 177.16666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.69175262E12, 1.9333333333333333], [1.69175268E12, 12.483333333333333]], "isOverall": false, "label": "502", "isController": false}, {"data": [[1.69175262E12, 5.716666666666667], [1.69175268E12, 26.616666666666667]], "isOverall": false, "label": "404", "isController": false}, {"data": [[1.69175274E12, 1.0166666666666666], [1.69175268E12, 1.7]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69175274E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.0166666666666666, "minX": 1.69175262E12, "maxY": 177.16666666666666, "series": [{"data": [[1.69175262E12, 80.1], [1.69175274E12, 26.6], [1.69175268E12, 177.16666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.69175262E12, 7.65], [1.69175274E12, 1.0166666666666666], [1.69175268E12, 40.8]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69175274E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.0166666666666666, "minX": 1.69175262E12, "maxY": 177.16666666666666, "series": [{"data": [[1.69175262E12, 80.1], [1.69175274E12, 26.6], [1.69175268E12, 177.16666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.69175262E12, 7.65], [1.69175274E12, 1.0166666666666666], [1.69175268E12, 40.8]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69175274E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

