/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 54.0, "minX": 0.0, "maxY": 66096.0, "series": [{"data": [[0.0, 54.0], [0.1, 60.0], [0.2, 63.0], [0.3, 65.0], [0.4, 66.0], [0.5, 68.0], [0.6, 70.0], [0.7, 72.0], [0.8, 74.0], [0.9, 75.0], [1.0, 76.0], [1.1, 78.0], [1.2, 79.0], [1.3, 80.0], [1.4, 82.0], [1.5, 83.0], [1.6, 85.0], [1.7, 86.0], [1.8, 88.0], [1.9, 90.0], [2.0, 91.0], [2.1, 93.0], [2.2, 94.0], [2.3, 95.0], [2.4, 97.0], [2.5, 98.0], [2.6, 100.0], [2.7, 101.0], [2.8, 103.0], [2.9, 104.0], [3.0, 106.0], [3.1, 108.0], [3.2, 109.0], [3.3, 111.0], [3.4, 113.0], [3.5, 115.0], [3.6, 117.0], [3.7, 119.0], [3.8, 121.0], [3.9, 123.0], [4.0, 127.0], [4.1, 129.0], [4.2, 132.0], [4.3, 134.0], [4.4, 136.0], [4.5, 138.0], [4.6, 140.0], [4.7, 142.0], [4.8, 144.0], [4.9, 146.0], [5.0, 148.0], [5.1, 150.0], [5.2, 152.0], [5.3, 154.0], [5.4, 156.0], [5.5, 157.0], [5.6, 159.0], [5.7, 160.0], [5.8, 161.0], [5.9, 162.0], [6.0, 163.0], [6.1, 164.0], [6.2, 165.0], [6.3, 166.0], [6.4, 167.0], [6.5, 168.0], [6.6, 169.0], [6.7, 171.0], [6.8, 172.0], [6.9, 173.0], [7.0, 174.0], [7.1, 175.0], [7.2, 176.0], [7.3, 177.0], [7.4, 178.0], [7.5, 179.0], [7.6, 179.0], [7.7, 180.0], [7.8, 181.0], [7.9, 181.0], [8.0, 182.0], [8.1, 182.0], [8.2, 183.0], [8.3, 184.0], [8.4, 185.0], [8.5, 186.0], [8.6, 186.0], [8.7, 187.0], [8.8, 188.0], [8.9, 189.0], [9.0, 190.0], [9.1, 191.0], [9.2, 192.0], [9.3, 193.0], [9.4, 194.0], [9.5, 195.0], [9.6, 196.0], [9.7, 196.0], [9.8, 197.0], [9.9, 197.0], [10.0, 198.0], [10.1, 199.0], [10.2, 199.0], [10.3, 200.0], [10.4, 200.0], [10.5, 201.0], [10.6, 201.0], [10.7, 202.0], [10.8, 202.0], [10.9, 203.0], [11.0, 203.0], [11.1, 204.0], [11.2, 205.0], [11.3, 205.0], [11.4, 206.0], [11.5, 207.0], [11.6, 208.0], [11.7, 208.0], [11.8, 209.0], [11.9, 210.0], [12.0, 211.0], [12.1, 212.0], [12.2, 213.0], [12.3, 213.0], [12.4, 214.0], [12.5, 215.0], [12.6, 216.0], [12.7, 216.0], [12.8, 217.0], [12.9, 218.0], [13.0, 219.0], [13.1, 219.0], [13.2, 220.0], [13.3, 221.0], [13.4, 221.0], [13.5, 222.0], [13.6, 223.0], [13.7, 224.0], [13.8, 225.0], [13.9, 225.0], [14.0, 226.0], [14.1, 227.0], [14.2, 228.0], [14.3, 229.0], [14.4, 230.0], [14.5, 230.0], [14.6, 231.0], [14.7, 232.0], [14.8, 233.0], [14.9, 234.0], [15.0, 235.0], [15.1, 236.0], [15.2, 237.0], [15.3, 237.0], [15.4, 238.0], [15.5, 239.0], [15.6, 240.0], [15.7, 241.0], [15.8, 242.0], [15.9, 242.0], [16.0, 243.0], [16.1, 244.0], [16.2, 245.0], [16.3, 247.0], [16.4, 248.0], [16.5, 248.0], [16.6, 249.0], [16.7, 250.0], [16.8, 251.0], [16.9, 252.0], [17.0, 253.0], [17.1, 254.0], [17.2, 255.0], [17.3, 256.0], [17.4, 257.0], [17.5, 258.0], [17.6, 259.0], [17.7, 260.0], [17.8, 261.0], [17.9, 262.0], [18.0, 263.0], [18.1, 264.0], [18.2, 265.0], [18.3, 265.0], [18.4, 266.0], [18.5, 267.0], [18.6, 268.0], [18.7, 269.0], [18.8, 270.0], [18.9, 271.0], [19.0, 271.0], [19.1, 272.0], [19.2, 273.0], [19.3, 274.0], [19.4, 275.0], [19.5, 276.0], [19.6, 277.0], [19.7, 278.0], [19.8, 278.0], [19.9, 279.0], [20.0, 280.0], [20.1, 281.0], [20.2, 281.0], [20.3, 282.0], [20.4, 283.0], [20.5, 283.0], [20.6, 284.0], [20.7, 284.0], [20.8, 285.0], [20.9, 286.0], [21.0, 286.0], [21.1, 287.0], [21.2, 287.0], [21.3, 288.0], [21.4, 289.0], [21.5, 289.0], [21.6, 290.0], [21.7, 290.0], [21.8, 291.0], [21.9, 292.0], [22.0, 292.0], [22.1, 293.0], [22.2, 294.0], [22.3, 294.0], [22.4, 295.0], [22.5, 296.0], [22.6, 296.0], [22.7, 297.0], [22.8, 298.0], [22.9, 298.0], [23.0, 299.0], [23.1, 299.0], [23.2, 300.0], [23.3, 300.0], [23.4, 301.0], [23.5, 301.0], [23.6, 302.0], [23.7, 302.0], [23.8, 303.0], [23.9, 303.0], [24.0, 304.0], [24.1, 304.0], [24.2, 304.0], [24.3, 305.0], [24.4, 306.0], [24.5, 306.0], [24.6, 306.0], [24.7, 307.0], [24.8, 308.0], [24.9, 308.0], [25.0, 308.0], [25.1, 309.0], [25.2, 309.0], [25.3, 310.0], [25.4, 310.0], [25.5, 311.0], [25.6, 311.0], [25.7, 312.0], [25.8, 312.0], [25.9, 313.0], [26.0, 314.0], [26.1, 314.0], [26.2, 315.0], [26.3, 315.0], [26.4, 316.0], [26.5, 317.0], [26.6, 317.0], [26.7, 318.0], [26.8, 318.0], [26.9, 319.0], [27.0, 320.0], [27.1, 320.0], [27.2, 320.0], [27.3, 321.0], [27.4, 321.0], [27.5, 322.0], [27.6, 323.0], [27.7, 323.0], [27.8, 324.0], [27.9, 324.0], [28.0, 325.0], [28.1, 326.0], [28.2, 326.0], [28.3, 327.0], [28.4, 328.0], [28.5, 328.0], [28.6, 329.0], [28.7, 329.0], [28.8, 330.0], [28.9, 330.0], [29.0, 331.0], [29.1, 332.0], [29.2, 332.0], [29.3, 333.0], [29.4, 333.0], [29.5, 334.0], [29.6, 334.0], [29.7, 335.0], [29.8, 336.0], [29.9, 336.0], [30.0, 337.0], [30.1, 337.0], [30.2, 338.0], [30.3, 339.0], [30.4, 340.0], [30.5, 340.0], [30.6, 341.0], [30.7, 342.0], [30.8, 342.0], [30.9, 343.0], [31.0, 344.0], [31.1, 344.0], [31.2, 345.0], [31.3, 346.0], [31.4, 346.0], [31.5, 347.0], [31.6, 348.0], [31.7, 348.0], [31.8, 349.0], [31.9, 350.0], [32.0, 351.0], [32.1, 351.0], [32.2, 352.0], [32.3, 352.0], [32.4, 353.0], [32.5, 354.0], [32.6, 354.0], [32.7, 355.0], [32.8, 356.0], [32.9, 356.0], [33.0, 357.0], [33.1, 358.0], [33.2, 358.0], [33.3, 359.0], [33.4, 360.0], [33.5, 360.0], [33.6, 361.0], [33.7, 361.0], [33.8, 362.0], [33.9, 363.0], [34.0, 364.0], [34.1, 364.0], [34.2, 365.0], [34.3, 366.0], [34.4, 366.0], [34.5, 367.0], [34.6, 368.0], [34.7, 369.0], [34.8, 369.0], [34.9, 370.0], [35.0, 371.0], [35.1, 372.0], [35.2, 373.0], [35.3, 373.0], [35.4, 374.0], [35.5, 375.0], [35.6, 376.0], [35.7, 377.0], [35.8, 378.0], [35.9, 379.0], [36.0, 379.0], [36.1, 380.0], [36.2, 381.0], [36.3, 381.0], [36.4, 382.0], [36.5, 383.0], [36.6, 384.0], [36.7, 384.0], [36.8, 385.0], [36.9, 386.0], [37.0, 386.0], [37.1, 387.0], [37.2, 388.0], [37.3, 389.0], [37.4, 389.0], [37.5, 390.0], [37.6, 391.0], [37.7, 392.0], [37.8, 392.0], [37.9, 393.0], [38.0, 394.0], [38.1, 395.0], [38.2, 396.0], [38.3, 396.0], [38.4, 397.0], [38.5, 398.0], [38.6, 399.0], [38.7, 400.0], [38.8, 400.0], [38.9, 401.0], [39.0, 402.0], [39.1, 403.0], [39.2, 403.0], [39.3, 404.0], [39.4, 405.0], [39.5, 406.0], [39.6, 406.0], [39.7, 407.0], [39.8, 408.0], [39.9, 408.0], [40.0, 409.0], [40.1, 410.0], [40.2, 410.0], [40.3, 411.0], [40.4, 412.0], [40.5, 412.0], [40.6, 413.0], [40.7, 413.0], [40.8, 414.0], [40.9, 414.0], [41.0, 415.0], [41.1, 415.0], [41.2, 416.0], [41.3, 417.0], [41.4, 417.0], [41.5, 418.0], [41.6, 419.0], [41.7, 419.0], [41.8, 420.0], [41.9, 421.0], [42.0, 421.0], [42.1, 422.0], [42.2, 423.0], [42.3, 423.0], [42.4, 424.0], [42.5, 425.0], [42.6, 426.0], [42.7, 426.0], [42.8, 427.0], [42.9, 427.0], [43.0, 428.0], [43.1, 428.0], [43.2, 429.0], [43.3, 430.0], [43.4, 430.0], [43.5, 431.0], [43.6, 431.0], [43.7, 432.0], [43.8, 433.0], [43.9, 433.0], [44.0, 434.0], [44.1, 435.0], [44.2, 435.0], [44.3, 436.0], [44.4, 436.0], [44.5, 437.0], [44.6, 438.0], [44.7, 438.0], [44.8, 439.0], [44.9, 440.0], [45.0, 440.0], [45.1, 441.0], [45.2, 442.0], [45.3, 442.0], [45.4, 443.0], [45.5, 444.0], [45.6, 444.0], [45.7, 445.0], [45.8, 446.0], [45.9, 447.0], [46.0, 447.0], [46.1, 448.0], [46.2, 449.0], [46.3, 449.0], [46.4, 450.0], [46.5, 450.0], [46.6, 451.0], [46.7, 452.0], [46.8, 452.0], [46.9, 453.0], [47.0, 454.0], [47.1, 455.0], [47.2, 455.0], [47.3, 456.0], [47.4, 457.0], [47.5, 458.0], [47.6, 458.0], [47.7, 459.0], [47.8, 460.0], [47.9, 461.0], [48.0, 462.0], [48.1, 462.0], [48.2, 463.0], [48.3, 464.0], [48.4, 465.0], [48.5, 465.0], [48.6, 466.0], [48.7, 467.0], [48.8, 468.0], [48.9, 469.0], [49.0, 469.0], [49.1, 470.0], [49.2, 471.0], [49.3, 472.0], [49.4, 473.0], [49.5, 473.0], [49.6, 474.0], [49.7, 475.0], [49.8, 476.0], [49.9, 476.0], [50.0, 477.0], [50.1, 478.0], [50.2, 479.0], [50.3, 479.0], [50.4, 480.0], [50.5, 481.0], [50.6, 482.0], [50.7, 483.0], [50.8, 484.0], [50.9, 485.0], [51.0, 486.0], [51.1, 486.0], [51.2, 487.0], [51.3, 488.0], [51.4, 489.0], [51.5, 490.0], [51.6, 491.0], [51.7, 492.0], [51.8, 493.0], [51.9, 495.0], [52.0, 496.0], [52.1, 497.0], [52.2, 498.0], [52.3, 499.0], [52.4, 500.0], [52.5, 501.0], [52.6, 502.0], [52.7, 503.0], [52.8, 504.0], [52.9, 506.0], [53.0, 507.0], [53.1, 508.0], [53.2, 509.0], [53.3, 510.0], [53.4, 511.0], [53.5, 512.0], [53.6, 513.0], [53.7, 515.0], [53.8, 516.0], [53.9, 517.0], [54.0, 518.0], [54.1, 520.0], [54.2, 521.0], [54.3, 522.0], [54.4, 523.0], [54.5, 524.0], [54.6, 526.0], [54.7, 528.0], [54.8, 529.0], [54.9, 530.0], [55.0, 531.0], [55.1, 533.0], [55.2, 534.0], [55.3, 535.0], [55.4, 536.0], [55.5, 537.0], [55.6, 538.0], [55.7, 539.0], [55.8, 540.0], [55.9, 542.0], [56.0, 543.0], [56.1, 544.0], [56.2, 545.0], [56.3, 546.0], [56.4, 546.0], [56.5, 548.0], [56.6, 549.0], [56.7, 550.0], [56.8, 552.0], [56.9, 553.0], [57.0, 554.0], [57.1, 555.0], [57.2, 557.0], [57.3, 558.0], [57.4, 559.0], [57.5, 560.0], [57.6, 562.0], [57.7, 563.0], [57.8, 564.0], [57.9, 565.0], [58.0, 566.0], [58.1, 568.0], [58.2, 569.0], [58.3, 570.0], [58.4, 572.0], [58.5, 573.0], [58.6, 575.0], [58.7, 576.0], [58.8, 578.0], [58.9, 579.0], [59.0, 580.0], [59.1, 581.0], [59.2, 583.0], [59.3, 584.0], [59.4, 586.0], [59.5, 587.0], [59.6, 588.0], [59.7, 590.0], [59.8, 592.0], [59.9, 593.0], [60.0, 594.0], [60.1, 596.0], [60.2, 598.0], [60.3, 600.0], [60.4, 602.0], [60.5, 604.0], [60.6, 606.0], [60.7, 608.0], [60.8, 610.0], [60.9, 612.0], [61.0, 614.0], [61.1, 616.0], [61.2, 619.0], [61.3, 621.0], [61.4, 623.0], [61.5, 627.0], [61.6, 630.0], [61.7, 633.0], [61.8, 636.0], [61.9, 638.0], [62.0, 642.0], [62.1, 645.0], [62.2, 648.0], [62.3, 651.0], [62.4, 654.0], [62.5, 657.0], [62.6, 660.0], [62.7, 663.0], [62.8, 665.0], [62.9, 668.0], [63.0, 672.0], [63.1, 675.0], [63.2, 680.0], [63.3, 684.0], [63.4, 687.0], [63.5, 690.0], [63.6, 693.0], [63.7, 697.0], [63.8, 702.0], [63.9, 706.0], [64.0, 709.0], [64.1, 713.0], [64.2, 718.0], [64.3, 723.0], [64.4, 729.0], [64.5, 734.0], [64.6, 741.0], [64.7, 747.0], [64.8, 757.0], [64.9, 767.0], [65.0, 778.0], [65.1, 790.0], [65.2, 800.0], [65.3, 815.0], [65.4, 827.0], [65.5, 846.0], [65.6, 871.0], [65.7, 910.0], [65.8, 954.0], [65.9, 1018.0], [66.0, 1095.0], [66.1, 1106.0], [66.2, 1119.0], [66.3, 1128.0], [66.4, 1137.0], [66.5, 1147.0], [66.6, 1153.0], [66.7, 1164.0], [66.8, 1176.0], [66.9, 1186.0], [67.0, 1194.0], [67.1, 1201.0], [67.2, 1208.0], [67.3, 1215.0], [67.4, 1220.0], [67.5, 1224.0], [67.6, 1228.0], [67.7, 1233.0], [67.8, 1237.0], [67.9, 1240.0], [68.0, 1243.0], [68.1, 1246.0], [68.2, 1250.0], [68.3, 1253.0], [68.4, 1256.0], [68.5, 1259.0], [68.6, 1262.0], [68.7, 1265.0], [68.8, 1268.0], [68.9, 1271.0], [69.0, 1275.0], [69.1, 1279.0], [69.2, 1284.0], [69.3, 1288.0], [69.4, 1293.0], [69.5, 1297.0], [69.6, 1301.0], [69.7, 1305.0], [69.8, 1309.0], [69.9, 1312.0], [70.0, 1316.0], [70.1, 1319.0], [70.2, 1324.0], [70.3, 1328.0], [70.4, 1331.0], [70.5, 1334.0], [70.6, 1337.0], [70.7, 1341.0], [70.8, 1343.0], [70.9, 1346.0], [71.0, 1348.0], [71.1, 1351.0], [71.2, 1353.0], [71.3, 1356.0], [71.4, 1359.0], [71.5, 1361.0], [71.6, 1364.0], [71.7, 1367.0], [71.8, 1369.0], [71.9, 1372.0], [72.0, 1374.0], [72.1, 1377.0], [72.2, 1379.0], [72.3, 1381.0], [72.4, 1384.0], [72.5, 1387.0], [72.6, 1389.0], [72.7, 1391.0], [72.8, 1394.0], [72.9, 1397.0], [73.0, 1400.0], [73.1, 1404.0], [73.2, 1407.0], [73.3, 1409.0], [73.4, 1413.0], [73.5, 1418.0], [73.6, 1422.0], [73.7, 1425.0], [73.8, 1429.0], [73.9, 1432.0], [74.0, 1436.0], [74.1, 1439.0], [74.2, 1443.0], [74.3, 1447.0], [74.4, 1450.0], [74.5, 1453.0], [74.6, 1455.0], [74.7, 1458.0], [74.8, 1461.0], [74.9, 1464.0], [75.0, 1467.0], [75.1, 1471.0], [75.2, 1473.0], [75.3, 1476.0], [75.4, 1478.0], [75.5, 1480.0], [75.6, 1482.0], [75.7, 1485.0], [75.8, 1488.0], [75.9, 1491.0], [76.0, 1493.0], [76.1, 1496.0], [76.2, 1498.0], [76.3, 1501.0], [76.4, 1504.0], [76.5, 1507.0], [76.6, 1509.0], [76.7, 1513.0], [76.8, 1517.0], [76.9, 1521.0], [77.0, 1526.0], [77.1, 1530.0], [77.2, 1534.0], [77.3, 1538.0], [77.4, 1543.0], [77.5, 1547.0], [77.6, 1552.0], [77.7, 1556.0], [77.8, 1559.0], [77.9, 1564.0], [78.0, 1568.0], [78.1, 1572.0], [78.2, 1578.0], [78.3, 1583.0], [78.4, 1587.0], [78.5, 1592.0], [78.6, 1596.0], [78.7, 1600.0], [78.8, 1606.0], [78.9, 1610.0], [79.0, 1615.0], [79.1, 1620.0], [79.2, 1625.0], [79.3, 1630.0], [79.4, 1636.0], [79.5, 1643.0], [79.6, 1649.0], [79.7, 1654.0], [79.8, 1661.0], [79.9, 1670.0], [80.0, 1681.0], [80.1, 1690.0], [80.2, 1697.0], [80.3, 1707.0], [80.4, 1713.0], [80.5, 1722.0], [80.6, 1731.0], [80.7, 1740.0], [80.8, 1751.0], [80.9, 1763.0], [81.0, 1775.0], [81.1, 1793.0], [81.2, 1812.0], [81.3, 1830.0], [81.4, 1852.0], [81.5, 1873.0], [81.6, 1897.0], [81.7, 1927.0], [81.8, 1972.0], [81.9, 2016.0], [82.0, 2088.0], [82.1, 2169.0], [82.2, 2267.0], [82.3, 2379.0], [82.4, 2569.0], [82.5, 2799.0], [82.6, 3011.0], [82.7, 3123.0], [82.8, 3152.0], [82.9, 3170.0], [83.0, 3198.0], [83.1, 3218.0], [83.2, 3238.0], [83.3, 3249.0], [83.4, 3255.0], [83.5, 3266.0], [83.6, 3275.0], [83.7, 3282.0], [83.8, 3289.0], [83.9, 3300.0], [84.0, 3308.0], [84.1, 3317.0], [84.2, 3325.0], [84.3, 3333.0], [84.4, 3342.0], [84.5, 3352.0], [84.6, 3360.0], [84.7, 3366.0], [84.8, 3373.0], [84.9, 3379.0], [85.0, 3384.0], [85.1, 3391.0], [85.2, 3396.0], [85.3, 3402.0], [85.4, 3409.0], [85.5, 3416.0], [85.6, 3421.0], [85.7, 3430.0], [85.8, 3438.0], [85.9, 3446.0], [86.0, 3452.0], [86.1, 3458.0], [86.2, 3466.0], [86.3, 3474.0], [86.4, 3481.0], [86.5, 3486.0], [86.6, 3492.0], [86.7, 3500.0], [86.8, 3505.0], [86.9, 3511.0], [87.0, 3517.0], [87.1, 3523.0], [87.2, 3530.0], [87.3, 3541.0], [87.4, 3549.0], [87.5, 3558.0], [87.6, 3566.0], [87.7, 3576.0], [87.8, 3586.0], [87.9, 3595.0], [88.0, 3604.0], [88.1, 3613.0], [88.2, 3622.0], [88.3, 3636.0], [88.4, 3651.0], [88.5, 3662.0], [88.6, 3676.0], [88.7, 3690.0], [88.8, 3708.0], [88.9, 3721.0], [89.0, 3739.0], [89.1, 3759.0], [89.2, 3781.0], [89.3, 3805.0], [89.4, 3835.0], [89.5, 3871.0], [89.6, 3913.0], [89.7, 3967.0], [89.8, 4031.0], [89.9, 4136.0], [90.0, 4237.0], [90.1, 4369.0], [90.2, 4590.0], [90.3, 4777.0], [90.4, 4951.0], [90.5, 5304.0], [90.6, 6610.0], [90.7, 7210.0], [90.8, 7281.0], [90.9, 7326.0], [91.0, 7362.0], [91.1, 7388.0], [91.2, 7411.0], [91.3, 7431.0], [91.4, 7453.0], [91.5, 7472.0], [91.6, 7486.0], [91.7, 7502.0], [91.8, 7517.0], [91.9, 7529.0], [92.0, 7547.0], [92.1, 7561.0], [92.2, 7578.0], [92.3, 7593.0], [92.4, 7614.0], [92.5, 7631.0], [92.6, 7645.0], [92.7, 7658.0], [92.8, 7672.0], [92.9, 7689.0], [93.0, 7708.0], [93.1, 7725.0], [93.2, 7742.0], [93.3, 7762.0], [93.4, 7784.0], [93.5, 7804.0], [93.6, 7829.0], [93.7, 7864.0], [93.8, 7894.0], [93.9, 7936.0], [94.0, 7989.0], [94.1, 8059.0], [94.2, 8153.0], [94.3, 8285.0], [94.4, 8519.0], [94.5, 9000.0], [94.6, 9451.0], [94.7, 10665.0], [94.8, 11343.0], [94.9, 14107.0], [95.0, 15434.0], [95.1, 15510.0], [95.2, 15588.0], [95.3, 15634.0], [95.4, 15670.0], [95.5, 15703.0], [95.6, 15736.0], [95.7, 15770.0], [95.8, 15807.0], [95.9, 15842.0], [96.0, 15875.0], [96.1, 15918.0], [96.2, 15962.0], [96.3, 16008.0], [96.4, 16069.0], [96.5, 16147.0], [96.6, 16275.0], [96.7, 16644.0], [96.8, 17420.0], [96.9, 20806.0], [97.0, 28128.0], [97.1, 31629.0], [97.2, 31707.0], [97.3, 31784.0], [97.4, 31848.0], [97.5, 31904.0], [97.6, 31980.0], [97.7, 32060.0], [97.8, 32163.0], [97.9, 32314.0], [98.0, 32733.0], [98.1, 34848.0], [98.2, 55459.0], [98.3, 60073.0], [98.4, 60094.0], [98.5, 60225.0], [98.6, 60323.0], [98.7, 60382.0], [98.8, 60474.0], [98.9, 60569.0], [99.0, 61200.0], [99.1, 61389.0], [99.2, 61571.0], [99.3, 63230.0], [99.4, 63499.0], [99.5, 64105.0], [99.6, 65037.0], [99.7, 65046.0], [99.8, 65064.0], [99.9, 65071.0], [100.0, 66096.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 7675.0, "series": [{"data": [[0.0, 1277.0], [100.0, 3802.0], [33700.0, 2.0], [33300.0, 6.0], [34100.0, 1.0], [34500.0, 2.0], [32900.0, 2.0], [34900.0, 1.0], [35300.0, 2.0], [38500.0, 3.0], [39300.0, 1.0], [42100.0, 1.0], [45300.0, 2.0], [200.0, 6358.0], [57300.0, 1.0], [56500.0, 1.0], [57700.0, 1.0], [58500.0, 4.0], [58100.0, 1.0], [61300.0, 34.0], [60500.0, 46.0], [60100.0, 33.0], [60900.0, 1.0], [63300.0, 21.0], [61700.0, 8.0], [62100.0, 1.0], [62900.0, 3.0], [63700.0, 5.0], [64100.0, 3.0], [64900.0, 1.0], [300.0, 7675.0], [400.0, 6726.0], [500.0, 3947.0], [600.0, 1695.0], [700.0, 724.0], [800.0, 240.0], [900.0, 94.0], [1000.0, 79.0], [1100.0, 512.0], [1200.0, 1229.0], [1300.0, 1686.0], [1400.0, 1631.0], [1500.0, 1189.0], [1600.0, 761.0], [1700.0, 455.0], [1800.0, 233.0], [1900.0, 127.0], [2000.0, 70.0], [2100.0, 60.0], [2300.0, 45.0], [2200.0, 44.0], [2400.0, 30.0], [2500.0, 18.0], [2600.0, 3.0], [2700.0, 41.0], [2800.0, 15.0], [2900.0, 29.0], [3000.0, 25.0], [3100.0, 182.0], [3300.0, 674.0], [3200.0, 439.0], [3400.0, 707.0], [3500.0, 626.0], [3700.0, 267.0], [3600.0, 385.0], [3800.0, 141.0], [3900.0, 95.0], [4000.0, 60.0], [4200.0, 40.0], [4300.0, 37.0], [4100.0, 38.0], [4500.0, 21.0], [4600.0, 19.0], [4400.0, 26.0], [4700.0, 39.0], [4800.0, 22.0], [5100.0, 8.0], [4900.0, 37.0], [5000.0, 15.0], [5300.0, 9.0], [5200.0, 4.0], [5400.0, 1.0], [6100.0, 7.0], [5900.0, 2.0], [6000.0, 1.0], [6300.0, 2.0], [6200.0, 10.0], [6500.0, 8.0], [6400.0, 8.0], [6600.0, 12.0], [6800.0, 7.0], [6700.0, 7.0], [6900.0, 3.0], [7100.0, 18.0], [7000.0, 1.0], [7400.0, 265.0], [7300.0, 157.0], [7200.0, 70.0], [7600.0, 306.0], [7500.0, 320.0], [7700.0, 261.0], [7800.0, 169.0], [7900.0, 95.0], [8000.0, 59.0], [8100.0, 50.0], [8200.0, 34.0], [8600.0, 12.0], [8500.0, 17.0], [8300.0, 21.0], [8400.0, 18.0], [8700.0, 5.0], [9000.0, 19.0], [8800.0, 14.0], [9200.0, 9.0], [9100.0, 11.0], [8900.0, 7.0], [9300.0, 8.0], [9400.0, 5.0], [9600.0, 2.0], [9500.0, 4.0], [9700.0, 2.0], [10200.0, 4.0], [9900.0, 6.0], [10000.0, 6.0], [10100.0, 7.0], [10700.0, 12.0], [10600.0, 10.0], [10500.0, 5.0], [10300.0, 5.0], [10800.0, 10.0], [10900.0, 6.0], [11100.0, 3.0], [11000.0, 5.0], [11200.0, 6.0], [11400.0, 4.0], [11300.0, 8.0], [11500.0, 2.0], [11700.0, 2.0], [11600.0, 1.0], [11900.0, 2.0], [12000.0, 1.0], [12200.0, 1.0], [12400.0, 1.0], [12600.0, 3.0], [12300.0, 2.0], [12500.0, 1.0], [13300.0, 4.0], [12800.0, 1.0], [13000.0, 2.0], [12900.0, 1.0], [13200.0, 2.0], [13600.0, 2.0], [13400.0, 5.0], [13700.0, 2.0], [13500.0, 3.0], [14100.0, 12.0], [14200.0, 3.0], [14000.0, 2.0], [14300.0, 3.0], [14800.0, 5.0], [14400.0, 4.0], [14500.0, 3.0], [14600.0, 2.0], [14700.0, 6.0], [15300.0, 2.0], [15100.0, 1.0], [15000.0, 1.0], [14900.0, 2.0], [15700.0, 137.0], [15600.0, 131.0], [15500.0, 75.0], [15400.0, 45.0], [15800.0, 138.0], [16000.0, 77.0], [16200.0, 31.0], [15900.0, 117.0], [16100.0, 50.0], [16300.0, 19.0], [16600.0, 15.0], [16400.0, 13.0], [17000.0, 3.0], [16800.0, 5.0], [17200.0, 8.0], [17400.0, 3.0], [17800.0, 1.0], [17600.0, 1.0], [19000.0, 5.0], [19200.0, 5.0], [19400.0, 1.0], [18800.0, 4.0], [20800.0, 3.0], [20600.0, 2.0], [22400.0, 2.0], [21600.0, 2.0], [22000.0, 1.0], [23400.0, 2.0], [23200.0, 1.0], [22800.0, 1.0], [23000.0, 1.0], [22600.0, 3.0], [23600.0, 1.0], [24400.0, 1.0], [23800.0, 1.0], [27400.0, 1.0], [28200.0, 2.0], [28800.0, 5.0], [29000.0, 2.0], [29200.0, 1.0], [30400.0, 1.0], [30000.0, 2.0], [29800.0, 1.0], [30200.0, 1.0], [31600.0, 51.0], [31400.0, 3.0], [31000.0, 1.0], [31800.0, 83.0], [32000.0, 60.0], [32200.0, 34.0], [32600.0, 5.0], [32400.0, 8.0], [33600.0, 3.0], [33200.0, 1.0], [34000.0, 3.0], [32800.0, 3.0], [34800.0, 3.0], [34400.0, 1.0], [35200.0, 3.0], [38400.0, 4.0], [39600.0, 1.0], [39200.0, 1.0], [42400.0, 1.0], [42800.0, 1.0], [45200.0, 1.0], [55200.0, 1.0], [56000.0, 1.0], [58400.0, 3.0], [61200.0, 21.0], [60400.0, 52.0], [60000.0, 78.0], [60800.0, 2.0], [61600.0, 14.0], [63200.0, 8.0], [62800.0, 1.0], [63600.0, 12.0], [64400.0, 1.0], [64000.0, 5.0], [33500.0, 4.0], [33900.0, 4.0], [33100.0, 2.0], [35100.0, 3.0], [38700.0, 2.0], [45100.0, 2.0], [55900.0, 1.0], [55500.0, 1.0], [57900.0, 2.0], [61100.0, 7.0], [60300.0, 76.0], [60700.0, 12.0], [61500.0, 28.0], [61900.0, 5.0], [63100.0, 3.0], [63500.0, 18.0], [64700.0, 1.0], [63900.0, 3.0], [65100.0, 1.0], [17300.0, 10.0], [16500.0, 6.0], [16700.0, 7.0], [17100.0, 4.0], [16900.0, 4.0], [17500.0, 5.0], [17700.0, 1.0], [18900.0, 5.0], [18700.0, 5.0], [19100.0, 3.0], [19300.0, 2.0], [20100.0, 1.0], [20900.0, 3.0], [20700.0, 2.0], [20500.0, 3.0], [22500.0, 5.0], [22300.0, 5.0], [21900.0, 2.0], [22100.0, 1.0], [23300.0, 2.0], [23500.0, 1.0], [22900.0, 2.0], [22700.0, 3.0], [23100.0, 2.0], [26500.0, 1.0], [26900.0, 2.0], [27100.0, 1.0], [28100.0, 1.0], [28300.0, 1.0], [28700.0, 1.0], [28900.0, 1.0], [29300.0, 1.0], [30500.0, 2.0], [29900.0, 1.0], [31700.0, 73.0], [31500.0, 11.0], [32100.0, 39.0], [31900.0, 63.0], [32300.0, 30.0], [32700.0, 6.0], [32500.0, 9.0], [33000.0, 2.0], [33800.0, 1.0], [33400.0, 6.0], [35000.0, 7.0], [35400.0, 1.0], [38600.0, 1.0], [37800.0, 1.0], [45000.0, 3.0], [54200.0, 1.0], [54600.0, 2.0], [55000.0, 1.0], [55800.0, 3.0], [55400.0, 1.0], [56600.0, 1.0], [57000.0, 1.0], [57400.0, 1.0], [57800.0, 1.0], [58600.0, 2.0], [61400.0, 23.0], [60600.0, 16.0], [60200.0, 46.0], [61000.0, 1.0], [63400.0, 23.0], [61800.0, 4.0], [62200.0, 2.0], [65000.0, 239.0], [63800.0, 4.0], [66000.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 66000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 864.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 25893.0, "series": [{"data": [[0.0, 25893.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 11795.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 10843.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 864.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.69215864E12, "maxY": 100.0, "series": [{"data": [[1.69216146E12, 9.936530324400563], [1.69215984E12, 66.25180722891555], [1.69215954E12, 49.27208480565375], [1.69215924E12, 32.53191489361702], [1.69216086E12, 66.81578947368436], [1.69215894E12, 15.830349531116793], [1.69216116E12, 36.16346955796497], [1.69215864E12, 1.0], [1.69216056E12, 98.75032851511172], [1.69216026E12, 89.56860465116276], [1.69215996E12, 72.51590106007075], [1.69215966E12, 55.1574803149606], [1.69216032E12, 92.48846539618856], [1.69216002E12, 75.38592233009706], [1.69216134E12, 19.168248490077637], [1.69215972E12, 59.165845648604275], [1.69215942E12, 42.5025641025641], [1.69215912E12, 25.83973834832378], [1.69216074E12, 79.65534465534472], [1.69215882E12, 9.214343928280359], [1.69216104E12, 50.249578414839796], [1.69216044E12, 98.87824126268328], [1.69216014E12, 81.9701492537312], [1.69215888E12, 12.525535420098846], [1.6921605E12, 100.0], [1.6921608E12, 71.12957746478881], [1.6921602E12, 85.6801541425819], [1.6921599E12, 69.14056603773577], [1.69216122E12, 30.497969130788018], [1.6921596E12, 52.50964912280699], [1.6921593E12, 35.81275890637943], [1.692159E12, 19.198854337152234], [1.69216062E12, 91.03713892709762], [1.6921587E12, 2.7336448598130865], [1.69216092E12, 60.228751311647436], [1.69215936E12, 39.10624417520965], [1.69216098E12, 56.10684647302902], [1.69215906E12, 22.529314616019832], [1.69216128E12, 22.482673267326675], [1.69215876E12, 5.833759590792841], [1.69216068E12, 86.04128902316208], [1.69216038E12, 96.00878048780497], [1.69216008E12, 79.61356466876973], [1.69215978E12, 62.46499567847881], [1.6921611E12, 40.70363951473133], [1.69215948E12, 45.80147662018052], [1.69215918E12, 29.20899250624481], [1.6921614E12, 10.0]], "isOverall": false, "label": "jp@gc - Stepping Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69216146E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 161.56129032258065, "minX": 1.0, "maxY": 58004.52380952381, "series": [{"data": [[2.0, 162.06639004149366], [3.0, 187.3549488054607], [4.0, 218.30421686746988], [5.0, 262.44247787610595], [6.0, 300.3342465753425], [7.0, 351.1095505617981], [8.0, 385.98648648648634], [9.0, 438.67663043478314], [10.0, 512.9964523281609], [11.0, 567.5273631840795], [12.0, 588.9065656565666], [13.0, 624.2744565217387], [14.0, 576.6559999999998], [15.0, 714.2470588235296], [16.0, 962.2930107526889], [17.0, 874.5208913649032], [18.0, 875.5921052631581], [19.0, 923.7058823529411], [20.0, 1040.091247672255], [21.0, 1178.8945312499993], [22.0, 1017.4175257731958], [23.0, 1153.359999999999], [24.0, 1204.5925925925912], [25.0, 1129.941018766756], [26.0, 1396.520325203253], [27.0, 1046.359788359788], [28.0, 1655.64480874317], [29.0, 1085.6880222841226], [30.0, 1468.1919678714885], [31.0, 1691.1536351165983], [32.0, 1904.947712418301], [33.0, 1611.8133333333328], [34.0, 1866.8240223463688], [35.0, 1584.5623268698073], [36.0, 1360.034300791557], [37.0, 2034.8923512747874], [38.0, 1624.1034482758619], [39.0, 2656.0605187319898], [40.0, 2110.7666135034556], [41.0, 2215.271232876712], [42.0, 1603.9353099730463], [43.0, 3037.578313253012], [44.0, 1544.1608040200992], [45.0, 2050.6946564885516], [46.0, 2150.6194444444427], [47.0, 2653.2397959183672], [48.0, 3116.0859598853854], [49.0, 2307.5026455026436], [50.0, 2285.386666666668], [51.0, 3366.3342696629197], [52.0, 3185.5286195286208], [53.0, 2859.4625000000005], [54.0, 2891.057306590258], [55.0, 2136.8823529411784], [56.0, 4215.519148936173], [57.0, 9056.901515151512], [58.0, 3240.58505154639], [59.0, 4579.63733333333], [60.0, 3361.7890451517374], [61.0, 3722.1145218417955], [62.0, 3614.3279445727476], [63.0, 3444.77142857143], [64.0, 3365.7521367521376], [65.0, 7171.097902097907], [66.0, 4409.5065616797965], [67.0, 4497.415422885572], [68.0, 3161.920547945205], [69.0, 2391.836158192091], [70.0, 3867.8379160636814], [71.0, 4365.773826458035], [72.0, 3734.0593471810103], [73.0, 4788.243421052627], [74.0, 3998.2206303724925], [75.0, 3768.5702247191], [76.0, 4025.2900232018524], [77.0, 6722.135593220343], [78.0, 6926.777142857143], [79.0, 58004.52380952381], [80.0, 4960.162859248337], [81.0, 4114.598944591028], [82.0, 8077.294642857138], [83.0, 4563.258928571429], [84.0, 7069.349726775957], [85.0, 8508.74170616114], [86.0, 4519.5859375], [87.0, 3375.569506726456], [88.0, 6101.026515151513], [89.0, 6854.663608562693], [90.0, 7844.8797409805775], [91.0, 4669.9218241042345], [92.0, 4680.348198970835], [93.0, 8236.994910941476], [94.0, 6694.582191780819], [95.0, 6208.546242774568], [96.0, 5621.3065476190495], [97.0, 6045.8833333333305], [98.0, 5102.988372093022], [99.0, 4902.1323076923045], [100.0, 5869.738331678256], [1.0, 161.56129032258065]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[49.81528494786913, 2977.055572426379]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 143.86666666666667, "minX": 1.69215864E12, "maxY": 256640.43333333332, "series": [{"data": [[1.69216146E12, 148677.0], [1.69215984E12, 165808.55], [1.69215954E12, 235996.48333333334], [1.69215924E12, 236221.76666666666], [1.69216086E12, 235233.78333333333], [1.69215894E12, 245802.1], [1.69216116E12, 250662.5], [1.69215864E12, 10180.016666666666], [1.69216056E12, 152183.05], [1.69216026E12, 168712.53333333333], [1.69215996E12, 233514.98333333334], [1.69215966E12, 130369.06666666667], [1.69216032E12, 202301.96666666667], [1.69216002E12, 168663.56666666668], [1.69216134E12, 241717.1], [1.69215972E12, 248285.95], [1.69215942E12, 244249.58333333334], [1.69215912E12, 256640.43333333332], [1.69216074E12, 208364.81666666668], [1.69215882E12, 255938.33333333334], [1.69216104E12, 245001.96666666667], [1.69216044E12, 182331.61666666667], [1.69216014E12, 134350.93333333332], [1.69215888E12, 253390.03333333333], [1.6921605E12, 240693.4], [1.6921608E12, 216913.18333333332], [1.6921602E12, 208597.38333333333], [1.6921599E12, 219442.8], [1.69216122E12, 255636.56666666668], [1.6921596E12, 236377.93333333332], [1.6921593E12, 252828.78333333333], [1.692159E12, 255116.06666666668], [1.69216062E12, 143262.18333333332], [1.6921587E12, 178915.5], [1.69216092E12, 196497.83333333334], [1.69215936E12, 222092.5], [1.69216098E12, 198027.56666666668], [1.69215906E12, 251815.45], [1.69216128E12, 255148.65], [1.69215876E12, 245001.23333333334], [1.69216068E12, 197478.81666666668], [1.69216038E12, 205971.41666666666], [1.69216008E12, 124243.16666666667], [1.69215978E12, 239793.66666666666], [1.6921611E12, 239962.16666666666], [1.69215948E12, 250650.98333333334], [1.69215918E12, 250499.65], [1.6921614E12, 244141.91666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69216146E12, 2040.3666666666666], [1.69215984E12, 2293.4333333333334], [1.69215954E12, 3231.8], [1.69215924E12, 3237.5333333333333], [1.69216086E12, 3220.3], [1.69215894E12, 3372.8], [1.69216116E12, 3436.1], [1.69215864E12, 143.86666666666667], [1.69216056E12, 2051.9], [1.69216026E12, 2310.733333333333], [1.69215996E12, 3174.266666666667], [1.69215966E12, 1784.2333333333333], [1.69216032E12, 2785.5666666666666], [1.69216002E12, 2319.4333333333334], [1.69216134E12, 3329.5666666666666], [1.69215972E12, 3415.8], [1.69215942E12, 3346.9], [1.69215912E12, 3516.7], [1.69216074E12, 2849.0333333333333], [1.69215882E12, 3530.9666666666667], [1.69216104E12, 3355.5], [1.69216044E12, 2466.366666666667], [1.69216014E12, 1844.6333333333334], [1.69215888E12, 3493.5666666666666], [1.6921605E12, 3280.633333333333], [1.6921608E12, 2955.5333333333333], [1.6921602E12, 2854.6666666666665], [1.6921599E12, 3004.4333333333334], [1.69216122E12, 3522.3333333333335], [1.6921596E12, 3237.5], [1.6921593E12, 3462.0333333333333], [1.692159E12, 3516.6], [1.69216062E12, 1951.0666666666666], [1.6921587E12, 2463.366666666667], [1.69216092E12, 2693.5666666666666], [1.69215936E12, 3067.6], [1.69216098E12, 2716.5666666666666], [1.69215906E12, 3482.0], [1.69216128E12, 3476.5333333333333], [1.69215876E12, 3375.6], [1.69216068E12, 2710.733333333333], [1.69216038E12, 2797.233333333333], [1.69216008E12, 1683.4666666666667], [1.69215978E12, 3277.866666666667], [1.6921611E12, 3297.9333333333334], [1.69215948E12, 3476.1666666666665], [1.69215918E12, 3444.7], [1.6921614E12, 3361.233333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69216146E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 119.98, "minX": 1.69215864E12, "maxY": 8399.794952681388, "series": [{"data": [[1.69216146E12, 492.1297602256699], [1.69215984E12, 4978.410843373498], [1.69215954E12, 2363.3065371024695], [1.69215924E12, 1735.1560283687977], [1.69216086E12, 3429.757017543855], [1.69215894E12, 827.1474850809888], [1.69216116E12, 1687.4103419516257], [1.69215864E12, 119.98], [1.69216056E12, 6882.060446780553], [1.69216026E12, 7110.137209302325], [1.69215996E12, 4028.628975265021], [1.69215966E12, 3749.7732283464575], [1.69216032E12, 4724.818455366098], [1.69216002E12, 4406.816747572818], [1.69216134E12, 1066.4391716997418], [1.69215972E12, 3422.9236453201984], [1.69215942E12, 2167.4341880341876], [1.69215912E12, 1160.9762878168442], [1.69216074E12, 4406.937062937056], [1.69215882E12, 443.0798696006521], [1.69216104E12, 2936.6930860033735], [1.69216044E12, 5689.556933483661], [1.69216014E12, 5322.1701492537295], [1.69215888E12, 574.0988467874784], [1.6921605E12, 5335.07834877844], [1.6921608E12, 4638.414084507042], [1.6921602E12, 5869.246628131021], [1.6921599E12, 3352.1150943396215], [1.69216122E12, 1641.190089358247], [1.6921596E12, 2953.653508771927], [1.6921593E12, 1653.303231151615], [1.692159E12, 919.2978723404251], [1.69216062E12, 8276.841815680884], [1.6921587E12, 174.82009345794359], [1.69216092E12, 3641.5813221406115], [1.69215936E12, 2140.561975768872], [1.69216098E12, 3716.0508298755253], [1.69215906E12, 1093.9669694467373], [1.69216128E12, 1217.117986798679], [1.69215876E12, 296.82011935208834], [1.69216068E12, 6228.640483383688], [1.69216038E12, 6136.064390243911], [1.69216008E12, 8399.794952681388], [1.69215978E12, 3229.0656871218666], [1.6921611E12, 2229.277296360486], [1.69215948E12, 2221.0935192780985], [1.69215918E12, 1481.0782681099079], [1.6921614E12, 514.7114726027397]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69216146E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 119.86, "minX": 1.69215864E12, "maxY": 4017.04951856946, "series": [{"data": [[1.69216146E12, 492.07052186177725], [1.69215984E12, 2512.326506024096], [1.69215954E12, 1873.852473498232], [1.69215924E12, 1571.5319148936187], [1.69216086E12, 2309.894736842108], [1.69215894E12, 774.8976982097174], [1.69216116E12, 1428.4979149291069], [1.69215864E12, 119.86], [1.69216056E12, 2925.3206307490095], [1.69216026E12, 2979.8860465116286], [1.69215996E12, 2422.0644876325077], [1.69215966E12, 2225.0740157480323], [1.69216032E12, 2928.370110330995], [1.69216002E12, 3031.5400485436885], [1.69216134E12, 959.6134598792052], [1.69215972E12, 1846.8653530377649], [1.69215942E12, 1795.9393162393176], [1.69215912E12, 1110.737530662305], [1.69216074E12, 3725.8251748251714], [1.69215882E12, 443.0456397718013], [1.69216104E12, 1890.8381112984841], [1.69216044E12, 3578.934611048477], [1.69216014E12, 2626.0686567164203], [1.69215888E12, 574.0700164744645], [1.6921605E12, 2892.6048862679], [1.6921608E12, 2433.9201877934256], [1.6921602E12, 3126.624277456643], [1.6921599E12, 2408.6594339622675], [1.69216122E12, 1293.1445978878976], [1.6921596E12, 2145.4219298245607], [1.6921593E12, 1452.3040596520298], [1.692159E12, 919.2553191489365], [1.69216062E12, 4017.04951856946], [1.6921587E12, 174.75467289719572], [1.69216092E12, 2522.347324239243], [1.69215936E12, 1733.8042870456636], [1.69216098E12, 2418.1286307053956], [1.69215906E12, 1043.448389760529], [1.69216128E12, 1014.4356435643568], [1.69215876E12, 296.7826086956518], [1.69216068E12, 3040.6384692849942], [1.69216038E12, 2887.5541463414656], [1.69216008E12, 3536.0425867507893], [1.69215978E12, 2263.85133967156], [1.6921611E12, 1805.168110918545], [1.69215948E12, 1665.7013945857266], [1.69215918E12, 1275.2506244795998], [1.6921614E12, 514.656678082192]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69216146E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 8.708039492242593, "minX": 1.69215864E12, "maxY": 12.521201413427546, "series": [{"data": [[1.69216146E12, 8.708039492242593], [1.69215984E12, 9.914457831325295], [1.69215954E12, 10.210247349823323], [1.69215924E12, 12.297872340425524], [1.69216086E12, 9.8798245614035], [1.69215894E12, 9.53196930946291], [1.69216116E12, 11.577147623019185], [1.69215864E12, 9.0], [1.69216056E12, 9.981603153745068], [1.69216026E12, 9.82674418604651], [1.69215996E12, 12.521201413427546], [1.69215966E12, 8.718110236220474], [1.69216032E12, 9.715145436308932], [1.69216002E12, 9.080097087378629], [1.69216134E12, 8.757549611734243], [1.69215972E12, 9.723316912972086], [1.69215942E12, 9.044444444444435], [1.69215912E12, 9.150449713818475], [1.69216074E12, 9.578421578421576], [1.69215882E12, 9.32029339853301], [1.69216104E12, 9.016863406408106], [1.69216044E12, 9.907553551296521], [1.69216014E12, 9.725373134328358], [1.69215888E12, 9.994233937397052], [1.6921605E12, 9.715248525695024], [1.6921608E12, 10.029107981220653], [1.6921602E12, 9.992292870905588], [1.6921599E12, 12.330188679245284], [1.69216122E12, 8.974817221770925], [1.6921596E12, 8.808771929824548], [1.6921593E12, 9.593206296603153], [1.692159E12, 9.273322422258595], [1.69216062E12, 10.467675378266852], [1.6921587E12, 9.007009345794385], [1.69216092E12, 9.82266526757607], [1.69215936E12, 10.144454799627209], [1.69216098E12, 9.173236514522813], [1.69215906E12, 9.601981833195719], [1.69216128E12, 9.166666666666679], [1.69215876E12, 8.907928388746816], [1.69216068E12, 9.747230614300097], [1.69216038E12, 9.839024390243885], [1.69216008E12, 10.552050473186114], [1.69215978E12, 8.971477960242007], [1.6921611E12, 9.504332755632579], [1.69215948E12, 10.005742411812971], [1.69215918E12, 9.591174021648612], [1.6921614E12, 9.099315068493164]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69216146E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 54.0, "minX": 1.69215864E12, "maxY": 58616.0, "series": [{"data": [[1.69216146E12, 7241.0], [1.69215984E12, 33953.0], [1.69215954E12, 38521.0], [1.69215924E12, 32066.0], [1.69216086E12, 34813.0], [1.69215894E12, 32198.0], [1.69216116E12, 32636.0], [1.69215864E12, 305.0], [1.69216056E12, 42800.0], [1.69216026E12, 45317.0], [1.69215996E12, 33677.0], [1.69215966E12, 55887.0], [1.69216032E12, 58568.0], [1.69216002E12, 58554.0], [1.69216134E12, 32368.0], [1.69215972E12, 58438.0], [1.69215942E12, 32612.0], [1.69215912E12, 31947.0], [1.69216074E12, 39329.0], [1.69215882E12, 7777.0], [1.69216104E12, 57000.0], [1.69216044E12, 54610.0], [1.69216014E12, 58407.0], [1.69215888E12, 7805.0], [1.6921605E12, 58530.0], [1.6921608E12, 37838.0], [1.6921602E12, 42186.0], [1.6921599E12, 57838.0], [1.69216122E12, 32131.0], [1.6921596E12, 33530.0], [1.6921593E12, 32198.0], [1.692159E12, 31676.0], [1.69216062E12, 58616.0], [1.6921587E12, 471.0], [1.69216092E12, 33980.0], [1.69215936E12, 32219.0], [1.69216098E12, 45091.0], [1.69215906E12, 32105.0], [1.69216128E12, 33446.0], [1.69215876E12, 739.0], [1.69216068E12, 58601.0], [1.69216038E12, 35277.0], [1.69216008E12, 58131.0], [1.69215978E12, 38661.0], [1.6921611E12, 33344.0], [1.69215948E12, 57433.0], [1.69215918E12, 31877.0], [1.6921614E12, 15716.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69216146E12, 606.0], [1.69215984E12, 7556.4000000000015], [1.69215954E12, 3702.8], [1.69215924E12, 3621.0], [1.69216086E12, 6735.0], [1.69215894E12, 1461.7], [1.69216116E12, 3525.5], [1.69215864E12, 220.5], [1.69216056E12, 10230.000000000004], [1.69216026E12, 7895.200000000001], [1.69215996E12, 7332.6], [1.69215966E12, 7266.199999999999], [1.69216032E12, 7738.1], [1.69216002E12, 7739.200000000003], [1.69216134E12, 1584.8000000000009], [1.69215972E12, 3470.4], [1.69215942E12, 3576.0], [1.69215912E12, 1888.7000000000019], [1.69216074E12, 10879.2], [1.69215882E12, 641.2], [1.69216104E12, 3801.7999999999997], [1.69216044E12, 8589.40000000002], [1.69216014E12, 7644.400000000001], [1.69215888E12, 1258.0], [1.6921605E12, 7517.9], [1.6921608E12, 7348.200000000001], [1.6921602E12, 7875.0], [1.6921599E12, 7445.5], [1.69216122E12, 3397.5], [1.6921596E12, 7381.599999999999], [1.6921593E12, 3395.6000000000004], [1.692159E12, 1593.5000000000002], [1.69216062E12, 15633.0], [1.6921587E12, 298.0], [1.69216092E12, 7538.0], [1.69215936E12, 3664.9], [1.69216098E12, 7397.0], [1.69215906E12, 1667.7000000000003], [1.69216128E12, 1551.3000000000004], [1.69215876E12, 477.0], [1.69216068E12, 7502.0], [1.69216038E12, 7903.6], [1.69216008E12, 7688.4], [1.69215978E12, 7308.0], [1.6921611E12, 3601.0], [1.69215948E12, 3474.0], [1.69215918E12, 3393.2], [1.6921614E12, 654.3000000000004]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69216146E12, 3466.3999999999996], [1.69215984E12, 31782.54], [1.69215954E12, 31700.28], [1.69215924E12, 15969.16], [1.69216086E12, 32097.399999999998], [1.69215894E12, 7538.129999999999], [1.69216116E12, 15770.199999999993], [1.69215864E12, 305.0], [1.69216056E12, 29721.660000000007], [1.69216026E12, 33540.72], [1.69215996E12, 31924.640000000003], [1.69215966E12, 31469.79999999996], [1.69216032E12, 32128.509999999995], [1.69216002E12, 32532.439999999995], [1.69216134E12, 7791.1], [1.69215972E12, 31980.72], [1.69215942E12, 22260.959999998537], [1.69215912E12, 13737.599999999864], [1.69216074E12, 32876.08], [1.69215882E12, 2938.400000000035], [1.69216104E12, 16188.0], [1.69216044E12, 32139.1], [1.69216014E12, 31962.620000000006], [1.69215888E12, 3739.5999999999985], [1.6921605E12, 32157.18], [1.6921608E12, 32120.440000000002], [1.6921602E12, 32225.699999999993], [1.6921599E12, 31687.45], [1.69216122E12, 15772.5], [1.6921596E12, 18721.600000000017], [1.6921593E12, 15708.800000000001], [1.692159E12, 7682.01], [1.69216062E12, 45074.060000000005], [1.6921587E12, 418.00999999999965], [1.69216092E12, 31874.63], [1.69215936E12, 16004.319999999992], [1.69216098E12, 31886.3], [1.69215906E12, 15587.250000000002], [1.69216128E12, 15605.58000000001], [1.69215876E12, 618.56], [1.69216068E12, 45304.299999998555], [1.69216038E12, 32166.079999999994], [1.69216008E12, 35234.31999999988], [1.69215978E12, 31757.199999999993], [1.6921611E12, 31630.269999999997], [1.69215948E12, 31758.10000000001], [1.69215918E12, 15653.0], [1.6921614E12, 3474.269999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69216146E12, 1363.5], [1.69215984E12, 15652.8], [1.69215954E12, 7682.399999999997], [1.69215924E12, 7551.4], [1.69216086E12, 9005.0], [1.69215894E12, 3152.7999999999993], [1.69216116E12, 7195.5], [1.69215864E12, 256.29999999999984], [1.69216056E12, 15942.6], [1.69216026E12, 15873.199999999999], [1.69215996E12, 8642.799999999988], [1.69215966E12, 9937.3], [1.69216032E12, 15838.249999999998], [1.69216002E12, 15849.5], [1.69216134E12, 3502.0], [1.69215972E12, 7617.799999999998], [1.69215942E12, 7621.999999999998], [1.69215912E12, 3587.7999999999975], [1.69216074E12, 16515.449999999964], [1.69215882E12, 1269.7999999999997], [1.69216104E12, 7673.9], [1.69216044E12, 16057.799999999996], [1.69216014E12, 15710.499999999998], [1.69215888E12, 1483.25], [1.6921605E12, 15804.550000000003], [1.6921608E12, 10647.599999999935], [1.6921602E12, 15865.849999999999], [1.6921599E12, 15607.75], [1.69216122E12, 3878.25], [1.6921596E12, 8132.800000000001], [1.6921593E12, 7321.399999999998], [1.692159E12, 3437.0999999999995], [1.69216062E12, 31814.2], [1.6921587E12, 337.15], [1.69216092E12, 15722.699999999999], [1.69215936E12, 7772.3], [1.69216098E12, 10516.25], [1.69215906E12, 3505.4000000000005], [1.69216128E12, 3508.3999999999996], [1.69215876E12, 530.0], [1.69216068E12, 15878.849999999999], [1.69216038E12, 16030.7], [1.69216008E12, 31733.69999999999], [1.69215978E12, 7948.0], [1.6921611E12, 7682.299999999994], [1.69215948E12, 7490.55], [1.69215918E12, 3748.199999999999], [1.6921614E12, 1397.1999999999998]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.69216146E12, 63.0], [1.69215984E12, 66.0], [1.69215954E12, 69.0], [1.69215924E12, 59.0], [1.69216086E12, 76.0], [1.69215894E12, 54.0], [1.69216116E12, 62.0], [1.69215864E12, 55.0], [1.69216056E12, 68.0], [1.69216026E12, 63.0], [1.69215996E12, 63.0], [1.69215966E12, 65.0], [1.69216032E12, 70.0], [1.69216002E12, 65.0], [1.69216134E12, 58.0], [1.69215972E12, 63.0], [1.69215942E12, 61.0], [1.69215912E12, 76.0], [1.69216074E12, 64.0], [1.69215882E12, 59.0], [1.69216104E12, 71.0], [1.69216044E12, 71.0], [1.69216014E12, 67.0], [1.69215888E12, 64.0], [1.6921605E12, 66.0], [1.6921608E12, 61.0], [1.6921602E12, 68.0], [1.6921599E12, 70.0], [1.69216122E12, 63.0], [1.6921596E12, 66.0], [1.6921593E12, 63.0], [1.692159E12, 67.0], [1.69216062E12, 68.0], [1.6921587E12, 56.0], [1.69216092E12, 68.0], [1.69215936E12, 68.0], [1.69216098E12, 54.0], [1.69215906E12, 65.0], [1.69216128E12, 61.0], [1.69215876E12, 57.0], [1.69216068E12, 61.0], [1.69216038E12, 61.0], [1.69216008E12, 62.0], [1.69215978E12, 71.0], [1.6921611E12, 66.0], [1.69215948E12, 64.0], [1.69215918E12, 66.0], [1.6921614E12, 59.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69216146E12, 354.0], [1.69215984E12, 581.0], [1.69215954E12, 543.0], [1.69215924E12, 508.0], [1.69216086E12, 555.0], [1.69215894E12, 406.5], [1.69216116E12, 451.0], [1.69215864E12, 77.0], [1.69216056E12, 579.0], [1.69216026E12, 604.0], [1.69215996E12, 644.0], [1.69215966E12, 497.5], [1.69216032E12, 685.5], [1.69216002E12, 676.0], [1.69216134E12, 434.0], [1.69215972E12, 477.0], [1.69215942E12, 538.0], [1.69215912E12, 442.5], [1.69216074E12, 1194.0], [1.69215882E12, 351.0], [1.69216104E12, 567.0], [1.69216044E12, 1233.0], [1.69216014E12, 617.0], [1.69215888E12, 372.0], [1.6921605E12, 616.0], [1.6921608E12, 631.0], [1.6921602E12, 756.0], [1.6921599E12, 558.0], [1.69216122E12, 443.5], [1.6921596E12, 546.0], [1.6921593E12, 491.0], [1.692159E12, 418.5], [1.69216062E12, 710.5], [1.6921587E12, 187.0], [1.69216092E12, 528.0], [1.69215936E12, 504.0], [1.69216098E12, 483.0], [1.69215906E12, 428.0], [1.69216128E12, 419.5], [1.69215876E12, 290.0], [1.69216068E12, 563.5], [1.69216038E12, 711.5], [1.69216008E12, 553.0], [1.69215978E12, 586.0], [1.6921611E12, 490.5], [1.69215948E12, 449.0], [1.69215918E12, 468.0], [1.6921614E12, 375.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69216146E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 197.5, "minX": 1.0, "maxY": 65588.5, "series": [{"data": [[32.0, 1334.0], [2.0, 2634.0], [33.0, 382.0], [34.0, 487.0], [36.0, 305.5], [40.0, 680.0], [42.0, 9707.0], [3.0, 8695.5], [4.0, 2274.0], [5.0, 975.0], [6.0, 11538.5], [7.0, 1730.0], [8.0, 197.5], [9.0, 566.0], [10.0, 868.0], [11.0, 732.0], [12.0, 705.5], [13.0, 654.5], [14.0, 604.5], [15.0, 591.0], [16.0, 541.0], [1.0, 5192.5], [17.0, 496.0], [18.0, 478.0], [19.0, 451.0], [20.0, 447.0], [21.0, 451.0], [22.0, 422.0], [23.0, 440.0], [24.0, 446.0], [25.0, 452.0], [26.0, 481.0], [27.0, 440.0], [28.0, 466.5], [29.0, 426.5], [30.0, 449.0], [31.0, 540.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 65050.0], [32.0, 65588.5], [33.0, 60119.0], [34.0, 61571.0], [3.0, 65052.0], [4.0, 62569.5], [5.0, 65050.5], [6.0, 65046.5], [7.0, 60411.0], [8.0, 62933.0], [9.0, 65068.5], [10.0, 62903.0], [11.0, 63549.5], [12.0, 60781.0], [13.0, 61503.0], [14.0, 61403.5], [15.0, 62372.5], [16.0, 61639.0], [1.0, 65057.0], [17.0, 61006.5], [18.0, 61399.0], [19.0, 60510.5], [20.0, 61525.0], [21.0, 61281.0], [22.0, 61547.0], [23.0, 61335.5], [24.0, 60610.0], [25.0, 60578.0], [26.0, 60506.0], [27.0, 62161.0], [28.0, 60252.5], [29.0, 61140.0], [30.0, 60352.0], [31.0, 61129.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 42.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 11538.5, "series": [{"data": [[32.0, 1334.0], [2.0, 2634.0], [33.0, 382.0], [34.0, 487.0], [36.0, 305.5], [40.0, 680.0], [42.0, 9707.0], [3.0, 8695.5], [4.0, 2274.0], [5.0, 975.0], [6.0, 11538.5], [7.0, 1730.0], [8.0, 197.0], [9.0, 566.0], [10.0, 868.0], [11.0, 732.0], [12.0, 705.5], [13.0, 654.5], [14.0, 604.5], [15.0, 591.0], [16.0, 540.5], [1.0, 5192.5], [17.0, 496.0], [18.0, 478.0], [19.0, 451.0], [20.0, 447.0], [21.0, 451.0], [22.0, 422.0], [23.0, 440.0], [24.0, 446.0], [25.0, 452.0], [26.0, 481.0], [27.0, 440.0], [28.0, 466.0], [29.0, 426.5], [30.0, 449.0], [31.0, 540.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 0.0], [32.0, 0.0], [33.0, 0.0], [34.0, 0.0], [3.0, 0.0], [4.0, 0.0], [5.0, 0.0], [6.0, 0.0], [7.0, 0.0], [8.0, 0.0], [9.0, 0.0], [10.0, 0.0], [11.0, 0.0], [12.0, 0.0], [13.0, 0.0], [14.0, 0.0], [15.0, 0.0], [16.0, 0.0], [1.0, 0.0], [17.0, 0.0], [18.0, 0.0], [19.0, 0.0], [20.0, 0.0], [21.0, 0.0], [22.0, 0.0], [23.0, 0.0], [24.0, 0.0], [25.0, 0.0], [26.0, 0.0], [27.0, 0.0], [28.0, 0.0], [29.0, 0.0], [30.0, 0.0], [31.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 42.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.85, "minX": 1.69215864E12, "maxY": 20.5, "series": [{"data": [[1.69216146E12, 11.65], [1.69215984E12, 13.9], [1.69215954E12, 18.916666666666668], [1.69215924E12, 18.85], [1.69216086E12, 18.85], [1.69215894E12, 19.616666666666667], [1.69216116E12, 19.833333333333332], [1.69215864E12, 0.85], [1.69216056E12, 12.566666666666666], [1.69216026E12, 14.383333333333333], [1.69215996E12, 18.916666666666668], [1.69215966E12, 10.65], [1.69216032E12, 16.666666666666668], [1.69216002E12, 13.8], [1.69216134E12, 19.15], [1.69215972E12, 20.35], [1.69215942E12, 19.55], [1.69215912E12, 20.45], [1.69216074E12, 16.616666666666667], [1.69215882E12, 20.5], [1.69216104E12, 19.633333333333333], [1.69216044E12, 14.816666666666666], [1.69216014E12, 11.216666666666667], [1.69215888E12, 20.283333333333335], [1.6921605E12, 19.783333333333335], [1.6921608E12, 17.65], [1.6921602E12, 17.366666666666667], [1.6921599E12, 17.716666666666665], [1.69216122E12, 20.5], [1.6921596E12, 19.05], [1.6921593E12, 20.183333333333334], [1.692159E12, 20.416666666666668], [1.69216062E12, 12.066666666666666], [1.6921587E12, 14.316666666666666], [1.69216092E12, 15.866666666666667], [1.69215936E12, 17.933333333333334], [1.69216098E12, 15.95], [1.69215906E12, 20.233333333333334], [1.69216128E12, 20.033333333333335], [1.69215876E12, 19.616666666666667], [1.69216068E12, 16.383333333333333], [1.69216038E12, 17.15], [1.69216008E12, 10.616666666666667], [1.69215978E12, 19.333333333333332], [1.6921611E12, 19.15], [1.69215948E12, 20.383333333333333], [1.69215918E12, 20.066666666666666], [1.6921614E12, 19.466666666666665]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69216146E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.69215864E12, "maxY": 20.45, "series": [{"data": [[1.69216146E12, 11.816666666666666], [1.69215984E12, 13.283333333333333], [1.69215954E12, 18.716666666666665], [1.69215924E12, 18.75], [1.69216086E12, 18.65], [1.69215894E12, 19.533333333333335], [1.69216116E12, 19.9], [1.69215864E12, 0.8333333333333334], [1.69216056E12, 11.883333333333333], [1.69216026E12, 13.383333333333333], [1.69215996E12, 18.383333333333333], [1.69215966E12, 10.333333333333334], [1.69216032E12, 16.133333333333333], [1.69216002E12, 13.433333333333334], [1.69216134E12, 19.283333333333335], [1.69215972E12, 19.783333333333335], [1.69215942E12, 19.383333333333333], [1.69215912E12, 20.366666666666667], [1.69216074E12, 16.5], [1.69215882E12, 20.45], [1.69216104E12, 19.433333333333334], [1.69216044E12, 14.283333333333333], [1.69216014E12, 10.683333333333334], [1.69215888E12, 20.233333333333334], [1.6921605E12, 19.0], [1.6921608E12, 17.116666666666667], [1.6921602E12, 16.533333333333335], [1.6921599E12, 17.4], [1.69216122E12, 20.4], [1.6921596E12, 18.75], [1.6921593E12, 20.05], [1.692159E12, 20.366666666666667], [1.69216062E12, 11.3], [1.6921587E12, 14.266666666666667], [1.69216092E12, 15.6], [1.69215936E12, 17.766666666666666], [1.69216098E12, 15.733333333333333], [1.69215906E12, 20.166666666666668], [1.69216128E12, 20.133333333333333], [1.69215876E12, 19.55], [1.69216068E12, 15.7], [1.69216038E12, 16.2], [1.69216008E12, 9.75], [1.69215978E12, 18.983333333333334], [1.6921611E12, 19.1], [1.69215948E12, 20.133333333333333], [1.69215918E12, 19.95], [1.6921614E12, 19.466666666666665]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.69215984E12, 0.55], [1.69215954E12, 0.15], [1.69215924E12, 0.05], [1.69216086E12, 0.35], [1.69215894E12, 0.016666666666666666], [1.69216116E12, 0.08333333333333333], [1.69216056E12, 0.8], [1.69216026E12, 0.95], [1.69215996E12, 0.48333333333333334], [1.69215966E12, 0.25], [1.69216032E12, 0.48333333333333334], [1.69216002E12, 0.3], [1.69216134E12, 0.03333333333333333], [1.69215972E12, 0.5166666666666667], [1.69215942E12, 0.11666666666666667], [1.69215912E12, 0.016666666666666666], [1.69216074E12, 0.18333333333333332], [1.69216104E12, 0.3333333333333333], [1.69216044E12, 0.5], [1.69216014E12, 0.48333333333333334], [1.6921605E12, 0.7833333333333333], [1.6921608E12, 0.6333333333333333], [1.6921602E12, 0.7666666666666667], [1.6921599E12, 0.26666666666666666], [1.69216122E12, 0.11666666666666667], [1.6921596E12, 0.25], [1.6921593E12, 0.06666666666666667], [1.69216062E12, 0.8166666666666667], [1.69216092E12, 0.2833333333333333], [1.69215936E12, 0.11666666666666667], [1.69216098E12, 0.3333333333333333], [1.69215906E12, 0.016666666666666666], [1.69216128E12, 0.06666666666666667], [1.69216068E12, 0.85], [1.69216038E12, 0.8833333333333333], [1.69216008E12, 0.8166666666666667], [1.69215978E12, 0.3], [1.6921611E12, 0.13333333333333333], [1.69215948E12, 0.18333333333333332], [1.69215918E12, 0.06666666666666667]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69216146E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.69215864E12, "maxY": 20.45, "series": [{"data": [[1.69216146E12, 11.816666666666666], [1.69215984E12, 13.283333333333333], [1.69215954E12, 18.716666666666665], [1.69215924E12, 18.75], [1.69216086E12, 18.65], [1.69215894E12, 19.533333333333335], [1.69216116E12, 19.9], [1.69215864E12, 0.8333333333333334], [1.69216056E12, 11.883333333333333], [1.69216026E12, 13.383333333333333], [1.69215996E12, 18.383333333333333], [1.69215966E12, 10.333333333333334], [1.69216032E12, 16.133333333333333], [1.69216002E12, 13.433333333333334], [1.69216134E12, 19.283333333333335], [1.69215972E12, 19.783333333333335], [1.69215942E12, 19.383333333333333], [1.69215912E12, 20.366666666666667], [1.69216074E12, 16.5], [1.69215882E12, 20.45], [1.69216104E12, 19.433333333333334], [1.69216044E12, 14.283333333333333], [1.69216014E12, 10.683333333333334], [1.69215888E12, 20.233333333333334], [1.6921605E12, 19.0], [1.6921608E12, 17.116666666666667], [1.6921602E12, 16.533333333333335], [1.6921599E12, 17.4], [1.69216122E12, 20.4], [1.6921596E12, 18.75], [1.6921593E12, 20.05], [1.692159E12, 20.366666666666667], [1.69216062E12, 11.3], [1.6921587E12, 14.266666666666667], [1.69216092E12, 15.6], [1.69215936E12, 17.766666666666666], [1.69216098E12, 15.733333333333333], [1.69215906E12, 20.166666666666668], [1.69216128E12, 20.133333333333333], [1.69215876E12, 19.55], [1.69216068E12, 15.7], [1.69216038E12, 16.2], [1.69216008E12, 9.75], [1.69215978E12, 18.983333333333334], [1.6921611E12, 19.1], [1.69215948E12, 20.133333333333333], [1.69215918E12, 19.95], [1.6921614E12, 19.466666666666665]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.69215984E12, 0.55], [1.69215954E12, 0.15], [1.69215924E12, 0.05], [1.69216086E12, 0.35], [1.69215894E12, 0.016666666666666666], [1.69216116E12, 0.08333333333333333], [1.69216056E12, 0.8], [1.69216026E12, 0.95], [1.69215996E12, 0.48333333333333334], [1.69215966E12, 0.25], [1.69216032E12, 0.48333333333333334], [1.69216002E12, 0.3], [1.69216134E12, 0.03333333333333333], [1.69215972E12, 0.5166666666666667], [1.69215942E12, 0.11666666666666667], [1.69215912E12, 0.016666666666666666], [1.69216074E12, 0.18333333333333332], [1.69216104E12, 0.3333333333333333], [1.69216044E12, 0.5], [1.69216014E12, 0.48333333333333334], [1.6921605E12, 0.7833333333333333], [1.6921608E12, 0.6333333333333333], [1.6921602E12, 0.7666666666666667], [1.6921599E12, 0.26666666666666666], [1.69216122E12, 0.11666666666666667], [1.6921596E12, 0.25], [1.6921593E12, 0.06666666666666667], [1.69216062E12, 0.8166666666666667], [1.69216092E12, 0.2833333333333333], [1.69215936E12, 0.11666666666666667], [1.69216098E12, 0.3333333333333333], [1.69215906E12, 0.016666666666666666], [1.69216128E12, 0.06666666666666667], [1.69216068E12, 0.85], [1.69216038E12, 0.8833333333333333], [1.69216008E12, 0.8166666666666667], [1.69215978E12, 0.3], [1.6921611E12, 0.13333333333333333], [1.69215948E12, 0.18333333333333332], [1.69215918E12, 0.06666666666666667]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69216146E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.69215864E12, "maxY": 20.45, "series": [{"data": [[1.69216146E12, 11.816666666666666], [1.69215984E12, 13.283333333333333], [1.69215954E12, 18.716666666666665], [1.69215924E12, 18.75], [1.69216086E12, 18.65], [1.69215894E12, 19.533333333333335], [1.69216116E12, 19.9], [1.69215864E12, 0.8333333333333334], [1.69216056E12, 11.883333333333333], [1.69216026E12, 13.383333333333333], [1.69215996E12, 18.383333333333333], [1.69215966E12, 10.333333333333334], [1.69216032E12, 16.133333333333333], [1.69216002E12, 13.433333333333334], [1.69216134E12, 19.283333333333335], [1.69215972E12, 19.783333333333335], [1.69215942E12, 19.383333333333333], [1.69215912E12, 20.366666666666667], [1.69216074E12, 16.5], [1.69215882E12, 20.45], [1.69216104E12, 19.433333333333334], [1.69216044E12, 14.283333333333333], [1.69216014E12, 10.683333333333334], [1.69215888E12, 20.233333333333334], [1.6921605E12, 19.0], [1.6921608E12, 17.116666666666667], [1.6921602E12, 16.533333333333335], [1.6921599E12, 17.4], [1.69216122E12, 20.4], [1.6921596E12, 18.75], [1.6921593E12, 20.05], [1.692159E12, 20.366666666666667], [1.69216062E12, 11.3], [1.6921587E12, 14.266666666666667], [1.69216092E12, 15.6], [1.69215936E12, 17.766666666666666], [1.69216098E12, 15.733333333333333], [1.69215906E12, 20.166666666666668], [1.69216128E12, 20.133333333333333], [1.69215876E12, 19.55], [1.69216068E12, 15.7], [1.69216038E12, 16.2], [1.69216008E12, 9.75], [1.69215978E12, 18.983333333333334], [1.6921611E12, 19.1], [1.69215948E12, 20.133333333333333], [1.69215918E12, 19.95], [1.6921614E12, 19.466666666666665]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.69215984E12, 0.55], [1.69215954E12, 0.15], [1.69215924E12, 0.05], [1.69216086E12, 0.35], [1.69215894E12, 0.016666666666666666], [1.69216116E12, 0.08333333333333333], [1.69216056E12, 0.8], [1.69216026E12, 0.95], [1.69215996E12, 0.48333333333333334], [1.69215966E12, 0.25], [1.69216032E12, 0.48333333333333334], [1.69216002E12, 0.3], [1.69216134E12, 0.03333333333333333], [1.69215972E12, 0.5166666666666667], [1.69215942E12, 0.11666666666666667], [1.69215912E12, 0.016666666666666666], [1.69216074E12, 0.18333333333333332], [1.69216104E12, 0.3333333333333333], [1.69216044E12, 0.5], [1.69216014E12, 0.48333333333333334], [1.6921605E12, 0.7833333333333333], [1.6921608E12, 0.6333333333333333], [1.6921602E12, 0.7666666666666667], [1.6921599E12, 0.26666666666666666], [1.69216122E12, 0.11666666666666667], [1.6921596E12, 0.25], [1.6921593E12, 0.06666666666666667], [1.69216062E12, 0.8166666666666667], [1.69216092E12, 0.2833333333333333], [1.69215936E12, 0.11666666666666667], [1.69216098E12, 0.3333333333333333], [1.69215906E12, 0.016666666666666666], [1.69216128E12, 0.06666666666666667], [1.69216068E12, 0.85], [1.69216038E12, 0.8833333333333333], [1.69216008E12, 0.8166666666666667], [1.69215978E12, 0.3], [1.6921611E12, 0.13333333333333333], [1.69215948E12, 0.18333333333333332], [1.69215918E12, 0.06666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69216146E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

