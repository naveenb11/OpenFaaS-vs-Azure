/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 23.0, "minX": 0.0, "maxY": 31648.0, "series": [{"data": [[0.0, 23.0], [0.1, 34.0], [0.2, 36.0], [0.3, 38.0], [0.4, 39.0], [0.5, 40.0], [0.6, 40.0], [0.7, 41.0], [0.8, 42.0], [0.9, 43.0], [1.0, 44.0], [1.1, 44.0], [1.2, 45.0], [1.3, 45.0], [1.4, 46.0], [1.5, 47.0], [1.6, 47.0], [1.7, 48.0], [1.8, 48.0], [1.9, 49.0], [2.0, 49.0], [2.1, 50.0], [2.2, 50.0], [2.3, 51.0], [2.4, 51.0], [2.5, 52.0], [2.6, 52.0], [2.7, 52.0], [2.8, 53.0], [2.9, 53.0], [3.0, 54.0], [3.1, 54.0], [3.2, 54.0], [3.3, 55.0], [3.4, 55.0], [3.5, 56.0], [3.6, 56.0], [3.7, 56.0], [3.8, 57.0], [3.9, 57.0], [4.0, 57.0], [4.1, 58.0], [4.2, 58.0], [4.3, 58.0], [4.4, 59.0], [4.5, 59.0], [4.6, 59.0], [4.7, 60.0], [4.8, 60.0], [4.9, 60.0], [5.0, 61.0], [5.1, 61.0], [5.2, 61.0], [5.3, 62.0], [5.4, 62.0], [5.5, 62.0], [5.6, 63.0], [5.7, 63.0], [5.8, 63.0], [5.9, 64.0], [6.0, 64.0], [6.1, 64.0], [6.2, 64.0], [6.3, 65.0], [6.4, 65.0], [6.5, 65.0], [6.6, 66.0], [6.7, 66.0], [6.8, 66.0], [6.9, 67.0], [7.0, 67.0], [7.1, 67.0], [7.2, 67.0], [7.3, 68.0], [7.4, 68.0], [7.5, 68.0], [7.6, 69.0], [7.7, 69.0], [7.8, 69.0], [7.9, 69.0], [8.0, 70.0], [8.1, 70.0], [8.2, 70.0], [8.3, 70.0], [8.4, 71.0], [8.5, 71.0], [8.6, 71.0], [8.7, 71.0], [8.8, 72.0], [8.9, 72.0], [9.0, 72.0], [9.1, 73.0], [9.2, 73.0], [9.3, 73.0], [9.4, 73.0], [9.5, 73.0], [9.6, 74.0], [9.7, 74.0], [9.8, 74.0], [9.9, 74.0], [10.0, 75.0], [10.1, 75.0], [10.2, 75.0], [10.3, 75.0], [10.4, 76.0], [10.5, 76.0], [10.6, 76.0], [10.7, 76.0], [10.8, 77.0], [10.9, 77.0], [11.0, 77.0], [11.1, 77.0], [11.2, 78.0], [11.3, 78.0], [11.4, 78.0], [11.5, 78.0], [11.6, 79.0], [11.7, 79.0], [11.8, 79.0], [11.9, 79.0], [12.0, 79.0], [12.1, 80.0], [12.2, 80.0], [12.3, 80.0], [12.4, 80.0], [12.5, 81.0], [12.6, 81.0], [12.7, 81.0], [12.8, 81.0], [12.9, 81.0], [13.0, 82.0], [13.1, 82.0], [13.2, 82.0], [13.3, 82.0], [13.4, 83.0], [13.5, 83.0], [13.6, 83.0], [13.7, 83.0], [13.8, 83.0], [13.9, 84.0], [14.0, 84.0], [14.1, 84.0], [14.2, 84.0], [14.3, 84.0], [14.4, 85.0], [14.5, 85.0], [14.6, 85.0], [14.7, 85.0], [14.8, 86.0], [14.9, 86.0], [15.0, 86.0], [15.1, 86.0], [15.2, 86.0], [15.3, 87.0], [15.4, 87.0], [15.5, 87.0], [15.6, 87.0], [15.7, 87.0], [15.8, 88.0], [15.9, 88.0], [16.0, 88.0], [16.1, 88.0], [16.2, 88.0], [16.3, 89.0], [16.4, 89.0], [16.5, 89.0], [16.6, 89.0], [16.7, 89.0], [16.8, 90.0], [16.9, 90.0], [17.0, 90.0], [17.1, 90.0], [17.2, 90.0], [17.3, 91.0], [17.4, 91.0], [17.5, 91.0], [17.6, 91.0], [17.7, 91.0], [17.8, 92.0], [17.9, 92.0], [18.0, 92.0], [18.1, 92.0], [18.2, 92.0], [18.3, 93.0], [18.4, 93.0], [18.5, 93.0], [18.6, 93.0], [18.7, 93.0], [18.8, 94.0], [18.9, 94.0], [19.0, 94.0], [19.1, 94.0], [19.2, 94.0], [19.3, 95.0], [19.4, 95.0], [19.5, 95.0], [19.6, 95.0], [19.7, 95.0], [19.8, 96.0], [19.9, 96.0], [20.0, 96.0], [20.1, 96.0], [20.2, 96.0], [20.3, 97.0], [20.4, 97.0], [20.5, 97.0], [20.6, 97.0], [20.7, 97.0], [20.8, 98.0], [20.9, 98.0], [21.0, 98.0], [21.1, 98.0], [21.2, 98.0], [21.3, 98.0], [21.4, 99.0], [21.5, 99.0], [21.6, 99.0], [21.7, 99.0], [21.8, 99.0], [21.9, 100.0], [22.0, 100.0], [22.1, 100.0], [22.2, 100.0], [22.3, 100.0], [22.4, 101.0], [22.5, 101.0], [22.6, 101.0], [22.7, 101.0], [22.8, 101.0], [22.9, 102.0], [23.0, 102.0], [23.1, 102.0], [23.2, 102.0], [23.3, 102.0], [23.4, 102.0], [23.5, 103.0], [23.6, 103.0], [23.7, 103.0], [23.8, 103.0], [23.9, 103.0], [24.0, 104.0], [24.1, 104.0], [24.2, 104.0], [24.3, 104.0], [24.4, 104.0], [24.5, 104.0], [24.6, 105.0], [24.7, 105.0], [24.8, 105.0], [24.9, 105.0], [25.0, 105.0], [25.1, 106.0], [25.2, 106.0], [25.3, 106.0], [25.4, 106.0], [25.5, 106.0], [25.6, 106.0], [25.7, 107.0], [25.8, 107.0], [25.9, 107.0], [26.0, 107.0], [26.1, 107.0], [26.2, 108.0], [26.3, 108.0], [26.4, 108.0], [26.5, 108.0], [26.6, 108.0], [26.7, 108.0], [26.8, 109.0], [26.9, 109.0], [27.0, 109.0], [27.1, 109.0], [27.2, 109.0], [27.3, 110.0], [27.4, 110.0], [27.5, 110.0], [27.6, 110.0], [27.7, 110.0], [27.8, 111.0], [27.9, 111.0], [28.0, 111.0], [28.1, 111.0], [28.2, 111.0], [28.3, 111.0], [28.4, 112.0], [28.5, 112.0], [28.6, 112.0], [28.7, 112.0], [28.8, 112.0], [28.9, 112.0], [29.0, 113.0], [29.1, 113.0], [29.2, 113.0], [29.3, 113.0], [29.4, 113.0], [29.5, 114.0], [29.6, 114.0], [29.7, 114.0], [29.8, 114.0], [29.9, 114.0], [30.0, 115.0], [30.1, 115.0], [30.2, 115.0], [30.3, 115.0], [30.4, 115.0], [30.5, 115.0], [30.6, 116.0], [30.7, 116.0], [30.8, 116.0], [30.9, 116.0], [31.0, 116.0], [31.1, 116.0], [31.2, 117.0], [31.3, 117.0], [31.4, 117.0], [31.5, 117.0], [31.6, 117.0], [31.7, 118.0], [31.8, 118.0], [31.9, 118.0], [32.0, 118.0], [32.1, 118.0], [32.2, 118.0], [32.3, 119.0], [32.4, 119.0], [32.5, 119.0], [32.6, 119.0], [32.7, 119.0], [32.8, 119.0], [32.9, 120.0], [33.0, 120.0], [33.1, 120.0], [33.2, 120.0], [33.3, 120.0], [33.4, 121.0], [33.5, 121.0], [33.6, 121.0], [33.7, 121.0], [33.8, 121.0], [33.9, 121.0], [34.0, 122.0], [34.1, 122.0], [34.2, 122.0], [34.3, 122.0], [34.4, 122.0], [34.5, 123.0], [34.6, 123.0], [34.7, 123.0], [34.8, 123.0], [34.9, 123.0], [35.0, 123.0], [35.1, 124.0], [35.2, 124.0], [35.3, 124.0], [35.4, 124.0], [35.5, 124.0], [35.6, 125.0], [35.7, 125.0], [35.8, 125.0], [35.9, 125.0], [36.0, 125.0], [36.1, 126.0], [36.2, 126.0], [36.3, 126.0], [36.4, 126.0], [36.5, 126.0], [36.6, 126.0], [36.7, 127.0], [36.8, 127.0], [36.9, 127.0], [37.0, 127.0], [37.1, 127.0], [37.2, 128.0], [37.3, 128.0], [37.4, 128.0], [37.5, 128.0], [37.6, 128.0], [37.7, 128.0], [37.8, 129.0], [37.9, 129.0], [38.0, 129.0], [38.1, 129.0], [38.2, 129.0], [38.3, 130.0], [38.4, 130.0], [38.5, 130.0], [38.6, 130.0], [38.7, 130.0], [38.8, 131.0], [38.9, 131.0], [39.0, 131.0], [39.1, 131.0], [39.2, 131.0], [39.3, 131.0], [39.4, 132.0], [39.5, 132.0], [39.6, 132.0], [39.7, 132.0], [39.8, 132.0], [39.9, 133.0], [40.0, 133.0], [40.1, 133.0], [40.2, 133.0], [40.3, 133.0], [40.4, 134.0], [40.5, 134.0], [40.6, 134.0], [40.7, 134.0], [40.8, 134.0], [40.9, 134.0], [41.0, 135.0], [41.1, 135.0], [41.2, 135.0], [41.3, 135.0], [41.4, 135.0], [41.5, 136.0], [41.6, 136.0], [41.7, 136.0], [41.8, 136.0], [41.9, 136.0], [42.0, 137.0], [42.1, 137.0], [42.2, 137.0], [42.3, 137.0], [42.4, 137.0], [42.5, 138.0], [42.6, 138.0], [42.7, 138.0], [42.8, 138.0], [42.9, 138.0], [43.0, 139.0], [43.1, 139.0], [43.2, 139.0], [43.3, 139.0], [43.4, 139.0], [43.5, 139.0], [43.6, 140.0], [43.7, 140.0], [43.8, 140.0], [43.9, 140.0], [44.0, 140.0], [44.1, 141.0], [44.2, 141.0], [44.3, 141.0], [44.4, 141.0], [44.5, 141.0], [44.6, 142.0], [44.7, 142.0], [44.8, 142.0], [44.9, 142.0], [45.0, 142.0], [45.1, 143.0], [45.2, 143.0], [45.3, 143.0], [45.4, 143.0], [45.5, 143.0], [45.6, 144.0], [45.7, 144.0], [45.8, 144.0], [45.9, 144.0], [46.0, 144.0], [46.1, 145.0], [46.2, 145.0], [46.3, 145.0], [46.4, 145.0], [46.5, 145.0], [46.6, 146.0], [46.7, 146.0], [46.8, 146.0], [46.9, 146.0], [47.0, 146.0], [47.1, 147.0], [47.2, 147.0], [47.3, 147.0], [47.4, 147.0], [47.5, 147.0], [47.6, 148.0], [47.7, 148.0], [47.8, 148.0], [47.9, 148.0], [48.0, 148.0], [48.1, 149.0], [48.2, 149.0], [48.3, 149.0], [48.4, 149.0], [48.5, 150.0], [48.6, 150.0], [48.7, 150.0], [48.8, 150.0], [48.9, 150.0], [49.0, 151.0], [49.1, 151.0], [49.2, 151.0], [49.3, 151.0], [49.4, 151.0], [49.5, 152.0], [49.6, 152.0], [49.7, 152.0], [49.8, 152.0], [49.9, 152.0], [50.0, 153.0], [50.1, 153.0], [50.2, 153.0], [50.3, 153.0], [50.4, 153.0], [50.5, 154.0], [50.6, 154.0], [50.7, 154.0], [50.8, 154.0], [50.9, 155.0], [51.0, 155.0], [51.1, 155.0], [51.2, 155.0], [51.3, 155.0], [51.4, 156.0], [51.5, 156.0], [51.6, 156.0], [51.7, 156.0], [51.8, 157.0], [51.9, 157.0], [52.0, 157.0], [52.1, 157.0], [52.2, 158.0], [52.3, 158.0], [52.4, 158.0], [52.5, 158.0], [52.6, 158.0], [52.7, 159.0], [52.8, 159.0], [52.9, 159.0], [53.0, 159.0], [53.1, 159.0], [53.2, 160.0], [53.3, 160.0], [53.4, 160.0], [53.5, 160.0], [53.6, 161.0], [53.7, 161.0], [53.8, 161.0], [53.9, 161.0], [54.0, 161.0], [54.1, 162.0], [54.2, 162.0], [54.3, 162.0], [54.4, 162.0], [54.5, 163.0], [54.6, 163.0], [54.7, 163.0], [54.8, 163.0], [54.9, 164.0], [55.0, 164.0], [55.1, 164.0], [55.2, 164.0], [55.3, 164.0], [55.4, 165.0], [55.5, 165.0], [55.6, 165.0], [55.7, 165.0], [55.8, 166.0], [55.9, 166.0], [56.0, 166.0], [56.1, 166.0], [56.2, 167.0], [56.3, 167.0], [56.4, 167.0], [56.5, 167.0], [56.6, 167.0], [56.7, 168.0], [56.8, 168.0], [56.9, 168.0], [57.0, 168.0], [57.1, 169.0], [57.2, 169.0], [57.3, 169.0], [57.4, 169.0], [57.5, 170.0], [57.6, 170.0], [57.7, 170.0], [57.8, 170.0], [57.9, 171.0], [58.0, 171.0], [58.1, 171.0], [58.2, 171.0], [58.3, 172.0], [58.4, 172.0], [58.5, 172.0], [58.6, 172.0], [58.7, 173.0], [58.8, 173.0], [58.9, 173.0], [59.0, 173.0], [59.1, 174.0], [59.2, 174.0], [59.3, 174.0], [59.4, 174.0], [59.5, 175.0], [59.6, 175.0], [59.7, 175.0], [59.8, 175.0], [59.9, 176.0], [60.0, 176.0], [60.1, 176.0], [60.2, 177.0], [60.3, 177.0], [60.4, 177.0], [60.5, 177.0], [60.6, 178.0], [60.7, 178.0], [60.8, 178.0], [60.9, 178.0], [61.0, 179.0], [61.1, 179.0], [61.2, 179.0], [61.3, 179.0], [61.4, 180.0], [61.5, 180.0], [61.6, 180.0], [61.7, 180.0], [61.8, 181.0], [61.9, 181.0], [62.0, 181.0], [62.1, 182.0], [62.2, 182.0], [62.3, 182.0], [62.4, 182.0], [62.5, 183.0], [62.6, 183.0], [62.7, 183.0], [62.8, 183.0], [62.9, 184.0], [63.0, 184.0], [63.1, 184.0], [63.2, 185.0], [63.3, 185.0], [63.4, 185.0], [63.5, 186.0], [63.6, 186.0], [63.7, 186.0], [63.8, 186.0], [63.9, 187.0], [64.0, 187.0], [64.1, 187.0], [64.2, 187.0], [64.3, 188.0], [64.4, 188.0], [64.5, 188.0], [64.6, 189.0], [64.7, 189.0], [64.8, 189.0], [64.9, 190.0], [65.0, 190.0], [65.1, 190.0], [65.2, 190.0], [65.3, 191.0], [65.4, 191.0], [65.5, 191.0], [65.6, 192.0], [65.7, 192.0], [65.8, 192.0], [65.9, 193.0], [66.0, 193.0], [66.1, 193.0], [66.2, 193.0], [66.3, 194.0], [66.4, 194.0], [66.5, 194.0], [66.6, 195.0], [66.7, 195.0], [66.8, 195.0], [66.9, 196.0], [67.0, 196.0], [67.1, 196.0], [67.2, 197.0], [67.3, 197.0], [67.4, 197.0], [67.5, 198.0], [67.6, 198.0], [67.7, 198.0], [67.8, 199.0], [67.9, 199.0], [68.0, 199.0], [68.1, 200.0], [68.2, 200.0], [68.3, 200.0], [68.4, 201.0], [68.5, 201.0], [68.6, 201.0], [68.7, 202.0], [68.8, 202.0], [68.9, 202.0], [69.0, 203.0], [69.1, 203.0], [69.2, 203.0], [69.3, 204.0], [69.4, 204.0], [69.5, 205.0], [69.6, 205.0], [69.7, 205.0], [69.8, 206.0], [69.9, 206.0], [70.0, 206.0], [70.1, 207.0], [70.2, 207.0], [70.3, 207.0], [70.4, 208.0], [70.5, 208.0], [70.6, 209.0], [70.7, 209.0], [70.8, 209.0], [70.9, 210.0], [71.0, 210.0], [71.1, 210.0], [71.2, 211.0], [71.3, 211.0], [71.4, 212.0], [71.5, 212.0], [71.6, 212.0], [71.7, 213.0], [71.8, 213.0], [71.9, 214.0], [72.0, 214.0], [72.1, 214.0], [72.2, 215.0], [72.3, 215.0], [72.4, 216.0], [72.5, 216.0], [72.6, 216.0], [72.7, 217.0], [72.8, 217.0], [72.9, 218.0], [73.0, 218.0], [73.1, 219.0], [73.2, 219.0], [73.3, 219.0], [73.4, 220.0], [73.5, 220.0], [73.6, 221.0], [73.7, 221.0], [73.8, 222.0], [73.9, 222.0], [74.0, 223.0], [74.1, 223.0], [74.2, 224.0], [74.3, 224.0], [74.4, 225.0], [74.5, 225.0], [74.6, 225.0], [74.7, 226.0], [74.8, 226.0], [74.9, 227.0], [75.0, 227.0], [75.1, 228.0], [75.2, 228.0], [75.3, 229.0], [75.4, 229.0], [75.5, 230.0], [75.6, 230.0], [75.7, 231.0], [75.8, 231.0], [75.9, 232.0], [76.0, 232.0], [76.1, 233.0], [76.2, 233.0], [76.3, 234.0], [76.4, 234.0], [76.5, 235.0], [76.6, 235.0], [76.7, 236.0], [76.8, 236.0], [76.9, 237.0], [77.0, 237.0], [77.1, 238.0], [77.2, 239.0], [77.3, 239.0], [77.4, 240.0], [77.5, 240.0], [77.6, 241.0], [77.7, 241.0], [77.8, 242.0], [77.9, 242.0], [78.0, 243.0], [78.1, 244.0], [78.2, 244.0], [78.3, 245.0], [78.4, 246.0], [78.5, 246.0], [78.6, 247.0], [78.7, 247.0], [78.8, 248.0], [78.9, 249.0], [79.0, 249.0], [79.1, 250.0], [79.2, 251.0], [79.3, 251.0], [79.4, 252.0], [79.5, 253.0], [79.6, 253.0], [79.7, 254.0], [79.8, 255.0], [79.9, 255.0], [80.0, 256.0], [80.1, 257.0], [80.2, 258.0], [80.3, 258.0], [80.4, 259.0], [80.5, 260.0], [80.6, 261.0], [80.7, 262.0], [80.8, 262.0], [80.9, 263.0], [81.0, 264.0], [81.1, 265.0], [81.2, 266.0], [81.3, 267.0], [81.4, 268.0], [81.5, 269.0], [81.6, 269.0], [81.7, 270.0], [81.8, 271.0], [81.9, 272.0], [82.0, 273.0], [82.1, 274.0], [82.2, 275.0], [82.3, 276.0], [82.4, 277.0], [82.5, 278.0], [82.6, 279.0], [82.7, 280.0], [82.8, 281.0], [82.9, 282.0], [83.0, 284.0], [83.1, 285.0], [83.2, 286.0], [83.3, 287.0], [83.4, 288.0], [83.5, 290.0], [83.6, 291.0], [83.7, 292.0], [83.8, 294.0], [83.9, 295.0], [84.0, 297.0], [84.1, 298.0], [84.2, 300.0], [84.3, 301.0], [84.4, 303.0], [84.5, 304.0], [84.6, 306.0], [84.7, 308.0], [84.8, 309.0], [84.9, 311.0], [85.0, 313.0], [85.1, 315.0], [85.2, 317.0], [85.3, 319.0], [85.4, 321.0], [85.5, 323.0], [85.6, 325.0], [85.7, 327.0], [85.8, 330.0], [85.9, 333.0], [86.0, 335.0], [86.1, 338.0], [86.2, 341.0], [86.3, 344.0], [86.4, 347.0], [86.5, 351.0], [86.6, 355.0], [86.7, 358.0], [86.8, 362.0], [86.9, 367.0], [87.0, 373.0], [87.1, 379.0], [87.2, 386.0], [87.3, 394.0], [87.4, 404.0], [87.5, 415.0], [87.6, 431.0], [87.7, 451.0], [87.8, 488.0], [87.9, 728.0], [88.0, 1080.0], [88.1, 1091.0], [88.2, 1098.0], [88.3, 1104.0], [88.4, 1108.0], [88.5, 1112.0], [88.6, 1115.0], [88.7, 1119.0], [88.8, 1122.0], [88.9, 1124.0], [89.0, 1127.0], [89.1, 1130.0], [89.2, 1132.0], [89.3, 1134.0], [89.4, 1137.0], [89.5, 1139.0], [89.6, 1141.0], [89.7, 1143.0], [89.8, 1145.0], [89.9, 1147.0], [90.0, 1149.0], [90.1, 1151.0], [90.2, 1153.0], [90.3, 1155.0], [90.4, 1157.0], [90.5, 1159.0], [90.6, 1160.0], [90.7, 1162.0], [90.8, 1164.0], [90.9, 1166.0], [91.0, 1167.0], [91.1, 1169.0], [91.2, 1171.0], [91.3, 1173.0], [91.4, 1174.0], [91.5, 1176.0], [91.6, 1178.0], [91.7, 1179.0], [91.8, 1181.0], [91.9, 1183.0], [92.0, 1185.0], [92.1, 1186.0], [92.2, 1188.0], [92.3, 1190.0], [92.4, 1191.0], [92.5, 1193.0], [92.6, 1195.0], [92.7, 1197.0], [92.8, 1198.0], [92.9, 1200.0], [93.0, 1202.0], [93.1, 1204.0], [93.2, 1206.0], [93.3, 1208.0], [93.4, 1210.0], [93.5, 1211.0], [93.6, 1213.0], [93.7, 1215.0], [93.8, 1217.0], [93.9, 1219.0], [94.0, 1221.0], [94.1, 1223.0], [94.2, 1226.0], [94.3, 1228.0], [94.4, 1230.0], [94.5, 1233.0], [94.6, 1235.0], [94.7, 1237.0], [94.8, 1240.0], [94.9, 1242.0], [95.0, 1245.0], [95.1, 1248.0], [95.2, 1251.0], [95.3, 1254.0], [95.4, 1257.0], [95.5, 1260.0], [95.6, 1263.0], [95.7, 1266.0], [95.8, 1270.0], [95.9, 1274.0], [96.0, 1277.0], [96.1, 1281.0], [96.2, 1285.0], [96.3, 1290.0], [96.4, 1295.0], [96.5, 1300.0], [96.6, 1305.0], [96.7, 1311.0], [96.8, 1317.0], [96.9, 1323.0], [97.0, 1330.0], [97.1, 1338.0], [97.2, 1345.0], [97.3, 1352.0], [97.4, 1360.0], [97.5, 1369.0], [97.6, 1377.0], [97.7, 1386.0], [97.8, 1395.0], [97.9, 1404.0], [98.0, 1414.0], [98.1, 1424.0], [98.2, 1437.0], [98.3, 1451.0], [98.4, 1465.0], [98.5, 1485.0], [98.6, 1508.0], [98.7, 1544.0], [98.8, 1588.0], [98.9, 1640.0], [99.0, 1713.0], [99.1, 2087.0], [99.2, 3145.0], [99.3, 3179.0], [99.4, 3205.0], [99.5, 3233.0], [99.6, 3264.0], [99.7, 3315.0], [99.8, 3411.0], [99.9, 3647.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 219345.0, "series": [{"data": [[0.0, 103429.0], [600.0, 59.0], [700.0, 50.0], [800.0, 60.0], [900.0, 32.0], [1000.0, 1406.0], [1100.0, 21983.0], [1200.0, 17234.0], [1300.0, 6493.0], [1400.0, 3373.0], [1500.0, 1225.0], [1600.0, 755.0], [1700.0, 291.0], [1800.0, 83.0], [1900.0, 42.0], [2000.0, 150.0], [2100.0, 70.0], [2200.0, 15.0], [2300.0, 6.0], [2400.0, 1.0], [2500.0, 1.0], [2800.0, 30.0], [2700.0, 5.0], [2900.0, 27.0], [3000.0, 17.0], [3100.0, 1118.0], [3200.0, 1438.0], [3300.0, 520.0], [3400.0, 365.0], [3500.0, 137.0], [3700.0, 51.0], [3600.0, 73.0], [3800.0, 7.0], [3900.0, 9.0], [4000.0, 20.0], [4100.0, 20.0], [4300.0, 1.0], [4400.0, 1.0], [4500.0, 2.0], [4600.0, 1.0], [4800.0, 2.0], [4900.0, 2.0], [7100.0, 4.0], [7200.0, 34.0], [7400.0, 69.0], [7300.0, 80.0], [7500.0, 41.0], [7600.0, 35.0], [7700.0, 6.0], [7800.0, 4.0], [15300.0, 1.0], [15400.0, 9.0], [15500.0, 11.0], [15600.0, 7.0], [15800.0, 5.0], [15700.0, 5.0], [16000.0, 3.0], [100.0, 219345.0], [31500.0, 1.0], [31600.0, 1.0], [200.0, 76649.0], [300.0, 14981.0], [400.0, 2212.0], [500.0, 295.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 31600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 6784.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 416620.0, "series": [{"data": [[0.0, 416620.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 50998.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 6784.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.3935810810810805, "minX": 1.69137E12, "maxY": 100.0, "series": [{"data": [[1.69137282E12, 9.979041916167667], [1.6913712E12, 66.80588287410312], [1.6913709E12, 50.15978340675481], [1.6913706E12, 33.48995024875629], [1.69137222E12, 62.70525197059601], [1.6913703E12, 16.821890193288294], [1.69137252E12, 32.818314407750876], [1.69137E12, 1.3935810810810805], [1.69137192E12, 92.76981620921343], [1.69137162E12, 90.21130875655197], [1.69137132E12, 73.51923250972924], [1.69137102E12, 56.809420486393584], [1.69137072E12, 40.199904671115405], [1.69137234E12, 50.0], [1.69137042E12, 23.49714819039722], [1.69137264E12, 20.0], [1.69137012E12, 6.900165837479255], [1.69137204E12, 80.0], [1.69137174E12, 96.77161903022535], [1.69137144E12, 80.28083918602594], [1.69137114E12, 63.52552193506869], [1.69137084E12, 46.80805601018383], [1.69137246E12, 40.0], [1.69137054E12, 30.191088607594864], [1.69137276E12, 10.0], [1.69137024E12, 13.50110426595375], [1.69137216E12, 70.0], [1.69137186E12, 100.0], [1.69137156E12, 86.78606241983775], [1.69137126E12, 70.20599182932348], [1.69137258E12, 29.38123372721811], [1.69137096E12, 53.500995114890635], [1.69137066E12, 36.81490127419503], [1.69137036E12, 20.22275869636785], [1.69137198E12, 89.40899881816641], [1.69137006E12, 3.7510741138560784], [1.69137228E12, 59.246913580246996], [1.69137168E12, 93.50226171243924], [1.69137138E12, 76.77842037117013], [1.6913727E12, 16.30500472143529], [1.69137108E12, 60.15496190213912], [1.69137078E12, 43.46671468258063], [1.69137048E12, 26.786975242195837], [1.6913721E12, 76.08028561476904], [1.69137018E12, 10.286501377410504], [1.6913724E12, 45.99639314697929], [1.6913718E12, 99.69929148129857], [1.6913715E12, 83.50797188410742]], "isOverall": false, "label": "jp@gc - Stepping Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69137282E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 49.52222222222225, "minX": 1.0, "maxY": 608.2958535674253, "series": [{"data": [[2.0, 51.8771676300578], [3.0, 53.14215202369201], [4.0, 57.33811802232856], [5.0, 60.65993265993265], [6.0, 64.0910172516361], [7.0, 68.88815789473706], [8.0, 70.5754162585699], [9.0, 80.8558558558561], [10.0, 84.23694577752295], [11.0, 82.7499999999999], [12.0, 84.36823666796415], [13.0, 89.2526071842411], [14.0, 99.00815850815866], [15.0, 103.94744976816075], [16.0, 121.89509306260592], [17.0, 116.16133942161359], [18.0, 124.4914794732765], [19.0, 129.75553886594057], [20.0, 135.89811848313732], [21.0, 136.80967741935504], [22.0, 133.38995373430313], [23.0, 142.80725388601056], [24.0, 149.6395589248794], [25.0, 157.10434173669486], [26.0, 153.83730806925863], [27.0, 206.89739204788376], [28.0, 168.91484348704148], [29.0, 173.07395179927403], [30.0, 183.1350699722204], [31.0, 197.13970849626733], [32.0, 179.78748043818484], [33.0, 197.8454370179952], [34.0, 218.03625483984484], [35.0, 203.62224415926235], [36.0, 204.14603272615025], [37.0, 222.95272108843488], [38.0, 212.0968045112781], [39.0, 229.02061191626424], [40.0, 231.62712955625858], [41.0, 249.0499329758718], [42.0, 236.16267225883777], [43.0, 257.70204081632664], [44.0, 284.4606213872828], [45.0, 272.1874791874795], [46.0, 247.21922278255724], [47.0, 262.76286706662444], [48.0, 253.85739488385704], [49.0, 260.23871527777834], [50.0, 280.9576625498571], [51.0, 281.62392373923706], [52.0, 289.51444547996215], [53.0, 296.0506290273087], [54.0, 293.21054207846555], [55.0, 295.9168399168396], [56.0, 312.6080370942806], [57.0, 303.18531998786875], [58.0, 310.8406898567666], [59.0, 316.0080814127503], [60.0, 325.2930750787461], [61.0, 332.8695898161233], [62.0, 401.94708616374743], [63.0, 331.5979411764712], [64.0, 335.9181897302005], [65.0, 362.6790085679316], [66.0, 354.2768510389227], [67.0, 335.9602534562218], [68.0, 360.7434616514839], [69.0, 403.32753714827714], [70.0, 367.58367035139526], [71.0, 374.2444574095676], [72.0, 397.05547089302047], [73.0, 422.42560777957897], [74.0, 388.83940105695865], [75.0, 398.4672177879141], [76.0, 392.48319683705216], [77.0, 390.0904017857137], [78.0, 421.5651397977388], [79.0, 456.2241728561778], [80.0, 428.05183793198313], [81.0, 402.2193077339102], [82.0, 410.3454001088736], [83.0, 433.9635462233886], [84.0, 437.68877849211015], [85.0, 420.0383995703544], [86.0, 433.8239574587184], [87.0, 461.06270528516035], [88.0, 450.11585193557477], [89.0, 457.4352331606213], [90.0, 451.4631926857545], [91.0, 456.6465206542836], [92.0, 438.2822494669499], [93.0, 477.49824845055235], [94.0, 430.8299649690105], [95.0, 470.4031316348183], [96.0, 483.41558806978014], [97.0, 608.2958535674253], [98.0, 532.0900028481905], [99.0, 495.8686674008813], [100.0, 493.39182460984983], [1.0, 49.52222222222225]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[56.62080261044445, 306.9021441730878]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1440.5166666666667, "minX": 1.69137E12, "maxY": 62170.416666666664, "series": [{"data": [[1.69137282E12, 10068.016666666666], [1.6913712E12, 56682.88333333333], [1.6913709E12, 54731.25], [1.6913706E12, 50477.816666666666], [1.69137222E12, 56712.0], [1.6913703E12, 42345.433333333334], [1.69137252E12, 48206.1], [1.69137E12, 2971.883333333333], [1.69137192E12, 62021.833333333336], [1.69137162E12, 58435.3], [1.69137132E12, 55502.46666666667], [1.69137102E12, 55558.76666666667], [1.69137072E12, 52667.96666666667], [1.69137234E12, 54522.51666666667], [1.69137042E12, 48421.38333333333], [1.69137264E12, 46639.1], [1.69137012E12, 30280.183333333334], [1.69137204E12, 55601.63333333333], [1.69137174E12, 55003.38333333333], [1.69137144E12, 55773.316666666666], [1.69137114E12, 54605.35], [1.69137084E12, 55232.916666666664], [1.69137246E12, 52129.4], [1.69137054E12, 49581.11666666667], [1.69137276E12, 36141.183333333334], [1.69137024E12, 43204.63333333333], [1.69137216E12, 57540.46666666667], [1.69137186E12, 60487.25], [1.69137156E12, 58720.683333333334], [1.69137126E12, 55305.96666666667], [1.69137258E12, 50163.3], [1.69137096E12, 55484.9], [1.69137066E12, 51622.35], [1.69137036E12, 45761.48333333333], [1.69137198E12, 59503.3], [1.69137006E12, 18698.0], [1.69137228E12, 54100.583333333336], [1.69137168E12, 62170.416666666664], [1.69137138E12, 58183.71666666667], [1.6913727E12, 37229.4], [1.69137108E12, 54707.066666666666], [1.69137078E12, 48803.61666666667], [1.69137048E12, 46678.28333333333], [1.6913721E12, 57678.683333333334], [1.69137018E12, 36457.85], [1.6913724E12, 50113.86666666667], [1.6913718E12, 60919.26666666667], [1.6913715E12, 58587.7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69137282E12, 4876.433333333333], [1.6913712E12, 27464.933333333334], [1.6913709E12, 26513.633333333335], [1.6913706E12, 24455.083333333332], [1.69137222E12, 27474.883333333335], [1.6913703E12, 20520.233333333334], [1.69137252E12, 23357.55], [1.69137E12, 1440.5166666666667], [1.69137192E12, 30054.0], [1.69137162E12, 28316.566666666666], [1.69137132E12, 26885.933333333334], [1.69137102E12, 26915.216666666667], [1.69137072E12, 25525.566666666666], [1.69137234E12, 26416.283333333333], [1.69137042E12, 23464.566666666666], [1.69137264E12, 22600.716666666667], [1.69137012E12, 14672.95], [1.69137204E12, 26937.0], [1.69137174E12, 26647.45], [1.69137144E12, 27024.566666666666], [1.69137114E12, 26457.616666666665], [1.69137084E12, 26761.866666666665], [1.69137246E12, 25255.566666666666], [1.69137054E12, 24029.016666666666], [1.69137276E12, 17510.283333333333], [1.69137024E12, 20933.983333333334], [1.69137216E12, 27883.483333333334], [1.69137186E12, 29295.15], [1.69137156E12, 28457.733333333334], [1.69137126E12, 26803.133333333335], [1.69137258E12, 24299.366666666665], [1.69137096E12, 26897.75], [1.69137066E12, 25016.966666666667], [1.69137036E12, 22174.9], [1.69137198E12, 28825.3], [1.69137006E12, 9061.683333333332], [1.69137228E12, 26214.25], [1.69137168E12, 30124.666666666668], [1.69137138E12, 28190.183333333334], [1.6913727E12, 18038.283333333333], [1.69137108E12, 26506.3], [1.69137078E12, 23649.433333333334], [1.69137048E12, 22605.866666666665], [1.6913721E12, 27944.433333333334], [1.69137018E12, 17665.966666666667], [1.6913724E12, 24287.016666666666], [1.6913718E12, 29535.466666666667], [1.6913715E12, 28387.283333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69137282E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 50.21621621621623, "minX": 1.69137E12, "maxY": 525.516391197149, "series": [{"data": [[1.69137282E12, 79.83233532934119], [1.6913712E12, 351.44024098520333], [1.6913709E12, 275.5102790014657], [1.6913706E12, 199.1191044776116], [1.69137222E12, 333.1451598618362], [1.6913703E12, 119.12356219613417], [1.69137252E12, 204.42212730492744], [1.69137E12, 50.21621621621623], [1.69137192E12, 449.79548214719176], [1.69137162E12, 464.1882787660041], [1.69137132E12, 396.59996379762896], [1.69137102E12, 307.2422927402587], [1.69137072E12, 229.29809342230706], [1.69137234E12, 273.5057111274878], [1.69137042E12, 144.85834283936518], [1.69137264E12, 129.18906115417738], [1.69137012E12, 67.53499170812593], [1.69137204E12, 432.66332429990734], [1.69137174E12, 525.516391197149], [1.69137144E12, 431.70097244732546], [1.69137114E12, 351.6503264968268], [1.69137084E12, 253.46162938716074], [1.69137246E12, 230.74390596396537], [1.69137054E12, 183.12992405063338], [1.69137276E12, 83.13618677042811], [1.69137024E12, 93.7411368127399], [1.69137216E12, 366.0124792739333], [1.69137186E12, 499.07392640584754], [1.69137156E12, 447.61487815305696], [1.69137126E12, 381.7221062187929], [1.69137258E12, 176.6816543160424], [1.69137096E12, 290.4864302514922], [1.69137066E12, 213.26787277502171], [1.69137036E12, 132.8380335784036], [1.69137198E12, 454.51831841972046], [1.69137006E12, 56.28464017185827], [1.69137228E12, 331.9352083913503], [1.69137168E12, 451.71211631664164], [1.69137138E12, 399.82270176952846], [1.6913727E12, 129.42425468771083], [1.69137108E12, 327.79509776921174], [1.69137078E12, 268.8510134787546], [1.69137048E12, 172.8385360602798], [1.6913721E12, 397.1070184604666], [1.69137018E12, 84.16115702479316], [1.6913724E12, 278.071335537521], [1.6913718E12, 490.79354094579014], [1.6913715E12, 425.65129435967896]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69137282E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 50.17905405405406, "minX": 1.69137E12, "maxY": 525.5098164551166, "series": [{"data": [[1.69137282E12, 79.82534930139727], [1.6913712E12, 351.4347479401081], [1.6913709E12, 275.50495594713715], [1.6913706E12, 199.11323383084587], [1.69137222E12, 333.13630325037815], [1.6913703E12, 119.11621012688235], [1.69137252E12, 204.4155641212624], [1.69137E12, 50.17905405405406], [1.69137192E12, 449.7889239737667], [1.69137162E12, 464.1814041419605], [1.69137132E12, 396.5855733550547], [1.69137102E12, 307.23506012114524], [1.69137072E12, 229.29018112488154], [1.69137234E12, 273.497420781134], [1.69137042E12, 144.85066887898017], [1.69137264E12, 129.18238587424642], [1.69137012E12, 67.52520729684926], [1.69137204E12, 432.6539295392943], [1.69137174E12, 525.5098164551166], [1.69137144E12, 431.6921483882588], [1.69137114E12, 351.6277936172156], [1.69137084E12, 253.45480996544822], [1.69137246E12, 230.73696887946838], [1.69137054E12, 183.1231392405064], [1.69137276E12, 83.12715397443058], [1.69137024E12, 93.7332325932815], [1.69137216E12, 366.0061960031414], [1.69137186E12, 499.06578619486555], [1.69137156E12, 447.60786660966147], [1.69137126E12, 381.71529732183217], [1.69137258E12, 176.67234127778886], [1.69137096E12, 290.47955491224855], [1.69137066E12, 213.26242583406346], [1.69137036E12, 132.83188851091867], [1.69137198E12, 454.5111430018545], [1.69137006E12, 56.26906552094526], [1.69137228E12, 331.9265756985055], [1.69137168E12, 451.70500807754445], [1.69137138E12, 399.8140699179966], [1.6913727E12, 129.4172399838124], [1.69137108E12, 327.78656017626173], [1.69137078E12, 268.8447371128709], [1.69137048E12, 172.83196986006527], [1.6913721E12, 397.10127133403137], [1.69137018E12, 84.15234159779645], [1.6913724E12, 278.0646227832887], [1.6913718E12, 490.77467457571214], [1.6913715E12, 425.64383679067356]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69137282E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 9.434121621621625, "minX": 1.69137E12, "maxY": 16.458460967232877, "series": [{"data": [[1.69137282E12, 11.675149700598798], [1.6913712E12, 13.895543545671957], [1.6913709E12, 13.47136563876653], [1.6913706E12, 12.861890547263702], [1.69137222E12, 13.19608537773444], [1.6913703E12, 12.755958733546827], [1.69137252E12, 13.291905406813171], [1.69137E12, 9.434121621621625], [1.69137192E12, 15.18298113513076], [1.69137162E12, 14.240697774340457], [1.69137132E12, 13.582315141641752], [1.69137102E12, 14.311183437302219], [1.69137072E12, 13.774451858913222], [1.69137234E12, 13.135040530582136], [1.69137042E12, 12.742611220574501], [1.69137264E12, 12.962316968130871], [1.69137012E12, 11.470149253731313], [1.69137204E12, 14.509846431797703], [1.69137174E12, 14.615651538672301], [1.69137144E12, 14.309742481541477], [1.69137114E12, 14.545295686563033], [1.69137084E12, 13.153482451354765], [1.69137246E12, 13.831486655747186], [1.69137054E12, 14.136202531645536], [1.69137276E12, 12.71011673151752], [1.69137024E12, 12.210856677903065], [1.69137216E12, 14.392442621520189], [1.69137186E12, 14.407176675803651], [1.69137156E12, 13.7569046601111], [1.69137126E12, 13.772764412165216], [1.69137258E12, 13.69787702783893], [1.69137096E12, 14.177673240455912], [1.69137066E12, 13.567065460558338], [1.69137036E12, 13.025677603423713], [1.69137198E12, 14.421661320276838], [1.69137006E12, 10.469656283566028], [1.69137228E12, 16.458460967232877], [1.69137168E12, 13.99991922455574], [1.69137138E12, 13.747345705653796], [1.6913727E12, 13.980574666127048], [1.69137108E12, 13.58294317451573], [1.69137078E12, 13.689474225743382], [1.69137048E12, 13.266630785791179], [1.6913721E12, 14.133141762452121], [1.69137018E12, 12.030303030303049], [1.6913724E12, 13.782987676585504], [1.6913718E12, 14.010380622837335], [1.6913715E12, 14.849477112977858]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69137282E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 23.0, "minX": 1.69137E12, "maxY": 31648.0, "series": [{"data": [[1.69137282E12, 1080.0], [1.6913712E12, 7434.0], [1.6913709E12, 15415.0], [1.6913706E12, 3250.0], [1.69137222E12, 7580.0], [1.6913703E12, 3198.0], [1.69137252E12, 3278.0], [1.69137E12, 230.0], [1.69137192E12, 15655.0], [1.69137162E12, 7594.0], [1.69137132E12, 7280.0], [1.69137102E12, 7506.0], [1.69137072E12, 7228.0], [1.69137234E12, 3586.0], [1.69137042E12, 3152.0], [1.69137264E12, 3128.0], [1.69137012E12, 507.0], [1.69137204E12, 7758.0], [1.69137174E12, 16091.0], [1.69137144E12, 15836.0], [1.69137114E12, 7346.0], [1.69137084E12, 7234.0], [1.69137246E12, 3307.0], [1.69137054E12, 3191.0], [1.69137276E12, 1184.0], [1.69137024E12, 1186.0], [1.69137216E12, 7460.0], [1.69137186E12, 31648.0], [1.69137156E12, 15658.0], [1.69137126E12, 7664.0], [1.69137258E12, 3198.0], [1.69137096E12, 7459.0], [1.69137066E12, 3378.0], [1.69137036E12, 3117.0], [1.69137198E12, 7668.0], [1.69137006E12, 205.0], [1.69137228E12, 7353.0], [1.69137168E12, 15749.0], [1.69137138E12, 31572.0], [1.6913727E12, 3213.0], [1.69137108E12, 3764.0], [1.69137078E12, 3413.0], [1.69137048E12, 3412.0], [1.6913721E12, 7523.0], [1.69137018E12, 1169.0], [1.6913724E12, 3661.0], [1.6913718E12, 15599.0], [1.6913715E12, 7623.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69137282E12, 119.0], [1.6913712E12, 1176.0], [1.6913709E12, 421.3000000000011], [1.6913706E12, 223.0], [1.69137222E12, 1164.0], [1.6913703E12, 152.0], [1.69137252E12, 243.0], [1.69137E12, 75.0], [1.69137192E12, 1253.0], [1.69137162E12, 1249.0], [1.69137132E12, 1220.0], [1.69137102E12, 1145.0], [1.69137072E12, 280.89999999999964], [1.69137234E12, 1107.300000000001], [1.69137042E12, 175.0], [1.69137264E12, 171.0], [1.69137012E12, 102.0], [1.69137204E12, 1242.0], [1.69137174E12, 1287.0], [1.69137144E12, 1239.0], [1.69137114E12, 1177.0], [1.69137084E12, 422.10000000000036], [1.69137246E12, 272.0], [1.69137054E12, 215.39999999999964], [1.69137276E12, 125.0], [1.69137024E12, 132.0], [1.69137216E12, 1190.0], [1.69137186E12, 1289.0], [1.69137156E12, 1246.0], [1.69137126E12, 1196.0], [1.69137258E12, 225.0], [1.69137096E12, 1129.0], [1.69137066E12, 241.0], [1.69137036E12, 169.0], [1.69137198E12, 1245.0], [1.69137006E12, 86.0], [1.69137228E12, 1171.6000000000004], [1.69137168E12, 1241.0], [1.69137138E12, 1215.0], [1.6913727E12, 197.0], [1.69137108E12, 1162.0], [1.69137078E12, 417.0], [1.69137048E12, 216.0], [1.6913721E12, 1209.0], [1.69137018E12, 123.0], [1.6913724E12, 1106.0], [1.6913718E12, 1279.0], [1.6913715E12, 1232.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69137282E12, 165.95000000000005], [1.6913712E12, 3170.120000000001], [1.6913709E12, 1715.0], [1.6913706E12, 1236.4899999999998], [1.69137222E12, 1616.0], [1.6913703E12, 1105.6599999999999], [1.69137252E12, 1250.0], [1.69137E12, 87.07000000000005], [1.69137192E12, 3228.9199999999983], [1.69137162E12, 3256.620000000001], [1.69137132E12, 3158.5], [1.69137102E12, 1771.1399999999976], [1.69137072E12, 1303.0], [1.69137234E12, 1448.4300000000003], [1.69137042E12, 1151.5599999999995], [1.69137264E12, 1122.0], [1.69137012E12, 127.0], [1.69137204E12, 3294.0], [1.69137174E12, 3433.9199999999983], [1.69137144E12, 3221.9300000000003], [1.69137114E12, 3204.0], [1.69137084E12, 1377.0], [1.69137246E12, 1322.6000000000022], [1.69137054E12, 1205.0], [1.69137276E12, 188.0], [1.69137024E12, 177.0], [1.69137216E12, 2057.199999999999], [1.69137186E12, 3344.0], [1.69137156E12, 3258.039999999999], [1.69137126E12, 3193.0], [1.69137258E12, 1205.0], [1.69137096E12, 1424.0], [1.69137066E12, 1302.0], [1.69137036E12, 1131.0], [1.69137198E12, 3255.5300000000007], [1.69137006E12, 107.0], [1.69137228E12, 1493.5200000000004], [1.69137168E12, 3261.1900000000005], [1.69137138E12, 2988.9799999999086], [1.6913727E12, 1122.0], [1.69137108E12, 1657.1799999999985], [1.69137078E12, 1361.199999999997], [1.69137048E12, 1190.0900000000001], [1.6913721E12, 3191.1499999999996], [1.69137018E12, 170.0], [1.6913724E12, 1426.0], [1.6913718E12, 3267.4400000000023], [1.6913715E12, 3201.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69137282E12, 133.0], [1.6913712E12, 1262.0], [1.6913709E12, 1190.1499999999996], [1.6913706E12, 1122.0], [1.69137222E12, 1238.0], [1.6913703E12, 174.0], [1.69137252E12, 1118.0], [1.69137E12, 79.0], [1.69137192E12, 1389.0], [1.69137162E12, 1398.1000000000004], [1.69137132E12, 1302.0], [1.69137102E12, 1213.8999999999996], [1.69137072E12, 1153.0], [1.69137234E12, 1188.0], [1.69137042E12, 214.0], [1.69137264E12, 205.0], [1.69137012E12, 110.0], [1.69137204E12, 1375.449999999999], [1.69137174E12, 1441.0], [1.69137144E12, 1351.0], [1.69137114E12, 1262.0], [1.69137084E12, 1171.0], [1.69137246E12, 1153.0], [1.69137054E12, 1079.0], [1.69137276E12, 144.0], [1.69137024E12, 144.0], [1.69137216E12, 1266.0], [1.69137186E12, 1436.0], [1.69137156E12, 1382.0], [1.69137126E12, 1294.199999999999], [1.69137258E12, 314.64999999999964], [1.69137096E12, 1198.0], [1.69137066E12, 1138.0], [1.69137036E12, 197.0], [1.69137198E12, 1377.0], [1.69137006E12, 93.0], [1.69137228E12, 1244.0], [1.69137168E12, 1377.0], [1.69137138E12, 1333.0], [1.6913727E12, 237.0], [1.69137108E12, 1234.0], [1.69137078E12, 1188.0], [1.69137048E12, 294.0], [1.6913721E12, 1311.0], [1.69137018E12, 137.0], [1.6913724E12, 1200.0], [1.6913718E12, 1421.0], [1.6913715E12, 1345.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.69137282E12, 29.0], [1.6913712E12, 37.0], [1.6913709E12, 29.0], [1.6913706E12, 29.0], [1.69137222E12, 34.0], [1.6913703E12, 30.0], [1.69137252E12, 30.0], [1.69137E12, 29.0], [1.69137192E12, 34.0], [1.69137162E12, 34.0], [1.69137132E12, 33.0], [1.69137102E12, 38.0], [1.69137072E12, 38.0], [1.69137234E12, 31.0], [1.69137042E12, 32.0], [1.69137264E12, 28.0], [1.69137012E12, 23.0], [1.69137204E12, 44.0], [1.69137174E12, 35.0], [1.69137144E12, 36.0], [1.69137114E12, 34.0], [1.69137084E12, 33.0], [1.69137246E12, 33.0], [1.69137054E12, 37.0], [1.69137276E12, 25.0], [1.69137024E12, 27.0], [1.69137216E12, 31.0], [1.69137186E12, 41.0], [1.69137156E12, 39.0], [1.69137126E12, 37.0], [1.69137258E12, 33.0], [1.69137096E12, 34.0], [1.69137066E12, 33.0], [1.69137036E12, 32.0], [1.69137198E12, 31.0], [1.69137006E12, 23.0], [1.69137228E12, 36.0], [1.69137168E12, 39.0], [1.69137138E12, 32.0], [1.6913727E12, 27.0], [1.69137108E12, 34.0], [1.69137078E12, 28.0], [1.69137048E12, 32.0], [1.6913721E12, 35.0], [1.69137018E12, 26.0], [1.6913724E12, 38.0], [1.6913718E12, 38.0], [1.6913715E12, 35.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69137282E12, 73.0], [1.6913712E12, 171.0], [1.6913709E12, 148.0], [1.6913706E12, 128.0], [1.69137222E12, 162.0], [1.6913703E12, 97.0], [1.69137252E12, 134.0], [1.69137E12, 41.5], [1.69137192E12, 210.0], [1.69137162E12, 205.0], [1.69137132E12, 204.0], [1.69137102E12, 156.0], [1.69137072E12, 137.0], [1.69137234E12, 148.0], [1.69137042E12, 108.0], [1.69137264E12, 103.0], [1.69137012E12, 59.0], [1.69137204E12, 201.0], [1.69137174E12, 220.0], [1.69137144E12, 207.0], [1.69137114E12, 174.0], [1.69137084E12, 141.0], [1.69137246E12, 135.0], [1.69137054E12, 126.0], [1.69137276E12, 73.0], [1.69137024E12, 84.0], [1.69137216E12, 182.0], [1.69137186E12, 220.0], [1.69137156E12, 202.0], [1.69137126E12, 179.0], [1.69137258E12, 119.0], [1.69137096E12, 156.0], [1.69137066E12, 128.0], [1.69137036E12, 107.0], [1.69137198E12, 211.0], [1.69137006E12, 48.0], [1.69137228E12, 175.0], [1.69137168E12, 205.0], [1.69137138E12, 187.0], [1.6913727E12, 100.0], [1.69137108E12, 165.0], [1.69137078E12, 158.0], [1.69137048E12, 122.0], [1.6913721E12, 187.0], [1.69137018E12, 76.0], [1.6913724E12, 150.0], [1.6913718E12, 220.0], [1.6913715E12, 206.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69137282E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 40.0, "minX": 2.0, "maxY": 352.0, "series": [{"data": [[2.0, 44.5], [16.0, 42.0], [18.0, 43.5], [19.0, 42.0], [20.0, 40.0], [21.0, 40.0], [33.0, 41.0], [36.0, 47.5], [37.0, 44.0], [38.0, 43.0], [39.0, 43.0], [40.0, 41.0], [41.0, 43.0], [52.0, 223.0], [54.0, 44.5], [55.0, 45.0], [56.0, 45.0], [57.0, 44.0], [59.0, 43.5], [58.0, 42.0], [61.0, 41.0], [66.0, 51.0], [67.0, 49.0], [65.0, 50.0], [64.0, 352.0], [71.0, 48.0], [68.0, 69.0], [69.0, 51.0], [70.0, 58.0], [74.0, 48.5], [73.0, 49.0], [72.0, 47.5], [77.0, 58.0], [78.0, 53.5], [79.0, 98.0], [82.0, 55.0], [80.0, 54.5], [83.0, 101.0], [81.0, 57.0], [87.0, 55.5], [84.0, 60.0], [86.0, 53.0], [85.0, 61.0], [88.0, 141.0], [89.0, 83.0], [91.0, 56.0], [93.0, 57.0], [92.0, 55.0], [95.0, 67.0], [94.0, 66.0], [97.0, 75.0], [98.0, 56.0], [96.0, 77.5], [99.0, 70.0], [100.0, 71.0], [103.0, 123.0], [102.0, 149.0], [101.0, 85.0], [105.0, 186.0], [104.0, 59.0], [106.0, 70.0], [107.0, 89.0], [109.0, 71.0], [110.0, 116.0], [111.0, 82.0], [108.0, 77.5], [112.0, 92.0], [115.0, 69.0], [113.0, 124.0], [114.0, 70.0], [119.0, 84.0], [117.0, 102.0], [116.0, 104.0], [118.0, 77.0], [121.0, 93.0], [120.0, 81.0], [122.0, 70.0], [123.0, 84.0], [126.0, 93.0], [127.0, 86.0], [125.0, 85.0], [124.0, 104.0], [129.0, 88.0], [132.0, 92.0], [128.0, 90.0], [130.0, 91.0], [133.0, 93.0], [131.0, 101.0], [135.0, 137.0], [134.0, 92.0], [138.0, 113.0], [136.0, 112.0], [139.0, 114.0], [143.0, 108.0], [142.0, 104.0], [141.0, 106.0], [140.0, 127.0], [137.0, 105.0], [146.0, 116.0], [145.0, 105.0], [148.0, 112.0], [147.0, 113.0], [151.0, 113.0], [144.0, 114.0], [149.0, 128.0], [150.0, 119.0], [157.0, 138.0], [153.0, 130.0], [155.0, 116.0], [152.0, 122.5], [156.0, 123.0], [158.0, 134.0], [154.0, 133.0], [159.0, 128.0], [160.0, 140.0], [163.0, 136.0], [165.0, 141.0], [164.0, 137.0], [162.0, 145.0], [166.0, 143.0], [167.0, 149.0], [161.0, 134.0], [170.0, 142.0], [175.0, 162.0], [172.0, 149.0], [173.0, 151.0], [171.0, 144.0], [169.0, 167.0], [174.0, 150.0], [168.0, 139.0], [182.0, 161.0], [180.0, 163.0], [178.0, 158.0], [179.0, 157.0], [177.0, 166.0], [176.0, 153.0], [183.0, 169.0], [181.0, 165.5], [187.0, 173.0], [185.0, 169.0], [186.0, 163.0], [190.0, 168.0], [189.0, 183.0], [188.0, 165.0], [191.0, 172.0], [184.0, 169.0], [195.0, 173.0], [193.0, 175.0], [198.0, 170.0], [192.0, 165.0], [196.0, 184.0], [199.0, 178.0], [197.0, 175.0], [194.0, 171.0], [202.0, 180.0], [200.0, 184.0], [207.0, 184.0], [203.0, 188.0], [201.0, 186.0], [204.0, 176.0], [206.0, 175.0], [205.0, 182.0], [210.0, 178.0], [209.0, 185.0], [208.0, 179.0], [211.0, 183.0], [214.0, 194.0], [213.0, 192.0], [215.0, 200.0], [212.0, 182.0], [216.0, 174.5], [223.0, 177.0], [217.0, 184.0], [221.0, 188.0], [219.0, 183.0], [222.0, 215.0], [218.0, 203.0], [220.0, 183.0], [228.0, 169.5], [227.0, 184.0], [230.0, 196.0], [226.0, 181.0], [231.0, 217.0], [229.0, 200.0], [225.0, 185.0], [224.0, 172.5], [235.0, 165.0], [236.0, 144.0], [237.0, 151.0], [233.0, 185.0], [238.0, 217.0], [232.0, 177.0], [239.0, 214.0], [244.0, 157.0], [243.0, 186.0], [240.0, 172.5], [241.0, 164.5], [242.0, 226.5], [246.0, 240.0], [245.0, 129.0], [251.0, 131.0], [254.0, 139.0], [256.0, 87.0], [260.0, 210.0], [269.0, 196.0], [268.0, 127.5], [281.0, 183.0], [302.0, 116.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 302.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 40.0, "minX": 2.0, "maxY": 352.0, "series": [{"data": [[2.0, 44.5], [16.0, 41.5], [18.0, 43.5], [19.0, 42.0], [20.0, 40.0], [21.0, 40.0], [33.0, 41.0], [36.0, 47.5], [37.0, 44.0], [38.0, 43.0], [39.0, 43.0], [40.0, 41.0], [41.0, 43.0], [52.0, 223.0], [54.0, 44.5], [55.0, 45.0], [56.0, 45.0], [57.0, 44.0], [59.0, 43.5], [58.0, 42.0], [61.0, 41.0], [66.0, 51.0], [67.0, 49.0], [65.0, 50.0], [64.0, 352.0], [71.0, 48.0], [68.0, 69.0], [69.0, 51.0], [70.0, 58.0], [74.0, 48.5], [73.0, 49.0], [72.0, 47.0], [77.0, 58.0], [78.0, 53.5], [79.0, 98.0], [82.0, 55.0], [80.0, 54.5], [83.0, 101.0], [81.0, 57.0], [87.0, 55.5], [84.0, 60.0], [86.0, 53.0], [85.0, 61.0], [88.0, 141.0], [89.0, 83.0], [91.0, 56.0], [93.0, 57.0], [92.0, 55.0], [95.0, 67.0], [94.0, 66.0], [97.0, 75.0], [98.0, 56.0], [96.0, 77.5], [99.0, 70.0], [100.0, 71.0], [103.0, 123.0], [102.0, 149.0], [101.0, 85.0], [105.0, 186.0], [104.0, 59.0], [106.0, 70.0], [107.0, 89.0], [109.0, 71.0], [110.0, 116.0], [111.0, 82.0], [108.0, 77.5], [112.0, 92.0], [115.0, 69.0], [113.0, 124.0], [114.0, 70.0], [119.0, 84.0], [117.0, 102.0], [116.0, 104.0], [118.0, 77.0], [121.0, 93.0], [120.0, 81.0], [122.0, 70.0], [123.0, 84.0], [126.0, 93.0], [127.0, 86.0], [125.0, 85.0], [124.0, 104.0], [129.0, 88.0], [132.0, 92.0], [128.0, 90.0], [130.0, 91.0], [133.0, 93.0], [131.0, 101.0], [135.0, 137.0], [134.0, 92.0], [138.0, 113.0], [136.0, 112.0], [139.0, 114.0], [143.0, 108.0], [142.0, 104.0], [141.0, 106.0], [140.0, 127.0], [137.0, 105.0], [146.0, 116.0], [145.0, 105.0], [148.0, 112.0], [147.0, 113.0], [151.0, 113.0], [144.0, 114.0], [149.0, 128.0], [150.0, 119.0], [157.0, 138.0], [153.0, 130.0], [155.0, 116.0], [152.0, 122.5], [156.0, 123.0], [158.0, 134.0], [154.0, 133.0], [159.0, 128.0], [160.0, 140.0], [163.0, 136.0], [165.0, 141.0], [164.0, 137.0], [162.0, 145.0], [166.0, 143.0], [167.0, 149.0], [161.0, 134.0], [170.0, 142.0], [175.0, 162.0], [172.0, 149.0], [173.0, 151.0], [171.0, 144.0], [169.0, 167.0], [174.0, 150.0], [168.0, 139.0], [182.0, 161.0], [180.0, 163.0], [178.0, 158.0], [179.0, 157.0], [177.0, 166.0], [176.0, 153.0], [183.0, 169.0], [181.0, 165.5], [187.0, 173.0], [185.0, 169.0], [186.0, 163.0], [190.0, 168.0], [189.0, 183.0], [188.0, 165.0], [191.0, 172.0], [184.0, 169.0], [195.0, 173.0], [193.0, 175.0], [198.0, 170.0], [192.0, 165.0], [196.0, 184.0], [199.0, 178.0], [197.0, 175.0], [194.0, 171.0], [202.0, 180.0], [200.0, 184.0], [207.0, 184.0], [203.0, 188.0], [201.0, 186.0], [204.0, 176.0], [206.0, 175.0], [205.0, 182.0], [210.0, 178.0], [209.0, 185.0], [208.0, 179.0], [211.0, 183.0], [214.0, 194.0], [213.0, 192.0], [215.0, 200.0], [212.0, 182.0], [216.0, 174.5], [223.0, 176.5], [217.0, 184.0], [221.0, 188.0], [219.0, 183.0], [222.0, 215.0], [218.0, 203.0], [220.0, 183.0], [228.0, 169.5], [227.0, 184.0], [230.0, 196.0], [226.0, 181.0], [231.0, 217.0], [229.0, 200.0], [225.0, 185.0], [224.0, 172.5], [235.0, 165.0], [236.0, 144.0], [237.0, 151.0], [233.0, 185.0], [238.0, 217.0], [232.0, 177.0], [239.0, 214.0], [244.0, 157.0], [243.0, 186.0], [240.0, 172.5], [241.0, 164.5], [242.0, 226.5], [246.0, 240.0], [245.0, 129.0], [251.0, 131.0], [254.0, 139.0], [256.0, 87.0], [260.0, 210.0], [269.0, 196.0], [268.0, 127.5], [281.0, 183.0], [302.0, 116.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 302.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 9.9, "minX": 1.69137E12, "maxY": 206.38333333333333, "series": [{"data": [[1.69137282E12, 33.233333333333334], [1.6913712E12, 188.16666666666666], [1.6913709E12, 181.65], [1.6913706E12, 167.4], [1.69137222E12, 188.01666666666668], [1.6913703E12, 140.61666666666667], [1.69137252E12, 159.83333333333334], [1.69137E12, 9.9], [1.69137192E12, 205.68333333333334], [1.69137162E12, 194.0], [1.69137132E12, 184.2], [1.69137102E12, 184.4], [1.69137072E12, 174.91666666666666], [1.69137234E12, 180.93333333333334], [1.69137042E12, 160.76666666666668], [1.69137264E12, 154.75], [1.69137012E12, 100.56666666666666], [1.69137204E12, 184.5], [1.69137174E12, 182.56666666666666], [1.69137144E12, 185.16666666666666], [1.69137114E12, 181.26666666666668], [1.69137084E12, 183.36666666666667], [1.69137246E12, 172.96666666666667], [1.69137054E12, 164.63333333333333], [1.69137276E12, 119.93333333333334], [1.69137024E12, 143.43333333333334], [1.69137216E12, 190.98333333333332], [1.69137186E12, 200.65], [1.69137156E12, 194.98333333333332], [1.69137126E12, 183.65], [1.69137258E12, 166.26666666666668], [1.69137096E12, 184.28333333333333], [1.69137066E12, 171.55], [1.69137036E12, 151.93333333333334], [1.69137198E12, 197.26666666666668], [1.69137006E12, 62.11666666666667], [1.69137228E12, 179.38333333333333], [1.69137168E12, 206.38333333333333], [1.69137138E12, 193.13333333333333], [1.6913727E12, 123.43333333333334], [1.69137108E12, 181.61666666666667], [1.69137078E12, 162.03333333333333], [1.69137048E12, 154.88333333333333], [1.6913721E12, 191.23333333333332], [1.69137018E12, 121.05], [1.6913724E12, 166.18333333333334], [1.6913718E12, 202.33333333333334], [1.6913715E12, 194.48333333333332]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69137282E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 9.866666666666667, "minX": 1.69137E12, "maxY": 206.33333333333334, "series": [{"data": [[1.69137282E12, 33.4], [1.6913712E12, 188.11666666666667], [1.6913709E12, 181.6], [1.6913706E12, 167.5], [1.69137222E12, 188.18333333333334], [1.6913703E12, 140.55], [1.69137252E12, 159.98333333333332], [1.69137E12, 9.866666666666667], [1.69137192E12, 205.85], [1.69137162E12, 193.95], [1.69137132E12, 184.15], [1.69137102E12, 184.35], [1.69137072E12, 174.83333333333334], [1.69137234E12, 180.93333333333334], [1.69137042E12, 160.71666666666667], [1.69137264E12, 154.8], [1.69137012E12, 100.5], [1.69137204E12, 184.5], [1.69137174E12, 182.51666666666668], [1.69137144E12, 185.1], [1.69137114E12, 181.21666666666667], [1.69137084E12, 183.3], [1.69137246E12, 172.98333333333332], [1.69137054E12, 164.58333333333334], [1.69137276E12, 119.93333333333334], [1.69137024E12, 143.38333333333333], [1.69137216E12, 190.98333333333332], [1.69137186E12, 200.65], [1.69137156E12, 194.91666666666666], [1.69137126E12, 183.58333333333334], [1.69137258E12, 166.43333333333334], [1.69137096E12, 184.23333333333332], [1.69137066E12, 171.35], [1.69137036E12, 151.88333333333333], [1.69137198E12, 197.43333333333334], [1.69137006E12, 62.06666666666667], [1.69137228E12, 179.55], [1.69137168E12, 206.33333333333334], [1.69137138E12, 193.08333333333334], [1.6913727E12, 123.55], [1.69137108E12, 181.55], [1.69137078E12, 161.98333333333332], [1.69137048E12, 154.83333333333334], [1.6913721E12, 191.4], [1.69137018E12, 121.0], [1.6913724E12, 166.35], [1.6913718E12, 202.3], [1.6913715E12, 194.43333333333334]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69137282E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 9.866666666666667, "minX": 1.69137E12, "maxY": 206.33333333333334, "series": [{"data": [[1.69137282E12, 33.4], [1.6913712E12, 188.11666666666667], [1.6913709E12, 181.6], [1.6913706E12, 167.5], [1.69137222E12, 188.18333333333334], [1.6913703E12, 140.55], [1.69137252E12, 159.98333333333332], [1.69137E12, 9.866666666666667], [1.69137192E12, 205.85], [1.69137162E12, 193.95], [1.69137132E12, 184.15], [1.69137102E12, 184.35], [1.69137072E12, 174.83333333333334], [1.69137234E12, 180.93333333333334], [1.69137042E12, 160.71666666666667], [1.69137264E12, 154.8], [1.69137012E12, 100.5], [1.69137204E12, 184.5], [1.69137174E12, 182.51666666666668], [1.69137144E12, 185.1], [1.69137114E12, 181.21666666666667], [1.69137084E12, 183.3], [1.69137246E12, 172.98333333333332], [1.69137054E12, 164.58333333333334], [1.69137276E12, 119.93333333333334], [1.69137024E12, 143.38333333333333], [1.69137216E12, 190.98333333333332], [1.69137186E12, 200.65], [1.69137156E12, 194.91666666666666], [1.69137126E12, 183.58333333333334], [1.69137258E12, 166.43333333333334], [1.69137096E12, 184.23333333333332], [1.69137066E12, 171.35], [1.69137036E12, 151.88333333333333], [1.69137198E12, 197.43333333333334], [1.69137006E12, 62.06666666666667], [1.69137228E12, 179.55], [1.69137168E12, 206.33333333333334], [1.69137138E12, 193.08333333333334], [1.6913727E12, 123.55], [1.69137108E12, 181.55], [1.69137078E12, 161.98333333333332], [1.69137048E12, 154.83333333333334], [1.6913721E12, 191.4], [1.69137018E12, 121.0], [1.6913724E12, 166.35], [1.6913718E12, 202.3], [1.6913715E12, 194.43333333333334]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69137282E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 9.866666666666667, "minX": 1.69137E12, "maxY": 206.33333333333334, "series": [{"data": [[1.69137282E12, 33.4], [1.6913712E12, 188.11666666666667], [1.6913709E12, 181.6], [1.6913706E12, 167.5], [1.69137222E12, 188.18333333333334], [1.6913703E12, 140.55], [1.69137252E12, 159.98333333333332], [1.69137E12, 9.866666666666667], [1.69137192E12, 205.85], [1.69137162E12, 193.95], [1.69137132E12, 184.15], [1.69137102E12, 184.35], [1.69137072E12, 174.83333333333334], [1.69137234E12, 180.93333333333334], [1.69137042E12, 160.71666666666667], [1.69137264E12, 154.8], [1.69137012E12, 100.5], [1.69137204E12, 184.5], [1.69137174E12, 182.51666666666668], [1.69137144E12, 185.1], [1.69137114E12, 181.21666666666667], [1.69137084E12, 183.3], [1.69137246E12, 172.98333333333332], [1.69137054E12, 164.58333333333334], [1.69137276E12, 119.93333333333334], [1.69137024E12, 143.38333333333333], [1.69137216E12, 190.98333333333332], [1.69137186E12, 200.65], [1.69137156E12, 194.91666666666666], [1.69137126E12, 183.58333333333334], [1.69137258E12, 166.43333333333334], [1.69137096E12, 184.23333333333332], [1.69137066E12, 171.35], [1.69137036E12, 151.88333333333333], [1.69137198E12, 197.43333333333334], [1.69137006E12, 62.06666666666667], [1.69137228E12, 179.55], [1.69137168E12, 206.33333333333334], [1.69137138E12, 193.08333333333334], [1.6913727E12, 123.55], [1.69137108E12, 181.55], [1.69137078E12, 161.98333333333332], [1.69137048E12, 154.83333333333334], [1.6913721E12, 191.4], [1.69137018E12, 121.0], [1.6913724E12, 166.35], [1.6913718E12, 202.3], [1.6913715E12, 194.43333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69137282E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

