/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 47.0, "minX": 0.0, "maxY": 217218.0, "series": [{"data": [[0.0, 47.0], [0.1, 54.0], [0.2, 56.0], [0.3, 60.0], [0.4, 67.0], [0.5, 77.0], [0.6, 92.0], [0.7, 125.0], [0.8, 140.0], [0.9, 160.0], [1.0, 179.0], [1.1, 190.0], [1.2, 198.0], [1.3, 203.0], [1.4, 207.0], [1.5, 212.0], [1.6, 216.0], [1.7, 221.0], [1.8, 227.0], [1.9, 232.0], [2.0, 240.0], [2.1, 249.0], [2.2, 256.0], [2.3, 268.0], [2.4, 279.0], [2.5, 287.0], [2.6, 301.0], [2.7, 309.0], [2.8, 320.0], [2.9, 326.0], [3.0, 332.0], [3.1, 339.0], [3.2, 346.0], [3.3, 353.0], [3.4, 360.0], [3.5, 370.0], [3.6, 378.0], [3.7, 384.0], [3.8, 391.0], [3.9, 398.0], [4.0, 406.0], [4.1, 412.0], [4.2, 417.0], [4.3, 422.0], [4.4, 425.0], [4.5, 431.0], [4.6, 436.0], [4.7, 442.0], [4.8, 447.0], [4.9, 453.0], [5.0, 457.0], [5.1, 464.0], [5.2, 470.0], [5.3, 476.0], [5.4, 482.0], [5.5, 488.0], [5.6, 494.0], [5.7, 500.0], [5.8, 508.0], [5.9, 514.0], [6.0, 520.0], [6.1, 528.0], [6.2, 535.0], [6.3, 540.0], [6.4, 548.0], [6.5, 553.0], [6.6, 559.0], [6.7, 564.0], [6.8, 568.0], [6.9, 573.0], [7.0, 578.0], [7.1, 582.0], [7.2, 588.0], [7.3, 593.0], [7.4, 598.0], [7.5, 603.0], [7.6, 608.0], [7.7, 613.0], [7.8, 618.0], [7.9, 622.0], [8.0, 627.0], [8.1, 631.0], [8.2, 636.0], [8.3, 643.0], [8.4, 650.0], [8.5, 654.0], [8.6, 661.0], [8.7, 669.0], [8.8, 676.0], [8.9, 681.0], [9.0, 688.0], [9.1, 696.0], [9.2, 703.0], [9.3, 709.0], [9.4, 714.0], [9.5, 720.0], [9.6, 725.0], [9.7, 730.0], [9.8, 733.0], [9.9, 739.0], [10.0, 745.0], [10.1, 751.0], [10.2, 756.0], [10.3, 761.0], [10.4, 768.0], [10.5, 773.0], [10.6, 781.0], [10.7, 787.0], [10.8, 794.0], [10.9, 802.0], [11.0, 810.0], [11.1, 818.0], [11.2, 825.0], [11.3, 833.0], [11.4, 842.0], [11.5, 849.0], [11.6, 855.0], [11.7, 861.0], [11.8, 867.0], [11.9, 875.0], [12.0, 881.0], [12.1, 887.0], [12.2, 892.0], [12.3, 898.0], [12.4, 904.0], [12.5, 910.0], [12.6, 916.0], [12.7, 922.0], [12.8, 927.0], [12.9, 935.0], [13.0, 939.0], [13.1, 945.0], [13.2, 950.0], [13.3, 956.0], [13.4, 961.0], [13.5, 967.0], [13.6, 972.0], [13.7, 977.0], [13.8, 984.0], [13.9, 989.0], [14.0, 997.0], [14.1, 1005.0], [14.2, 1011.0], [14.3, 1018.0], [14.4, 1023.0], [14.5, 1029.0], [14.6, 1034.0], [14.7, 1041.0], [14.8, 1046.0], [14.9, 1051.0], [15.0, 1057.0], [15.1, 1063.0], [15.2, 1067.0], [15.3, 1074.0], [15.4, 1080.0], [15.5, 1087.0], [15.6, 1092.0], [15.7, 1097.0], [15.8, 1103.0], [15.9, 1108.0], [16.0, 1114.0], [16.1, 1119.0], [16.2, 1124.0], [16.3, 1129.0], [16.4, 1134.0], [16.5, 1140.0], [16.6, 1144.0], [16.7, 1150.0], [16.8, 1156.0], [16.9, 1162.0], [17.0, 1171.0], [17.1, 1177.0], [17.2, 1181.0], [17.3, 1188.0], [17.4, 1193.0], [17.5, 1199.0], [17.6, 1205.0], [17.7, 1209.0], [17.8, 1216.0], [17.9, 1222.0], [18.0, 1227.0], [18.1, 1232.0], [18.2, 1238.0], [18.3, 1243.0], [18.4, 1248.0], [18.5, 1252.0], [18.6, 1258.0], [18.7, 1264.0], [18.8, 1270.0], [18.9, 1276.0], [19.0, 1283.0], [19.1, 1287.0], [19.2, 1293.0], [19.3, 1299.0], [19.4, 1305.0], [19.5, 1311.0], [19.6, 1317.0], [19.7, 1323.0], [19.8, 1330.0], [19.9, 1334.0], [20.0, 1340.0], [20.1, 1346.0], [20.2, 1354.0], [20.3, 1361.0], [20.4, 1369.0], [20.5, 1374.0], [20.6, 1380.0], [20.7, 1385.0], [20.8, 1389.0], [20.9, 1396.0], [21.0, 1400.0], [21.1, 1409.0], [21.2, 1415.0], [21.3, 1423.0], [21.4, 1430.0], [21.5, 1436.0], [21.6, 1440.0], [21.7, 1448.0], [21.8, 1454.0], [21.9, 1459.0], [22.0, 1465.0], [22.1, 1470.0], [22.2, 1476.0], [22.3, 1482.0], [22.4, 1488.0], [22.5, 1493.0], [22.6, 1498.0], [22.7, 1505.0], [22.8, 1510.0], [22.9, 1516.0], [23.0, 1521.0], [23.1, 1527.0], [23.2, 1532.0], [23.3, 1536.0], [23.4, 1544.0], [23.5, 1550.0], [23.6, 1556.0], [23.7, 1562.0], [23.8, 1568.0], [23.9, 1573.0], [24.0, 1578.0], [24.1, 1584.0], [24.2, 1591.0], [24.3, 1596.0], [24.4, 1601.0], [24.5, 1607.0], [24.6, 1613.0], [24.7, 1619.0], [24.8, 1623.0], [24.9, 1628.0], [25.0, 1635.0], [25.1, 1640.0], [25.2, 1647.0], [25.3, 1653.0], [25.4, 1659.0], [25.5, 1664.0], [25.6, 1670.0], [25.7, 1676.0], [25.8, 1682.0], [25.9, 1689.0], [26.0, 1696.0], [26.1, 1703.0], [26.2, 1709.0], [26.3, 1713.0], [26.4, 1719.0], [26.5, 1725.0], [26.6, 1730.0], [26.7, 1736.0], [26.8, 1742.0], [26.9, 1748.0], [27.0, 1754.0], [27.1, 1759.0], [27.2, 1766.0], [27.3, 1772.0], [27.4, 1777.0], [27.5, 1782.0], [27.6, 1789.0], [27.7, 1795.0], [27.8, 1800.0], [27.9, 1805.0], [28.0, 1810.0], [28.1, 1816.0], [28.2, 1822.0], [28.3, 1829.0], [28.4, 1836.0], [28.5, 1842.0], [28.6, 1847.0], [28.7, 1852.0], [28.8, 1858.0], [28.9, 1864.0], [29.0, 1868.0], [29.1, 1874.0], [29.2, 1879.0], [29.3, 1885.0], [29.4, 1891.0], [29.5, 1898.0], [29.6, 1904.0], [29.7, 1909.0], [29.8, 1914.0], [29.9, 1920.0], [30.0, 1927.0], [30.1, 1932.0], [30.2, 1937.0], [30.3, 1942.0], [30.4, 1947.0], [30.5, 1953.0], [30.6, 1958.0], [30.7, 1962.0], [30.8, 1968.0], [30.9, 1973.0], [31.0, 1978.0], [31.1, 1983.0], [31.2, 1990.0], [31.3, 1996.0], [31.4, 2002.0], [31.5, 2007.0], [31.6, 2013.0], [31.7, 2018.0], [31.8, 2022.0], [31.9, 2028.0], [32.0, 2033.0], [32.1, 2039.0], [32.2, 2044.0], [32.3, 2048.0], [32.4, 2052.0], [32.5, 2057.0], [32.6, 2061.0], [32.7, 2066.0], [32.8, 2072.0], [32.9, 2077.0], [33.0, 2081.0], [33.1, 2086.0], [33.2, 2091.0], [33.3, 2096.0], [33.4, 2100.0], [33.5, 2105.0], [33.6, 2110.0], [33.7, 2115.0], [33.8, 2120.0], [33.9, 2126.0], [34.0, 2131.0], [34.1, 2136.0], [34.2, 2141.0], [34.3, 2146.0], [34.4, 2152.0], [34.5, 2158.0], [34.6, 2165.0], [34.7, 2169.0], [34.8, 2174.0], [34.9, 2179.0], [35.0, 2184.0], [35.1, 2189.0], [35.2, 2194.0], [35.3, 2201.0], [35.4, 2206.0], [35.5, 2211.0], [35.6, 2216.0], [35.7, 2222.0], [35.8, 2226.0], [35.9, 2231.0], [36.0, 2234.0], [36.1, 2239.0], [36.2, 2244.0], [36.3, 2250.0], [36.4, 2253.0], [36.5, 2258.0], [36.6, 2264.0], [36.7, 2270.0], [36.8, 2274.0], [36.9, 2280.0], [37.0, 2285.0], [37.1, 2291.0], [37.2, 2298.0], [37.3, 2304.0], [37.4, 2307.0], [37.5, 2311.0], [37.6, 2316.0], [37.7, 2322.0], [37.8, 2328.0], [37.9, 2334.0], [38.0, 2339.0], [38.1, 2345.0], [38.2, 2351.0], [38.3, 2356.0], [38.4, 2362.0], [38.5, 2368.0], [38.6, 2374.0], [38.7, 2378.0], [38.8, 2383.0], [38.9, 2387.0], [39.0, 2393.0], [39.1, 2398.0], [39.2, 2403.0], [39.3, 2410.0], [39.4, 2415.0], [39.5, 2421.0], [39.6, 2426.0], [39.7, 2434.0], [39.8, 2439.0], [39.9, 2445.0], [40.0, 2449.0], [40.1, 2455.0], [40.2, 2460.0], [40.3, 2465.0], [40.4, 2471.0], [40.5, 2476.0], [40.6, 2482.0], [40.7, 2488.0], [40.8, 2493.0], [40.9, 2499.0], [41.0, 2504.0], [41.1, 2510.0], [41.2, 2515.0], [41.3, 2520.0], [41.4, 2527.0], [41.5, 2532.0], [41.6, 2537.0], [41.7, 2542.0], [41.8, 2551.0], [41.9, 2557.0], [42.0, 2563.0], [42.1, 2568.0], [42.2, 2573.0], [42.3, 2581.0], [42.4, 2587.0], [42.5, 2594.0], [42.6, 2601.0], [42.7, 2607.0], [42.8, 2612.0], [42.9, 2619.0], [43.0, 2624.0], [43.1, 2630.0], [43.2, 2637.0], [43.3, 2643.0], [43.4, 2650.0], [43.5, 2657.0], [43.6, 2662.0], [43.7, 2669.0], [43.8, 2676.0], [43.9, 2681.0], [44.0, 2688.0], [44.1, 2693.0], [44.2, 2699.0], [44.3, 2705.0], [44.4, 2711.0], [44.5, 2717.0], [44.6, 2723.0], [44.7, 2729.0], [44.8, 2735.0], [44.9, 2740.0], [45.0, 2745.0], [45.1, 2752.0], [45.2, 2758.0], [45.3, 2765.0], [45.4, 2769.0], [45.5, 2775.0], [45.6, 2781.0], [45.7, 2786.0], [45.8, 2792.0], [45.9, 2798.0], [46.0, 2805.0], [46.1, 2809.0], [46.2, 2814.0], [46.3, 2824.0], [46.4, 2829.0], [46.5, 2835.0], [46.6, 2840.0], [46.7, 2845.0], [46.8, 2851.0], [46.9, 2858.0], [47.0, 2863.0], [47.1, 2870.0], [47.2, 2875.0], [47.3, 2881.0], [47.4, 2887.0], [47.5, 2892.0], [47.6, 2898.0], [47.7, 2906.0], [47.8, 2911.0], [47.9, 2917.0], [48.0, 2923.0], [48.1, 2928.0], [48.2, 2933.0], [48.3, 2941.0], [48.4, 2946.0], [48.5, 2953.0], [48.6, 2958.0], [48.7, 2963.0], [48.8, 2968.0], [48.9, 2974.0], [49.0, 2979.0], [49.1, 2985.0], [49.2, 2992.0], [49.3, 2999.0], [49.4, 3005.0], [49.5, 3012.0], [49.6, 3017.0], [49.7, 3022.0], [49.8, 3029.0], [49.9, 3034.0], [50.0, 3040.0], [50.1, 3047.0], [50.2, 3052.0], [50.3, 3057.0], [50.4, 3064.0], [50.5, 3071.0], [50.6, 3077.0], [50.7, 3083.0], [50.8, 3091.0], [50.9, 3097.0], [51.0, 3101.0], [51.1, 3106.0], [51.2, 3114.0], [51.3, 3121.0], [51.4, 3126.0], [51.5, 3132.0], [51.6, 3137.0], [51.7, 3143.0], [51.8, 3151.0], [51.9, 3157.0], [52.0, 3163.0], [52.1, 3170.0], [52.2, 3175.0], [52.3, 3180.0], [52.4, 3188.0], [52.5, 3196.0], [52.6, 3202.0], [52.7, 3210.0], [52.8, 3216.0], [52.9, 3223.0], [53.0, 3230.0], [53.1, 3236.0], [53.2, 3244.0], [53.3, 3251.0], [53.4, 3257.0], [53.5, 3265.0], [53.6, 3269.0], [53.7, 3275.0], [53.8, 3280.0], [53.9, 3290.0], [54.0, 3296.0], [54.1, 3303.0], [54.2, 3310.0], [54.3, 3315.0], [54.4, 3322.0], [54.5, 3330.0], [54.6, 3340.0], [54.7, 3346.0], [54.8, 3353.0], [54.9, 3361.0], [55.0, 3368.0], [55.1, 3375.0], [55.2, 3381.0], [55.3, 3390.0], [55.4, 3395.0], [55.5, 3402.0], [55.6, 3409.0], [55.7, 3414.0], [55.8, 3423.0], [55.9, 3432.0], [56.0, 3440.0], [56.1, 3447.0], [56.2, 3457.0], [56.3, 3464.0], [56.4, 3470.0], [56.5, 3475.0], [56.6, 3484.0], [56.7, 3489.0], [56.8, 3494.0], [56.9, 3502.0], [57.0, 3511.0], [57.1, 3518.0], [57.2, 3523.0], [57.3, 3531.0], [57.4, 3537.0], [57.5, 3543.0], [57.6, 3551.0], [57.7, 3558.0], [57.8, 3563.0], [57.9, 3569.0], [58.0, 3577.0], [58.1, 3584.0], [58.2, 3591.0], [58.3, 3600.0], [58.4, 3605.0], [58.5, 3611.0], [58.6, 3619.0], [58.7, 3625.0], [58.8, 3631.0], [58.9, 3639.0], [59.0, 3646.0], [59.1, 3652.0], [59.2, 3657.0], [59.3, 3663.0], [59.4, 3670.0], [59.5, 3677.0], [59.6, 3684.0], [59.7, 3689.0], [59.8, 3695.0], [59.9, 3703.0], [60.0, 3710.0], [60.1, 3716.0], [60.2, 3723.0], [60.3, 3729.0], [60.4, 3734.0], [60.5, 3741.0], [60.6, 3745.0], [60.7, 3751.0], [60.8, 3756.0], [60.9, 3761.0], [61.0, 3765.0], [61.1, 3772.0], [61.2, 3778.0], [61.3, 3783.0], [61.4, 3789.0], [61.5, 3797.0], [61.6, 3806.0], [61.7, 3812.0], [61.8, 3818.0], [61.9, 3824.0], [62.0, 3828.0], [62.1, 3832.0], [62.2, 3839.0], [62.3, 3845.0], [62.4, 3850.0], [62.5, 3857.0], [62.6, 3864.0], [62.7, 3869.0], [62.8, 3874.0], [62.9, 3880.0], [63.0, 3886.0], [63.1, 3891.0], [63.2, 3896.0], [63.3, 3902.0], [63.4, 3907.0], [63.5, 3914.0], [63.6, 3919.0], [63.7, 3925.0], [63.8, 3931.0], [63.9, 3938.0], [64.0, 3946.0], [64.1, 3951.0], [64.2, 3957.0], [64.3, 3961.0], [64.4, 3968.0], [64.5, 3973.0], [64.6, 3981.0], [64.7, 3985.0], [64.8, 3991.0], [64.9, 3996.0], [65.0, 4002.0], [65.1, 4008.0], [65.2, 4014.0], [65.3, 4020.0], [65.4, 4025.0], [65.5, 4031.0], [65.6, 4038.0], [65.7, 4044.0], [65.8, 4049.0], [65.9, 4053.0], [66.0, 4058.0], [66.1, 4063.0], [66.2, 4069.0], [66.3, 4075.0], [66.4, 4081.0], [66.5, 4087.0], [66.6, 4094.0], [66.7, 4100.0], [66.8, 4105.0], [66.9, 4109.0], [67.0, 4115.0], [67.1, 4120.0], [67.2, 4125.0], [67.3, 4130.0], [67.4, 4134.0], [67.5, 4141.0], [67.6, 4146.0], [67.7, 4151.0], [67.8, 4157.0], [67.9, 4163.0], [68.0, 4170.0], [68.1, 4176.0], [68.2, 4181.0], [68.3, 4187.0], [68.4, 4192.0], [68.5, 4197.0], [68.6, 4203.0], [68.7, 4208.0], [68.8, 4214.0], [68.9, 4219.0], [69.0, 4225.0], [69.1, 4232.0], [69.2, 4238.0], [69.3, 4243.0], [69.4, 4247.0], [69.5, 4251.0], [69.6, 4257.0], [69.7, 4263.0], [69.8, 4268.0], [69.9, 4273.0], [70.0, 4278.0], [70.1, 4284.0], [70.2, 4290.0], [70.3, 4295.0], [70.4, 4300.0], [70.5, 4304.0], [70.6, 4309.0], [70.7, 4314.0], [70.8, 4319.0], [70.9, 4324.0], [71.0, 4329.0], [71.1, 4336.0], [71.2, 4341.0], [71.3, 4345.0], [71.4, 4351.0], [71.5, 4357.0], [71.6, 4363.0], [71.7, 4368.0], [71.8, 4374.0], [71.9, 4379.0], [72.0, 4384.0], [72.1, 4389.0], [72.2, 4396.0], [72.3, 4400.0], [72.4, 4405.0], [72.5, 4409.0], [72.6, 4414.0], [72.7, 4419.0], [72.8, 4424.0], [72.9, 4429.0], [73.0, 4434.0], [73.1, 4439.0], [73.2, 4447.0], [73.3, 4453.0], [73.4, 4460.0], [73.5, 4467.0], [73.6, 4473.0], [73.7, 4480.0], [73.8, 4486.0], [73.9, 4492.0], [74.0, 4499.0], [74.1, 4505.0], [74.2, 4511.0], [74.3, 4518.0], [74.4, 4525.0], [74.5, 4532.0], [74.6, 4538.0], [74.7, 4543.0], [74.8, 4548.0], [74.9, 4556.0], [75.0, 4561.0], [75.1, 4567.0], [75.2, 4572.0], [75.3, 4578.0], [75.4, 4586.0], [75.5, 4591.0], [75.6, 4597.0], [75.7, 4603.0], [75.8, 4609.0], [75.9, 4615.0], [76.0, 4622.0], [76.1, 4629.0], [76.2, 4636.0], [76.3, 4642.0], [76.4, 4648.0], [76.5, 4654.0], [76.6, 4660.0], [76.7, 4668.0], [76.8, 4674.0], [76.9, 4681.0], [77.0, 4688.0], [77.1, 4693.0], [77.2, 4698.0], [77.3, 4707.0], [77.4, 4714.0], [77.5, 4722.0], [77.6, 4729.0], [77.7, 4735.0], [77.8, 4743.0], [77.9, 4750.0], [78.0, 4756.0], [78.1, 4762.0], [78.2, 4769.0], [78.3, 4779.0], [78.4, 4785.0], [78.5, 4794.0], [78.6, 4802.0], [78.7, 4809.0], [78.8, 4817.0], [78.9, 4824.0], [79.0, 4831.0], [79.1, 4836.0], [79.2, 4845.0], [79.3, 4853.0], [79.4, 4860.0], [79.5, 4866.0], [79.6, 4872.0], [79.7, 4879.0], [79.8, 4886.0], [79.9, 4893.0], [80.0, 4900.0], [80.1, 4907.0], [80.2, 4915.0], [80.3, 4921.0], [80.4, 4928.0], [80.5, 4937.0], [80.6, 4947.0], [80.7, 4954.0], [80.8, 4961.0], [80.9, 4968.0], [81.0, 4975.0], [81.1, 4982.0], [81.2, 4988.0], [81.3, 4995.0], [81.4, 5004.0], [81.5, 5012.0], [81.6, 5018.0], [81.7, 5027.0], [81.8, 5035.0], [81.9, 5044.0], [82.0, 5052.0], [82.1, 5060.0], [82.2, 5067.0], [82.3, 5072.0], [82.4, 5081.0], [82.5, 5088.0], [82.6, 5097.0], [82.7, 5107.0], [82.8, 5116.0], [82.9, 5122.0], [83.0, 5130.0], [83.1, 5141.0], [83.2, 5149.0], [83.3, 5158.0], [83.4, 5166.0], [83.5, 5175.0], [83.6, 5184.0], [83.7, 5191.0], [83.8, 5201.0], [83.9, 5209.0], [84.0, 5216.0], [84.1, 5225.0], [84.2, 5235.0], [84.3, 5245.0], [84.4, 5254.0], [84.5, 5270.0], [84.6, 5280.0], [84.7, 5291.0], [84.8, 5300.0], [84.9, 5309.0], [85.0, 5318.0], [85.1, 5326.0], [85.2, 5337.0], [85.3, 5347.0], [85.4, 5354.0], [85.5, 5362.0], [85.6, 5372.0], [85.7, 5381.0], [85.8, 5390.0], [85.9, 5404.0], [86.0, 5415.0], [86.1, 5426.0], [86.2, 5439.0], [86.3, 5454.0], [86.4, 5466.0], [86.5, 5480.0], [86.6, 5495.0], [86.7, 5508.0], [86.8, 5520.0], [86.9, 5533.0], [87.0, 5545.0], [87.1, 5559.0], [87.2, 5575.0], [87.3, 5589.0], [87.4, 5602.0], [87.5, 5616.0], [87.6, 5629.0], [87.7, 5650.0], [87.8, 5661.0], [87.9, 5677.0], [88.0, 5691.0], [88.1, 5709.0], [88.2, 5727.0], [88.3, 5741.0], [88.4, 5755.0], [88.5, 5771.0], [88.6, 5791.0], [88.7, 5811.0], [88.8, 5833.0], [88.9, 5853.0], [89.0, 5868.0], [89.1, 5887.0], [89.2, 5907.0], [89.3, 5924.0], [89.4, 5944.0], [89.5, 5969.0], [89.6, 5991.0], [89.7, 6014.0], [89.8, 6033.0], [89.9, 6056.0], [90.0, 6080.0], [90.1, 6108.0], [90.2, 6142.0], [90.3, 6174.0], [90.4, 6200.0], [90.5, 6234.0], [90.6, 6266.0], [90.7, 6300.0], [90.8, 6327.0], [90.9, 6364.0], [91.0, 6397.0], [91.1, 6437.0], [91.2, 6489.0], [91.3, 6535.0], [91.4, 6582.0], [91.5, 6619.0], [91.6, 6668.0], [91.7, 6711.0], [91.8, 6747.0], [91.9, 6822.0], [92.0, 6872.0], [92.1, 6929.0], [92.2, 7013.0], [92.3, 7116.0], [92.4, 7202.0], [92.5, 7306.0], [92.6, 7426.0], [92.7, 7543.0], [92.8, 7730.0], [92.9, 7877.0], [93.0, 8057.0], [93.1, 8157.0], [93.2, 8272.0], [93.3, 8470.0], [93.4, 8790.0], [93.5, 8984.0], [93.6, 9119.0], [93.7, 9235.0], [93.8, 9306.0], [93.9, 9420.0], [94.0, 9534.0], [94.1, 9631.0], [94.2, 9773.0], [94.3, 10000.0], [94.4, 10236.0], [94.5, 10463.0], [94.6, 10620.0], [94.7, 10753.0], [94.8, 10846.0], [94.9, 10950.0], [95.0, 11056.0], [95.1, 11135.0], [95.2, 11226.0], [95.3, 11367.0], [95.4, 11531.0], [95.5, 11612.0], [95.6, 11799.0], [95.7, 12014.0], [95.8, 12393.0], [95.9, 12910.0], [96.0, 13296.0], [96.1, 13499.0], [96.2, 13673.0], [96.3, 13820.0], [96.4, 14030.0], [96.5, 14255.0], [96.6, 14395.0], [96.7, 14499.0], [96.8, 14630.0], [96.9, 14694.0], [97.0, 14766.0], [97.1, 14836.0], [97.2, 14927.0], [97.3, 14996.0], [97.4, 15095.0], [97.5, 15172.0], [97.6, 15242.0], [97.7, 15297.0], [97.8, 15366.0], [97.9, 15451.0], [98.0, 15505.0], [98.1, 15579.0], [98.2, 15699.0], [98.3, 15804.0], [98.4, 15947.0], [98.5, 16229.0], [98.6, 16569.0], [98.7, 17174.0], [98.8, 18552.0], [98.9, 23324.0], [99.0, 26119.0], [99.1, 26441.0], [99.2, 26620.0], [99.3, 26809.0], [99.4, 27012.0], [99.5, 29879.0], [99.6, 30424.0], [99.7, 31614.0], [99.8, 58378.0], [99.9, 111229.0], [100.0, 217218.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 747.0, "series": [{"data": [[0.0, 230.0], [215200.0, 1.0], [109900.0, 5.0], [111500.0, 1.0], [110700.0, 2.0], [114700.0, 1.0], [118700.0, 3.0], [121100.0, 1.0], [121900.0, 1.0], [100.0, 223.0], [200.0, 500.0], [54900.0, 1.0], [58900.0, 2.0], [58100.0, 1.0], [63700.0, 1.0], [300.0, 485.0], [400.0, 650.0], [113000.0, 1.0], [118600.0, 2.0], [500.0, 643.0], [600.0, 635.0], [700.0, 627.0], [800.0, 537.0], [217200.0, 1.0], [900.0, 624.0], [1000.0, 632.0], [1100.0, 648.0], [1200.0, 660.0], [1300.0, 610.0], [1400.0, 610.0], [1500.0, 644.0], [1600.0, 616.0], [1700.0, 633.0], [1800.0, 653.0], [1900.0, 666.0], [2000.0, 747.0], [2100.0, 688.0], [2300.0, 702.0], [2200.0, 716.0], [2400.0, 658.0], [2500.0, 612.0], [2600.0, 596.0], [2700.0, 631.0], [2800.0, 629.0], [2900.0, 614.0], [3000.0, 614.0], [3100.0, 579.0], [3300.0, 525.0], [3200.0, 545.0], [3400.0, 515.0], [3500.0, 527.0], [3600.0, 575.0], [3700.0, 613.0], [3800.0, 639.0], [3900.0, 621.0], [4000.0, 639.0], [4300.0, 697.0], [4100.0, 679.0], [4200.0, 680.0], [4600.0, 579.0], [4500.0, 598.0], [4400.0, 629.0], [4800.0, 524.0], [4700.0, 502.0], [4900.0, 502.0], [5100.0, 428.0], [5000.0, 461.0], [5200.0, 369.0], [5300.0, 400.0], [5500.0, 272.0], [5400.0, 280.0], [5600.0, 247.0], [5700.0, 218.0], [5800.0, 196.0], [6000.0, 162.0], [6100.0, 119.0], [5900.0, 169.0], [6300.0, 114.0], [6200.0, 110.0], [6400.0, 80.0], [6500.0, 83.0], [6600.0, 82.0], [6700.0, 76.0], [108900.0, 1.0], [6900.0, 48.0], [6800.0, 63.0], [109700.0, 2.0], [7100.0, 47.0], [7000.0, 32.0], [111300.0, 2.0], [114500.0, 1.0], [7400.0, 39.0], [7200.0, 31.0], [7300.0, 33.0], [118500.0, 2.0], [7600.0, 16.0], [7500.0, 23.0], [120100.0, 1.0], [7900.0, 20.0], [7800.0, 22.0], [7700.0, 22.0], [8000.0, 26.0], [8100.0, 44.0], [8300.0, 22.0], [8200.0, 22.0], [8400.0, 16.0], [8500.0, 9.0], [8700.0, 17.0], [8600.0, 10.0], [8800.0, 14.0], [9000.0, 25.0], [9200.0, 42.0], [9100.0, 36.0], [8900.0, 23.0], [9300.0, 34.0], [9500.0, 42.0], [9400.0, 29.0], [9600.0, 26.0], [9700.0, 31.0], [9800.0, 12.0], [10000.0, 22.0], [10200.0, 21.0], [10100.0, 8.0], [9900.0, 13.0], [10700.0, 30.0], [10400.0, 15.0], [10300.0, 15.0], [10500.0, 25.0], [10600.0, 23.0], [10800.0, 40.0], [10900.0, 40.0], [11100.0, 43.0], [11000.0, 40.0], [11200.0, 29.0], [11500.0, 40.0], [11600.0, 26.0], [11700.0, 15.0], [11300.0, 25.0], [11400.0, 21.0], [12200.0, 5.0], [11800.0, 22.0], [12000.0, 21.0], [12100.0, 8.0], [11900.0, 8.0], [12600.0, 10.0], [12500.0, 6.0], [12400.0, 6.0], [12300.0, 10.0], [12700.0, 5.0], [13300.0, 19.0], [13200.0, 17.0], [13100.0, 7.0], [13000.0, 6.0], [12900.0, 9.0], [12800.0, 7.0], [13600.0, 26.0], [13500.0, 17.0], [13700.0, 24.0], [13800.0, 23.0], [13400.0, 18.0], [14000.0, 15.0], [13900.0, 15.0], [14100.0, 17.0], [14200.0, 19.0], [14300.0, 30.0], [14600.0, 49.0], [14400.0, 37.0], [14800.0, 47.0], [14700.0, 48.0], [14500.0, 27.0], [14900.0, 49.0], [15000.0, 37.0], [15100.0, 57.0], [15300.0, 54.0], [15200.0, 53.0], [15400.0, 51.0], [15500.0, 43.0], [15600.0, 35.0], [15700.0, 33.0], [15800.0, 28.0], [15900.0, 18.0], [16000.0, 16.0], [16200.0, 12.0], [16100.0, 12.0], [16300.0, 7.0], [17200.0, 7.0], [16800.0, 5.0], [17000.0, 3.0], [16600.0, 10.0], [17400.0, 3.0], [16400.0, 14.0], [18200.0, 1.0], [18400.0, 1.0], [18000.0, 5.0], [18600.0, 2.0], [19000.0, 1.0], [18800.0, 1.0], [19400.0, 1.0], [19600.0, 3.0], [20200.0, 2.0], [20400.0, 2.0], [21200.0, 2.0], [20800.0, 1.0], [20600.0, 1.0], [22200.0, 1.0], [22600.0, 1.0], [23600.0, 1.0], [24000.0, 1.0], [24400.0, 1.0], [25000.0, 2.0], [26200.0, 12.0], [26400.0, 14.0], [26600.0, 17.0], [25800.0, 7.0], [26000.0, 11.0], [26800.0, 21.0], [27000.0, 13.0], [27200.0, 1.0], [28600.0, 1.0], [28400.0, 1.0], [28200.0, 1.0], [29400.0, 1.0], [29600.0, 2.0], [29000.0, 1.0], [29800.0, 6.0], [30200.0, 10.0], [30400.0, 5.0], [30000.0, 9.0], [30600.0, 9.0], [31600.0, 1.0], [30800.0, 2.0], [31400.0, 1.0], [31800.0, 5.0], [32000.0, 4.0], [32400.0, 1.0], [32200.0, 1.0], [33200.0, 1.0], [34000.0, 1.0], [41600.0, 1.0], [216700.0, 1.0], [57600.0, 1.0], [58800.0, 1.0], [58000.0, 2.0], [59200.0, 1.0], [59600.0, 1.0], [68000.0, 1.0], [110400.0, 1.0], [111200.0, 7.0], [112000.0, 3.0], [112800.0, 1.0], [120800.0, 1.0], [215300.0, 1.0], [110300.0, 2.0], [111100.0, 2.0], [111900.0, 1.0], [112700.0, 1.0], [33900.0, 2.0], [39100.0, 1.0], [217100.0, 2.0], [57100.0, 1.0], [58300.0, 1.0], [57900.0, 1.0], [59100.0, 1.0], [67800.0, 1.0], [112600.0, 1.0], [121400.0, 1.0], [110900.0, 2.0], [17100.0, 7.0], [17300.0, 6.0], [16500.0, 8.0], [16700.0, 4.0], [16900.0, 7.0], [17500.0, 1.0], [18300.0, 2.0], [17900.0, 4.0], [18100.0, 2.0], [17700.0, 2.0], [18900.0, 1.0], [18700.0, 2.0], [18500.0, 2.0], [19300.0, 1.0], [19900.0, 4.0], [20900.0, 1.0], [21300.0, 1.0], [20500.0, 2.0], [22100.0, 2.0], [22500.0, 2.0], [22700.0, 1.0], [23300.0, 1.0], [24500.0, 1.0], [24700.0, 1.0], [26500.0, 22.0], [26300.0, 11.0], [25900.0, 10.0], [26100.0, 11.0], [27100.0, 7.0], [26900.0, 13.0], [26700.0, 22.0], [27300.0, 1.0], [27500.0, 1.0], [28700.0, 2.0], [29300.0, 1.0], [29100.0, 1.0], [30500.0, 8.0], [29700.0, 5.0], [29900.0, 4.0], [30700.0, 4.0], [30100.0, 5.0], [30300.0, 5.0], [31100.0, 4.0], [31700.0, 4.0], [30900.0, 4.0], [31900.0, 1.0], [32300.0, 1.0], [33000.0, 1.0], [33400.0, 1.0], [37000.0, 1.0], [57800.0, 2.0], [58200.0, 1.0], [67600.0, 1.0], [109200.0, 1.0], [110000.0, 1.0], [112400.0, 1.0], [110800.0, 3.0], [113200.0, 1.0], [121200.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 217200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 416.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 28029.0, "series": [{"data": [[0.0, 2095.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 6211.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 28029.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 416.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.2195121951219519, "minX": 1.69214928E12, "maxY": 100.0, "series": [{"data": [[1.69215096E12, 93.86159844054579], [1.69215066E12, 76.84243176178664], [1.69215036E12, 60.033594624860015], [1.69214946E12, 10.006622516556304], [1.69215006E12, 43.02656042496683], [1.69214976E12, 26.65103598691389], [1.69215198E12, 16.470723306544194], [1.69215024E12, 53.06185567010309], [1.69214958E12, 16.66006600660067], [1.69214988E12, 33.389312977099195], [1.69215186E12, 29.934354485776804], [1.69215156E12, 59.986419753086416], [1.69215126E12, 90.99550224887555], [1.69215144E12, 70.0], [1.69215114E12, 100.0], [1.69215084E12, 86.73708206686933], [1.69215054E12, 70.19008264462812], [1.69214928E12, 1.2195121951219519], [1.69215072E12, 79.56152125279641], [1.69215042E12, 63.468797564687975], [1.6921494E12, 6.686358754027929], [1.69215012E12, 46.72942643391514], [1.6921497E12, 23.363733905579398], [1.69215204E12, 10.0], [1.69215E12, 40.02489177489177], [1.69215174E12, 40.0], [1.69214982E12, 30.136531365313658], [1.69215192E12, 20.011124845488254], [1.69215162E12, 51.114285714285714], [1.69215132E12, 81.03457106274], [1.69215102E12, 96.69284064665128], [1.6921512E12, 93.97466960352409], [1.6921509E12, 89.93631436314358], [1.6921506E12, 73.39699863574346], [1.6921503E12, 56.70634037819799], [1.69214952E12, 13.465962441314552], [1.69215048E12, 66.5398110661268], [1.69214934E12, 3.5938803894297635], [1.69215018E12, 50.014909478168256], [1.69214964E12, 20.049833887043206], [1.6921521E12, 9.845890410958903], [1.69214994E12, 36.633699633699635], [1.6921518E12, 33.202914798206265], [1.6921515E12, 63.70665083135394], [1.69215168E12, 45.86387434554974], [1.69215138E12, 76.24581724581728], [1.69215108E12, 99.96708463949837], [1.69215078E12, 83.13253012048196]], "isOverall": false, "label": "jp@gc - Stepping Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6921521E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 144.79844961240303, "minX": 1.0, "maxY": 48326.2, "series": [{"data": [[2.0, 214.38129496402877], [3.0, 243.13983050847466], [4.0, 326.7838983050846], [5.0, 328.74632352941194], [6.0, 379.10839160839174], [7.0, 448.91134751773023], [8.0, 511.5464285714287], [9.0, 586.2007168458788], [10.0, 657.8732394366195], [11.0, 756.8571428571428], [12.0, 985.9403669724771], [13.0, 883.6591760299627], [14.0, 894.0872727272724], [15.0, 1004.9247311827952], [16.0, 1030.6200716845876], [17.0, 1129.4022140221396], [18.0, 1256.5697674418595], [19.0, 1238.3525179856108], [20.0, 1429.4859241126078], [21.0, 1368.4805653710252], [22.0, 1440.251851851851], [23.0, 1464.7671232876717], [24.0, 1514.1808510638298], [25.0, 1671.7822878228778], [26.0, 1648.7560975609765], [27.0, 1739.7304964538998], [28.0, 1890.2316602316607], [29.0, 2452.75892857143], [30.0, 2016.9860139860134], [31.0, 2053.5920577617344], [32.0, 2080.9964028776976], [33.0, 2061.644128113881], [34.0, 2179.7259259259263], [35.0, 2419.267605633803], [36.0, 2356.701818181819], [37.0, 3401.3175355450244], [38.0, 2646.6463878327004], [39.0, 2483.6035087719283], [40.0, 2601.703327693174], [41.0, 2686.4708029197086], [42.0, 2718.8185053380785], [43.0, 2771.2135593220346], [44.0, 2910.2226720647773], [45.0, 7404.2767857142835], [46.0, 3638.137614678899], [47.0, 3172.5183823529424], [48.0, 3181.2234848484854], [49.0, 2982.828070175439], [50.0, 4284.70325203252], [51.0, 3938.5697796432273], [52.0, 3703.1524163568756], [53.0, 3258.4711111111114], [54.0, 10102.875], [55.0, 6316.850746268657], [56.0, 3780.508833922262], [57.0, 3567.5037037037027], [58.0, 3646.8050541516254], [59.0, 3865.5507246376815], [60.0, 4289.801526717562], [61.0, 3873.8129496402853], [62.0, 5144.5226130653255], [63.0, 4152.688372093024], [64.0, 8236.378048780482], [65.0, 7110.329501915709], [66.0, 4349.113793103448], [67.0, 4240.12785388128], [68.0, 6273.99358974359], [69.0, 7252.853982300885], [70.0, 4799.882531953737], [71.0, 5306.468503937008], [72.0, 4735.7535714285705], [73.0, 7680.091463414635], [74.0, 8005.374449339209], [75.0, 5729.926829268293], [76.0, 5816.347826086954], [77.0, 4857.387900355875], [78.0, 5108.201646090537], [79.0, 7983.5345622119785], [80.0, 6151.36152219874], [81.0, 8684.122171945699], [82.0, 16609.527027027027], [83.0, 8375.189655172411], [84.0, 5976.627118644066], [85.0, 30045.409836065573], [86.0, 14370.221153846145], [87.0, 6933.684981684979], [88.0, 9284.034682080917], [89.0, 8060.534883720926], [90.0, 7684.402730375426], [91.0, 6010.722341184868], [92.0, 10084.99319727891], [93.0, 12710.978260869564], [94.0, 8962.204166666665], [95.0, 8671.586206896554], [96.0, 11034.216101694918], [97.0, 48326.2], [98.0, 17164.232558139538], [99.0, 25375.85], [100.0, 7974.776945244968], [1.0, 144.79844961240303]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[49.45424614296207, 3982.460558896375]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 447.3333333333333, "minX": 1.69214928E12, "maxY": 193617.8, "series": [{"data": [[1.69215096E12, 103479.85], [1.69215066E12, 165746.65], [1.69215036E12, 183866.83333333334], [1.69214946E12, 188485.08333333334], [1.69215006E12, 155802.23333333334], [1.69214976E12, 191120.31666666668], [1.69215198E12, 182042.91666666666], [1.69215024E12, 119071.71666666666], [1.69214958E12, 188456.66666666666], [1.69214988E12, 189381.33333333334], [1.69215186E12, 188413.45], [1.69215156E12, 168267.28333333333], [1.69215126E12, 134971.06666666668], [1.69215144E12, 189967.48333333334], [1.69215114E12, 167785.31666666668], [1.69215084E12, 129074.16666666667], [1.69215054E12, 149331.91666666666], [1.69214928E12, 33851.51666666667], [1.69215072E12, 91109.16666666667], [1.69215042E12, 134486.8], [1.6921494E12, 193617.8], [1.69215012E12, 165535.26666666666], [1.6921497E12, 192155.51666666666], [1.69215204E12, 190979.3], [1.69215E12, 190325.65], [1.69215174E12, 192066.48333333334], [1.69214982E12, 168276.46666666667], [1.69215192E12, 167929.93333333332], [1.69215162E12, 152565.88333333333], [1.69215132E12, 158537.96666666667], [1.69215102E12, 82809.33333333333], [1.6921512E12, 185927.13333333333], [1.6921509E12, 151897.75], [1.6921506E12, 147730.53333333333], [1.6921503E12, 184702.23333333334], [1.69214952E12, 176411.35], [1.69215048E12, 152833.01666666666], [1.69214934E12, 148928.75], [1.69215018E12, 192521.56666666668], [1.69214964E12, 188006.53333333333], [1.6921521E12, 60682.48333333333], [1.69214994E12, 170875.08333333334], [1.6921518E12, 185462.98333333334], [1.6921515E12, 171917.46666666667], [1.69215168E12, 155356.53333333333], [1.69215138E12, 154417.61666666667], [1.69215108E12, 130641.56666666667], [1.69215078E12, 82351.56666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69215096E12, 1399.1833333333334], [1.69215066E12, 2198.5666666666666], [1.69215036E12, 2435.9166666666665], [1.69214946E12, 2471.366666666667], [1.69215006E12, 2054.0833333333335], [1.69214976E12, 2501.383333333333], [1.69215198E12, 2375.95], [1.69215024E12, 1587.4666666666667], [1.69214958E12, 2479.483333333333], [1.69214988E12, 2501.2833333333333], [1.69215186E12, 2493.1666666666665], [1.69215156E12, 2209.5], [1.69215126E12, 1819.5833333333333], [1.69215144E12, 2490.55], [1.69215114E12, 2315.9166666666665], [1.69215084E12, 1794.8666666666666], [1.69215054E12, 1980.4], [1.69214928E12, 447.3333333333333], [1.69215072E12, 1219.3833333333334], [1.69215042E12, 1792.05], [1.6921494E12, 2539.55], [1.69215012E12, 2187.633333333333], [1.6921497E12, 2542.2], [1.69215204E12, 2495.95], [1.69215E12, 2520.366666666667], [1.69215174E12, 2544.95], [1.69214982E12, 2217.616666666667], [1.69215192E12, 2206.75], [1.69215162E12, 2004.95], [1.69215132E12, 2130.4166666666665], [1.69215102E12, 1181.1166666666666], [1.6921512E12, 2476.7], [1.6921509E12, 2013.1], [1.6921506E12, 1999.25], [1.6921503E12, 2452.2166666666667], [1.69214952E12, 2324.0], [1.69215048E12, 2021.35], [1.69214934E12, 1961.2166666666667], [1.69215018E12, 2561.3166666666666], [1.69214964E12, 2463.1833333333334], [1.6921521E12, 796.5], [1.69214994E12, 2234.0833333333335], [1.6921518E12, 2433.3], [1.6921515E12, 2296.8], [1.69215168E12, 2083.9], [1.69215138E12, 2119.35], [1.69215108E12, 1740.3666666666666], [1.69215078E12, 1131.9166666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6921521E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 150.00609756097563, "minX": 1.69214928E12, "maxY": 15095.71824480368, "series": [{"data": [[1.69215096E12, 10262.57309941521], [1.69215066E12, 5515.363523573201], [1.69215036E12, 3781.0212765957476], [1.69214946E12, 658.6401766004423], [1.69215006E12, 2779.937583001327], [1.69214976E12, 1736.840785169031], [1.69215198E12, 1150.98392652124], [1.69215024E12, 5193.463917525774], [1.69214958E12, 1090.9614961496168], [1.69214988E12, 2138.133042529988], [1.69215186E12, 1981.2253829321662], [1.69215156E12, 4389.981481481486], [1.69215126E12, 7251.43328335832], [1.69215144E12, 4754.33953997809], [1.69215114E12, 7815.282685512372], [1.69215084E12, 11399.29179331307], [1.69215054E12, 5900.947658402202], [1.69214928E12, 150.00609756097563], [1.69215072E12, 8723.552572706934], [1.69215042E12, 5792.363774733634], [1.6921494E12, 428.26100966702427], [1.69215012E12, 3890.0735660847818], [1.6921497E12, 1507.5418454935646], [1.69215204E12, 653.7912568306007], [1.69215E12, 2606.945887445889], [1.69215174E12, 2574.1082529474816], [1.69214982E12, 2208.816728167282], [1.69215192E12, 1494.9913473423987], [1.69215162E12, 4250.77278911565], [1.69215132E12, 7843.5390524967925], [1.69215102E12, 15095.71824480368], [1.6921512E12, 5911.400881057263], [1.6921509E12, 5916.350948509489], [1.6921506E12, 6336.16507503411], [1.6921503E12, 3674.845383759734], [1.69214952E12, 939.321596244131], [1.69215048E12, 5379.017543859646], [1.69214934E12, 280.23226703755216], [1.69215018E12, 3352.9829605963773], [1.69214964E12, 1321.980066445182], [1.6921521E12, 666.1438356164383], [1.69214994E12, 2712.8290598290578], [1.6921518E12, 2264.076233183854], [1.6921515E12, 4611.224465558194], [1.69215168E12, 3727.86387434555], [1.69215138E12, 5841.9781209781195], [1.69215108E12, 9181.368338557992], [1.69215078E12, 8721.973493975904]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6921521E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 142.10365853658533, "minX": 1.69214928E12, "maxY": 15077.006928406476, "series": [{"data": [[1.69215096E12, 10243.191033138404], [1.69215066E12, 5493.717121588091], [1.69215036E12, 3760.914893617021], [1.69214946E12, 650.8498896247245], [1.69215006E12, 2759.2284196547153], [1.69214976E12, 1721.0239912758989], [1.69215198E12, 1139.5304247990834], [1.69215024E12, 5174.994845360827], [1.69214958E12, 1081.9372937293742], [1.69214988E12, 2120.810250817881], [1.69215186E12, 1960.7264770240693], [1.69215156E12, 4366.539506172843], [1.69215126E12, 7231.18740629685], [1.69215144E12, 4729.284775465503], [1.69215114E12, 7795.778563015306], [1.69215084E12, 11319.74316109423], [1.69215054E12, 5879.816804407714], [1.69214928E12, 142.10365853658533], [1.69215072E12, 8681.398210290827], [1.69215042E12, 5771.660578386601], [1.6921494E12, 420.49838882921586], [1.69215012E12, 3868.5486284289254], [1.6921497E12, 1494.9828326180254], [1.69215204E12, 646.1092896174866], [1.69215E12, 2587.382034632036], [1.69215174E12, 2552.405144694531], [1.69214982E12, 2190.644526445267], [1.69215192E12, 1480.505562422742], [1.69215162E12, 4229.351020408165], [1.69215132E12, 7824.541613316257], [1.69215102E12, 15077.006928406476], [1.6921512E12, 5890.947136563884], [1.6921509E12, 5888.018970189703], [1.6921506E12, 6315.034106412004], [1.6921503E12, 3654.239154616236], [1.69214952E12, 930.7605633802818], [1.69215048E12, 5355.14439946019], [1.69214934E12, 270.96940194714875], [1.69215018E12, 3333.671991480303], [1.69214964E12, 1309.2934662236996], [1.6921521E12, 658.7020547945208], [1.69214994E12, 2693.125763125762], [1.6921518E12, 2242.451793721971], [1.6921515E12, 4558.766033254154], [1.69215168E12, 3709.617801047122], [1.69215138E12, 5821.027027027027], [1.69215108E12, 9161.808777429476], [1.69215078E12, 8698.901204819274]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6921521E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 30.53527435610302, "minX": 1.69214928E12, "maxY": 71.53799392097262, "series": [{"data": [[1.69215096E12, 35.83625730994155], [1.69215066E12, 31.44540942928039], [1.69215036E12, 30.53527435610302], [1.69214946E12, 32.35430463576155], [1.69215006E12, 31.48871181938912], [1.69214976E12, 32.24100327153765], [1.69215198E12, 32.00344431687715], [1.69215024E12, 32.70618556701029], [1.69214958E12, 33.11991199119905], [1.69214988E12, 33.18211559432936], [1.69215186E12, 32.5284463894967], [1.69215156E12, 33.26543209876546], [1.69215126E12, 32.059970014992494], [1.69215144E12, 34.85761226725083], [1.69215114E12, 31.829210836278023], [1.69215084E12, 71.53799392097262], [1.69215054E12, 31.830578512396684], [1.69214928E12, 42.40243902439025], [1.69215072E12, 46.5771812080537], [1.69215042E12, 32.48097412480976], [1.6921494E12, 32.587540279269625], [1.69215012E12, 32.35411471321695], [1.6921497E12, 33.34656652360518], [1.69215204E12, 31.969398907103848], [1.69215E12, 32.166666666666686], [1.69215174E12, 32.14040728831724], [1.69214982E12, 32.35301353013536], [1.69215192E12, 31.98022249690975], [1.69215162E12, 31.395918367346937], [1.69215132E12, 31.920614596671], [1.69215102E12, 38.02540415704387], [1.6921512E12, 33.06277533039646], [1.6921509E12, 33.31707317073173], [1.6921506E12, 32.29195088676675], [1.6921503E12, 32.68409343715238], [1.69214952E12, 32.41901408450707], [1.69215048E12, 36.95411605937923], [1.69214934E12, 36.037552155771856], [1.69215018E12, 32.1001064962727], [1.69214964E12, 31.997785160575834], [1.6921521E12, 31.681506849315074], [1.69214994E12, 32.13797313797315], [1.6921518E12, 31.59529147982065], [1.6921515E12, 44.14370546318284], [1.69215168E12, 33.86387434554976], [1.69215138E12, 34.79665379665384], [1.69215108E12, 31.81504702194357], [1.69215078E12, 34.49156626506023]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6921521E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 47.0, "minX": 1.69214928E12, "maxY": 121469.0, "series": [{"data": [[1.69215096E12, 58822.0], [1.69215066E12, 17575.0], [1.69215036E12, 7180.0], [1.69214946E12, 2028.0], [1.69215006E12, 6043.0], [1.69214976E12, 3111.0], [1.69215198E12, 2840.0], [1.69215024E12, 29432.0], [1.69214958E12, 2381.0], [1.69214988E12, 8355.0], [1.69215186E12, 4937.0], [1.69215156E12, 31101.0], [1.69215126E12, 59217.0], [1.69215144E12, 30712.0], [1.69215114E12, 59100.0], [1.69215084E12, 121295.0], [1.69215054E12, 58918.0], [1.69214928E12, 1371.0], [1.69215072E12, 121469.0], [1.69215042E12, 33998.0], [1.6921494E12, 911.0], [1.69215012E12, 28726.0], [1.6921497E12, 3370.0], [1.69215204E12, 1144.0], [1.69215E12, 4224.0], [1.69215174E12, 3768.0], [1.69214982E12, 5590.0], [1.69215192E12, 4594.0], [1.69215162E12, 59624.0], [1.69215132E12, 57863.0], [1.69215102E12, 111222.0], [1.6921512E12, 34021.0], [1.6921509E12, 31854.0], [1.6921506E12, 31123.0], [1.6921503E12, 57667.0], [1.69214952E12, 3890.0], [1.69215048E12, 57873.0], [1.69214934E12, 9883.0], [1.69215018E12, 5771.0], [1.69214964E12, 2608.0], [1.6921521E12, 1209.0], [1.69214994E12, 54924.0], [1.6921518E12, 3781.0], [1.6921515E12, 15840.0], [1.69215168E12, 15943.0], [1.69215138E12, 30961.0], [1.69215108E12, 67885.0], [1.69215078E12, 41679.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69215096E12, 15489.5], [1.69215066E12, 6569.5], [1.69215036E12, 4302.7], [1.69214946E12, 1011.3000000000001], [1.69215006E12, 3228.4000000000005], [1.69214976E12, 2131.4], [1.69215198E12, 1675.2000000000003], [1.69215024E12, 13605.0], [1.69214958E12, 1370.0], [1.69214988E12, 2542.0], [1.69215186E12, 2394.6000000000004], [1.69215156E12, 4942.0], [1.69215126E12, 10963.5], [1.69215144E12, 4766.0], [1.69215114E12, 11047.400000000001], [1.69215084E12, 29885.0], [1.69215054E12, 9895.599999999997], [1.69214928E12, 230.0], [1.69215072E12, 15105.2], [1.69215042E12, 8789.6], [1.6921494E12, 666.0], [1.69215012E12, 5225.4], [1.6921497E12, 1881.9], [1.69215204E12, 869.0], [1.69215E12, 3039.7], [1.69215174E12, 3064.9], [1.69214982E12, 2833.6], [1.69215192E12, 1855.800000000001], [1.69215162E12, 4958.6], [1.69215132E12, 16118.2], [1.69215102E12, 26787.6], [1.6921512E12, 7173.400000000002], [1.6921509E12, 10061.0], [1.6921506E12, 10075.000000000002], [1.6921503E12, 4265.0], [1.69214952E12, 1278.2000000000003], [1.69215048E12, 6379.5], [1.69214934E12, 403.0], [1.69215018E12, 3608.0], [1.69214964E12, 1584.6], [1.6921521E12, 930.1999999999999], [1.69214994E12, 3060.0], [1.6921518E12, 3107.6000000000004], [1.6921515E12, 5790.0], [1.69215168E12, 5610.800000000024], [1.69215138E12, 14497.000000000004], [1.69215108E12, 26459.7], [1.69215078E12, 15537.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69215096E12, 30645.499999999993], [1.69215066E12, 11803.249999999996], [1.69215036E12, 5625.989999999998], [1.69214946E12, 1585.8799999999942], [1.69215006E12, 4340.009999999997], [1.69214976E12, 2678.5599999999995], [1.69215198E12, 2647.2], [1.69215024E12, 16229.600000000035], [1.69214958E12, 1736.8999999999996], [1.69214988E12, 3351.6300000000024], [1.69215186E12, 2677.7599999999998], [1.69215156E12, 9798.7], [1.69215126E12, 17161.170000000064], [1.69215144E12, 7817.350000000011], [1.69215114E12, 17256.760000000075], [1.69215084E12, 32412.24], [1.69215054E12, 15449.040000000008], [1.69214928E12, 724.2499999999943], [1.69215072E12, 16957.41], [1.69215042E12, 17263.47], [1.6921494E12, 789.3999999999997], [1.69215012E12, 13910.42], [1.6921497E12, 2584.809999999997], [1.69215204E12, 1097.52], [1.69215E12, 3404.9499999999994], [1.69215174E12, 3388.11], [1.69214982E12, 5069.400000000001], [1.69215192E12, 4277.919999999996], [1.69215162E12, 15893.52], [1.69215132E12, 26877.23], [1.69215102E12, 58124.39999999991], [1.6921512E12, 10898.420000000022], [1.6921509E12, 15701.479999999992], [1.6921506E12, 17168.960000000003], [1.6921503E12, 6211.909999999999], [1.69214952E12, 2326.8], [1.69215048E12, 10335.669999999998], [1.69214934E12, 635.3999999999974], [1.69215018E12, 4195.100000000001], [1.69214964E12, 2421.6400000000003], [1.6921521E12, 1143.98], [1.69214994E12, 8369.8], [1.6921518E12, 3636.16], [1.6921515E12, 13975.300000000003], [1.69215168E12, 14996.32], [1.69215138E12, 16336.919999999938], [1.69215108E12, 51551.88999999949], [1.69215078E12, 30013.22]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69215096E12, 15765.75], [1.69215066E12, 11239.0], [1.69215036E12, 4468.85], [1.69214946E12, 1109.3], [1.69215006E12, 3391.3], [1.69214976E12, 2275.099999999999], [1.69215198E12, 1790.6], [1.69215024E12, 13986.0], [1.69214958E12, 1447.5], [1.69214988E12, 2698.3], [1.69215186E12, 2499.2], [1.69215156E12, 9296.0], [1.69215126E12, 11167.95], [1.69215144E12, 4986.75], [1.69215114E12, 11834.5], [1.69215084E12, 30557.1], [1.69215054E12, 14778.4], [1.69214928E12, 243.5], [1.69215072E12, 15753.999999999996], [1.69215042E12, 15083.949999999999], [1.6921494E12, 704.0], [1.69215012E12, 13531.099999999999], [1.6921497E12, 2049.1499999999996], [1.69215204E12, 930.3999999999995], [1.69215E12, 3162.2499999999995], [1.69215174E12, 3167.6], [1.69214982E12, 3591.7999999999997], [1.69215192E12, 2448.6], [1.69215162E12, 13309.599999999999], [1.69215132E12, 26050.1], [1.69215102E12, 27002.1], [1.6921512E12, 7546.6], [1.6921509E12, 11178.4], [1.6921506E12, 16114.5], [1.6921503E12, 4479.049999999999], [1.69214952E12, 1609.7999999999995], [1.69215048E12, 9386.499999999998], [1.69214934E12, 465.0], [1.69215018E12, 3828.5], [1.69214964E12, 1720.1999999999998], [1.6921521E12, 976.0], [1.69214994E12, 3764.0], [1.6921518E12, 3306.2], [1.6921515E12, 7597.5], [1.69215168E12, 9378.8], [1.69215138E12, 15271.75], [1.69215108E12, 26807.4], [1.69215078E12, 15682.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.69215096E12, 3273.0], [1.69215066E12, 3883.0], [1.69215036E12, 2638.0], [1.69214946E12, 113.0], [1.69215006E12, 1803.0], [1.69214976E12, 984.0], [1.69215198E12, 345.0], [1.69215024E12, 2316.0], [1.69214958E12, 504.0], [1.69214988E12, 1286.0], [1.69215186E12, 1236.0], [1.69215156E12, 2468.0], [1.69215126E12, 4117.0], [1.69215144E12, 3410.0], [1.69215114E12, 3975.0], [1.69215084E12, 1468.0], [1.69215054E12, 3184.0], [1.69214928E12, 48.0], [1.69215072E12, 2381.0], [1.69215042E12, 2793.0], [1.6921494E12, 60.0], [1.69215012E12, 1980.0], [1.6921497E12, 779.0], [1.69215204E12, 294.0], [1.69215E12, 1859.0], [1.69215174E12, 1790.0], [1.69214982E12, 1350.0], [1.69215192E12, 881.0], [1.69215162E12, 1915.0], [1.69215132E12, 3971.0], [1.69215102E12, 4094.0], [1.6921512E12, 4345.0], [1.6921509E12, 3025.0], [1.6921506E12, 3217.0], [1.6921503E12, 2216.0], [1.69214952E12, 287.0], [1.69215048E12, 3011.0], [1.69214934E12, 47.0], [1.69215018E12, 2196.0], [1.69214964E12, 707.0], [1.6921521E12, 282.0], [1.69214994E12, 1309.0], [1.6921518E12, 1440.0], [1.6921515E12, 1024.0], [1.69215168E12, 1716.0], [1.69215138E12, 3559.0], [1.69215108E12, 3874.0], [1.69215078E12, 3066.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69215096E12, 5288.5], [1.69215066E12, 4926.0], [1.69215036E12, 3771.0], [1.69214946E12, 622.5], [1.69215006E12, 2766.5], [1.69214976E12, 1718.0], [1.69215198E12, 1134.0], [1.69215024E12, 3364.0], [1.69214958E12, 1083.0], [1.69214988E12, 2097.5], [1.69215186E12, 1970.0], [1.69215156E12, 3922.0], [1.69215126E12, 5405.5], [1.69215144E12, 4212.5], [1.69215114E12, 6129.0], [1.69215084E12, 5706.0], [1.69215054E12, 4533.0], [1.69214928E12, 136.0], [1.69215072E12, 6359.0], [1.69215042E12, 4106.0], [1.6921494E12, 424.0], [1.69215012E12, 3196.0], [1.6921497E12, 1492.5], [1.69215204E12, 642.0], [1.69215E12, 2561.5], [1.69215174E12, 2532.0], [1.69214982E12, 2038.0], [1.69215192E12, 1383.0], [1.69215162E12, 3552.0], [1.69215132E12, 5086.0], [1.69215102E12, 6084.5], [1.6921512E12, 5367.0], [1.6921509E12, 5046.0], [1.6921506E12, 4593.0], [1.6921503E12, 3472.5], [1.69214952E12, 896.0], [1.69215048E12, 4149.5], [1.69214934E12, 219.0], [1.69215018E12, 3103.0], [1.69214964E12, 1295.0], [1.6921521E12, 636.0], [1.69214994E12, 2360.0], [1.6921518E12, 2124.0], [1.6921515E12, 4257.0], [1.69215168E12, 2922.0], [1.69215138E12, 4860.5], [1.69215108E12, 5853.5], [1.69215078E12, 4865.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6921521E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2368.0, "minX": 1.0, "maxY": 121968.0, "series": [{"data": [[2.0, 6612.5], [33.0, 7854.0], [32.0, 7795.0], [35.0, 3323.0], [36.0, 8808.5], [38.0, 13000.0], [3.0, 4230.0], [4.0, 4906.5], [5.0, 2568.0], [6.0, 4693.5], [7.0, 4014.0], [8.0, 2797.0], [9.0, 3697.0], [10.0, 3486.0], [11.0, 3231.0], [12.0, 3197.0], [13.0, 3016.0], [14.0, 3082.0], [15.0, 2681.0], [16.0, 2447.0], [1.0, 7881.0], [17.0, 2368.0], [18.0, 2652.0], [19.0, 2464.5], [20.0, 3319.5], [21.0, 3462.0], [22.0, 4076.0], [23.0, 4316.0], [24.0, 3882.0], [25.0, 3862.0], [26.0, 4141.0], [27.0, 3739.0], [28.0, 4431.5], [29.0, 5503.0], [30.0, 2389.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 16053.5], [33.0, 118633.0], [36.0, 9189.5], [38.0, 12196.0], [3.0, 24214.5], [4.0, 16138.5], [5.0, 13640.0], [7.0, 3760.5], [9.0, 3934.5], [10.0, 4207.0], [11.0, 3280.0], [12.0, 4424.0], [13.0, 4609.0], [14.0, 3427.0], [15.0, 4785.0], [1.0, 7512.0], [16.0, 4626.0], [17.0, 4475.0], [18.0, 3768.0], [19.0, 4383.0], [20.0, 5326.0], [21.0, 4414.0], [22.0, 4996.5], [23.0, 4668.0], [24.0, 3891.0], [25.0, 5061.0], [26.0, 3278.0], [27.0, 121968.0], [29.0, 5094.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 38.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2344.0, "minX": 1.0, "maxY": 121968.0, "series": [{"data": [[2.0, 6564.0], [33.0, 7818.5], [32.0, 7747.5], [35.0, 3315.0], [36.0, 8559.5], [38.0, 12958.0], [3.0, 4184.0], [4.0, 4895.0], [5.0, 2565.0], [6.0, 4649.5], [7.0, 3960.0], [8.0, 2784.5], [9.0, 3649.0], [10.0, 3463.0], [11.0, 3195.0], [12.0, 3164.0], [13.0, 2993.0], [14.0, 3069.0], [15.0, 2660.0], [16.0, 2430.0], [1.0, 7817.5], [17.0, 2344.0], [18.0, 2617.0], [19.0, 2449.5], [20.0, 3297.5], [21.0, 3453.0], [22.0, 4065.5], [23.0, 4297.0], [24.0, 3863.0], [25.0, 3855.0], [26.0, 4141.0], [27.0, 3599.0], [28.0, 4414.5], [29.0, 5501.5], [30.0, 2387.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 16053.5], [33.0, 118633.0], [36.0, 9189.5], [38.0, 12196.0], [3.0, 24214.5], [4.0, 16138.5], [5.0, 13640.0], [7.0, 3760.5], [9.0, 3934.5], [10.0, 4207.0], [11.0, 3280.0], [12.0, 4424.0], [13.0, 4609.0], [14.0, 3427.0], [15.0, 4785.0], [1.0, 7512.0], [16.0, 4626.0], [17.0, 4475.0], [18.0, 3768.0], [19.0, 4383.0], [20.0, 5326.0], [21.0, 4414.0], [22.0, 4996.5], [23.0, 4668.0], [24.0, 3891.0], [25.0, 5061.0], [26.0, 3278.0], [27.0, 121968.0], [29.0, 5094.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 38.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2.7666666666666666, "minX": 1.69214928E12, "maxY": 15.716666666666667, "series": [{"data": [[1.69215096E12, 8.6], [1.69215066E12, 13.483333333333333], [1.69215036E12, 14.95], [1.69214946E12, 15.166666666666666], [1.69215006E12, 12.6], [1.69214976E12, 15.333333333333334], [1.69215198E12, 14.35], [1.69215024E12, 9.75], [1.69214958E12, 15.2], [1.69214988E12, 15.333333333333334], [1.69215186E12, 15.116666666666667], [1.69215156E12, 13.483333333333333], [1.69215126E12, 11.1], [1.69215144E12, 15.216666666666667], [1.69215114E12, 14.15], [1.69215084E12, 11.016666666666667], [1.69215054E12, 12.166666666666666], [1.69214928E12, 2.7666666666666666], [1.69215072E12, 7.516666666666667], [1.69215042E12, 11.0], [1.6921494E12, 15.566666666666666], [1.69215012E12, 13.416666666666666], [1.6921497E12, 15.583333333333334], [1.69215204E12, 15.25], [1.69215E12, 15.466666666666667], [1.69215174E12, 15.55], [1.69214982E12, 13.616666666666667], [1.69215192E12, 13.433333333333334], [1.69215162E12, 12.1], [1.69215132E12, 12.85], [1.69215102E12, 7.266666666666667], [1.6921512E12, 14.983333333333333], [1.6921509E12, 12.366666666666667], [1.6921506E12, 12.266666666666667], [1.6921503E12, 15.033333333333333], [1.69214952E12, 14.25], [1.69215048E12, 12.4], [1.69214934E12, 12.033333333333333], [1.69215018E12, 15.716666666666667], [1.69214964E12, 15.116666666666667], [1.6921521E12, 4.7], [1.69214994E12, 13.7], [1.6921518E12, 14.7], [1.6921515E12, 13.866666666666667], [1.69215168E12, 12.566666666666666], [1.69215138E12, 12.783333333333333], [1.69215108E12, 10.666666666666666], [1.69215078E12, 6.966666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6921521E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.69214928E12, "maxY": 15.516666666666667, "series": [{"data": [[1.69215096E12, 8.4], [1.69215066E12, 13.233333333333333], [1.69215036E12, 14.7], [1.69214946E12, 15.1], [1.69215006E12, 12.433333333333334], [1.69214976E12, 15.283333333333333], [1.69215198E12, 14.516666666666667], [1.69215024E12, 9.65], [1.69214958E12, 15.15], [1.69214988E12, 15.266666666666667], [1.69215186E12, 15.116666666666667], [1.69215156E12, 13.483333333333333], [1.69215126E12, 10.666666666666666], [1.69215144E12, 15.066666666666666], [1.69215114E12, 13.55], [1.69215084E12, 10.416666666666666], [1.69215054E12, 11.916666666666666], [1.69214928E12, 2.7333333333333334], [1.69215072E12, 7.133333333333334], [1.69215042E12, 10.833333333333334], [1.6921494E12, 15.516666666666667], [1.69215012E12, 13.283333333333333], [1.6921497E12, 15.5], [1.69215204E12, 15.25], [1.69215E12, 15.366666666666667], [1.69215174E12, 15.433333333333334], [1.69214982E12, 13.55], [1.69215192E12, 13.45], [1.69215162E12, 12.133333333333333], [1.69215132E12, 12.633333333333333], [1.69215102E12, 6.633333333333334], [1.6921512E12, 15.016666666666667], [1.6921509E12, 12.183333333333334], [1.6921506E12, 11.95], [1.6921503E12, 14.866666666666667], [1.69214952E12, 14.183333333333334], [1.69215048E12, 12.166666666666666], [1.69214934E12, 11.983333333333333], [1.69215018E12, 15.483333333333333], [1.69214964E12, 15.05], [1.6921521E12, 4.866666666666666], [1.69214994E12, 13.65], [1.6921518E12, 14.716666666666667], [1.6921515E12, 13.816666666666666], [1.69215168E12, 12.6], [1.69215138E12, 12.6], [1.69215108E12, 10.366666666666667], [1.69215078E12, 6.683333333333334]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.69215096E12, 0.15], [1.69215066E12, 0.2], [1.69215036E12, 0.18333333333333332], [1.69215006E12, 0.11666666666666667], [1.69215024E12, 0.05], [1.69214988E12, 0.016666666666666666], [1.69215186E12, 0.11666666666666667], [1.69215156E12, 0.016666666666666666], [1.69215126E12, 0.45], [1.69215144E12, 0.15], [1.69215114E12, 0.6], [1.69215084E12, 0.55], [1.69215054E12, 0.18333333333333332], [1.69215072E12, 0.31666666666666665], [1.69215042E12, 0.11666666666666667], [1.69215012E12, 0.08333333333333333], [1.6921497E12, 0.03333333333333333], [1.69215E12, 0.03333333333333333], [1.69215174E12, 0.11666666666666667], [1.69215192E12, 0.03333333333333333], [1.69215162E12, 0.11666666666666667], [1.69215132E12, 0.38333333333333336], [1.69215102E12, 0.5833333333333334], [1.6921512E12, 0.11666666666666667], [1.6921509E12, 0.11666666666666667], [1.6921506E12, 0.26666666666666666], [1.6921503E12, 0.11666666666666667], [1.69214952E12, 0.016666666666666666], [1.69215048E12, 0.18333333333333332], [1.69215018E12, 0.16666666666666666], [1.6921518E12, 0.15], [1.6921515E12, 0.21666666666666667], [1.69215168E12, 0.13333333333333333], [1.69215138E12, 0.35], [1.69215108E12, 0.26666666666666666], [1.69215078E12, 0.23333333333333334]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6921521E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.69214928E12, "maxY": 15.516666666666667, "series": [{"data": [[1.69215096E12, 8.4], [1.69215066E12, 13.233333333333333], [1.69215036E12, 14.7], [1.69214946E12, 15.1], [1.69215006E12, 12.433333333333334], [1.69214976E12, 15.283333333333333], [1.69215198E12, 14.516666666666667], [1.69215024E12, 9.65], [1.69214958E12, 15.15], [1.69214988E12, 15.266666666666667], [1.69215186E12, 15.116666666666667], [1.69215156E12, 13.483333333333333], [1.69215126E12, 10.666666666666666], [1.69215144E12, 15.066666666666666], [1.69215114E12, 13.55], [1.69215084E12, 10.416666666666666], [1.69215054E12, 11.916666666666666], [1.69214928E12, 2.7333333333333334], [1.69215072E12, 7.133333333333334], [1.69215042E12, 10.833333333333334], [1.6921494E12, 15.516666666666667], [1.69215012E12, 13.283333333333333], [1.6921497E12, 15.5], [1.69215204E12, 15.25], [1.69215E12, 15.366666666666667], [1.69215174E12, 15.433333333333334], [1.69214982E12, 13.55], [1.69215192E12, 13.45], [1.69215162E12, 12.133333333333333], [1.69215132E12, 12.633333333333333], [1.69215102E12, 6.633333333333334], [1.6921512E12, 15.016666666666667], [1.6921509E12, 12.183333333333334], [1.6921506E12, 11.95], [1.6921503E12, 14.866666666666667], [1.69214952E12, 14.183333333333334], [1.69215048E12, 12.166666666666666], [1.69214934E12, 11.983333333333333], [1.69215018E12, 15.483333333333333], [1.69214964E12, 15.05], [1.6921521E12, 4.866666666666666], [1.69214994E12, 13.65], [1.6921518E12, 14.716666666666667], [1.6921515E12, 13.816666666666666], [1.69215168E12, 12.6], [1.69215138E12, 12.6], [1.69215108E12, 10.366666666666667], [1.69215078E12, 6.683333333333334]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.69215096E12, 0.15], [1.69215066E12, 0.2], [1.69215036E12, 0.18333333333333332], [1.69215006E12, 0.11666666666666667], [1.69215024E12, 0.05], [1.69214988E12, 0.016666666666666666], [1.69215186E12, 0.11666666666666667], [1.69215156E12, 0.016666666666666666], [1.69215126E12, 0.45], [1.69215144E12, 0.15], [1.69215114E12, 0.6], [1.69215084E12, 0.55], [1.69215054E12, 0.18333333333333332], [1.69215072E12, 0.31666666666666665], [1.69215042E12, 0.11666666666666667], [1.69215012E12, 0.08333333333333333], [1.6921497E12, 0.03333333333333333], [1.69215E12, 0.03333333333333333], [1.69215174E12, 0.11666666666666667], [1.69215192E12, 0.03333333333333333], [1.69215162E12, 0.11666666666666667], [1.69215132E12, 0.38333333333333336], [1.69215102E12, 0.5833333333333334], [1.6921512E12, 0.11666666666666667], [1.6921509E12, 0.11666666666666667], [1.6921506E12, 0.26666666666666666], [1.6921503E12, 0.11666666666666667], [1.69214952E12, 0.016666666666666666], [1.69215048E12, 0.18333333333333332], [1.69215018E12, 0.16666666666666666], [1.6921518E12, 0.15], [1.6921515E12, 0.21666666666666667], [1.69215168E12, 0.13333333333333333], [1.69215138E12, 0.35], [1.69215108E12, 0.26666666666666666], [1.69215078E12, 0.23333333333333334]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6921521E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.69214928E12, "maxY": 15.516666666666667, "series": [{"data": [[1.69215096E12, 8.4], [1.69215066E12, 13.233333333333333], [1.69215036E12, 14.7], [1.69214946E12, 15.1], [1.69215006E12, 12.433333333333334], [1.69214976E12, 15.283333333333333], [1.69215198E12, 14.516666666666667], [1.69215024E12, 9.65], [1.69214958E12, 15.15], [1.69214988E12, 15.266666666666667], [1.69215186E12, 15.116666666666667], [1.69215156E12, 13.483333333333333], [1.69215126E12, 10.666666666666666], [1.69215144E12, 15.066666666666666], [1.69215114E12, 13.55], [1.69215084E12, 10.416666666666666], [1.69215054E12, 11.916666666666666], [1.69214928E12, 2.7333333333333334], [1.69215072E12, 7.133333333333334], [1.69215042E12, 10.833333333333334], [1.6921494E12, 15.516666666666667], [1.69215012E12, 13.283333333333333], [1.6921497E12, 15.5], [1.69215204E12, 15.25], [1.69215E12, 15.366666666666667], [1.69215174E12, 15.433333333333334], [1.69214982E12, 13.55], [1.69215192E12, 13.45], [1.69215162E12, 12.133333333333333], [1.69215132E12, 12.633333333333333], [1.69215102E12, 6.633333333333334], [1.6921512E12, 15.016666666666667], [1.6921509E12, 12.183333333333334], [1.6921506E12, 11.95], [1.6921503E12, 14.866666666666667], [1.69214952E12, 14.183333333333334], [1.69215048E12, 12.166666666666666], [1.69214934E12, 11.983333333333333], [1.69215018E12, 15.483333333333333], [1.69214964E12, 15.05], [1.6921521E12, 4.866666666666666], [1.69214994E12, 13.65], [1.6921518E12, 14.716666666666667], [1.6921515E12, 13.816666666666666], [1.69215168E12, 12.6], [1.69215138E12, 12.6], [1.69215108E12, 10.366666666666667], [1.69215078E12, 6.683333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.69215096E12, 0.15], [1.69215066E12, 0.2], [1.69215036E12, 0.18333333333333332], [1.69215006E12, 0.11666666666666667], [1.69215024E12, 0.05], [1.69214988E12, 0.016666666666666666], [1.69215186E12, 0.11666666666666667], [1.69215156E12, 0.016666666666666666], [1.69215126E12, 0.45], [1.69215144E12, 0.15], [1.69215114E12, 0.6], [1.69215084E12, 0.55], [1.69215054E12, 0.18333333333333332], [1.69215072E12, 0.31666666666666665], [1.69215042E12, 0.11666666666666667], [1.69215012E12, 0.08333333333333333], [1.6921497E12, 0.03333333333333333], [1.69215E12, 0.03333333333333333], [1.69215174E12, 0.11666666666666667], [1.69215192E12, 0.03333333333333333], [1.69215162E12, 0.11666666666666667], [1.69215132E12, 0.38333333333333336], [1.69215102E12, 0.5833333333333334], [1.6921512E12, 0.11666666666666667], [1.6921509E12, 0.11666666666666667], [1.6921506E12, 0.26666666666666666], [1.6921503E12, 0.11666666666666667], [1.69214952E12, 0.016666666666666666], [1.69215048E12, 0.18333333333333332], [1.69215018E12, 0.16666666666666666], [1.6921518E12, 0.15], [1.6921515E12, 0.21666666666666667], [1.69215168E12, 0.13333333333333333], [1.69215138E12, 0.35], [1.69215108E12, 0.26666666666666666], [1.69215078E12, 0.23333333333333334]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6921521E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

