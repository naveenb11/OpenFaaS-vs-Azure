/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 15.0, "minX": 0.0, "maxY": 53568.0, "series": [{"data": [[0.0, 15.0], [0.1, 21.0], [0.2, 23.0], [0.3, 24.0], [0.4, 25.0], [0.5, 25.0], [0.6, 26.0], [0.7, 26.0], [0.8, 27.0], [0.9, 28.0], [1.0, 28.0], [1.1, 28.0], [1.2, 29.0], [1.3, 29.0], [1.4, 30.0], [1.5, 30.0], [1.6, 30.0], [1.7, 31.0], [1.8, 31.0], [1.9, 32.0], [2.0, 32.0], [2.1, 32.0], [2.2, 32.0], [2.3, 33.0], [2.4, 33.0], [2.5, 34.0], [2.6, 34.0], [2.7, 34.0], [2.8, 35.0], [2.9, 35.0], [3.0, 36.0], [3.1, 36.0], [3.2, 36.0], [3.3, 37.0], [3.4, 37.0], [3.5, 38.0], [3.6, 38.0], [3.7, 39.0], [3.8, 39.0], [3.9, 40.0], [4.0, 40.0], [4.1, 41.0], [4.2, 41.0], [4.3, 42.0], [4.4, 43.0], [4.5, 43.0], [4.6, 44.0], [4.7, 44.0], [4.8, 45.0], [4.9, 46.0], [5.0, 46.0], [5.1, 47.0], [5.2, 48.0], [5.3, 49.0], [5.4, 49.0], [5.5, 50.0], [5.6, 51.0], [5.7, 51.0], [5.8, 52.0], [5.9, 53.0], [6.0, 54.0], [6.1, 55.0], [6.2, 56.0], [6.3, 56.0], [6.4, 57.0], [6.5, 58.0], [6.6, 59.0], [6.7, 60.0], [6.8, 60.0], [6.9, 61.0], [7.0, 62.0], [7.1, 63.0], [7.2, 64.0], [7.3, 64.0], [7.4, 65.0], [7.5, 66.0], [7.6, 67.0], [7.7, 67.0], [7.8, 68.0], [7.9, 69.0], [8.0, 70.0], [8.1, 70.0], [8.2, 71.0], [8.3, 72.0], [8.4, 72.0], [8.5, 73.0], [8.6, 74.0], [8.7, 75.0], [8.8, 75.0], [8.9, 76.0], [9.0, 77.0], [9.1, 77.0], [9.2, 78.0], [9.3, 79.0], [9.4, 80.0], [9.5, 81.0], [9.6, 81.0], [9.7, 82.0], [9.8, 83.0], [9.9, 83.0], [10.0, 84.0], [10.1, 85.0], [10.2, 86.0], [10.3, 87.0], [10.4, 88.0], [10.5, 88.0], [10.6, 89.0], [10.7, 90.0], [10.8, 91.0], [10.9, 92.0], [11.0, 93.0], [11.1, 94.0], [11.2, 94.0], [11.3, 95.0], [11.4, 96.0], [11.5, 97.0], [11.6, 98.0], [11.7, 99.0], [11.8, 100.0], [11.9, 100.0], [12.0, 101.0], [12.1, 102.0], [12.2, 103.0], [12.3, 104.0], [12.4, 105.0], [12.5, 106.0], [12.6, 106.0], [12.7, 107.0], [12.8, 108.0], [12.9, 109.0], [13.0, 110.0], [13.1, 110.0], [13.2, 111.0], [13.3, 112.0], [13.4, 113.0], [13.5, 113.0], [13.6, 114.0], [13.7, 114.0], [13.8, 115.0], [13.9, 116.0], [14.0, 116.0], [14.1, 117.0], [14.2, 117.0], [14.3, 118.0], [14.4, 119.0], [14.5, 119.0], [14.6, 120.0], [14.7, 120.0], [14.8, 121.0], [14.9, 121.0], [15.0, 122.0], [15.1, 122.0], [15.2, 123.0], [15.3, 123.0], [15.4, 124.0], [15.5, 124.0], [15.6, 125.0], [15.7, 125.0], [15.8, 126.0], [15.9, 126.0], [16.0, 127.0], [16.1, 127.0], [16.2, 128.0], [16.3, 128.0], [16.4, 129.0], [16.5, 129.0], [16.6, 130.0], [16.7, 130.0], [16.8, 131.0], [16.9, 131.0], [17.0, 132.0], [17.1, 132.0], [17.2, 133.0], [17.3, 133.0], [17.4, 134.0], [17.5, 134.0], [17.6, 135.0], [17.7, 135.0], [17.8, 136.0], [17.9, 136.0], [18.0, 137.0], [18.1, 137.0], [18.2, 138.0], [18.3, 138.0], [18.4, 139.0], [18.5, 139.0], [18.6, 140.0], [18.7, 140.0], [18.8, 141.0], [18.9, 141.0], [19.0, 142.0], [19.1, 143.0], [19.2, 143.0], [19.3, 143.0], [19.4, 144.0], [19.5, 145.0], [19.6, 145.0], [19.7, 146.0], [19.8, 146.0], [19.9, 147.0], [20.0, 147.0], [20.1, 148.0], [20.2, 148.0], [20.3, 149.0], [20.4, 149.0], [20.5, 150.0], [20.6, 151.0], [20.7, 151.0], [20.8, 152.0], [20.9, 152.0], [21.0, 153.0], [21.1, 153.0], [21.2, 154.0], [21.3, 154.0], [21.4, 155.0], [21.5, 156.0], [21.6, 156.0], [21.7, 157.0], [21.8, 157.0], [21.9, 158.0], [22.0, 158.0], [22.1, 159.0], [22.2, 160.0], [22.3, 160.0], [22.4, 161.0], [22.5, 161.0], [22.6, 162.0], [22.7, 162.0], [22.8, 163.0], [22.9, 163.0], [23.0, 164.0], [23.1, 165.0], [23.2, 165.0], [23.3, 166.0], [23.4, 166.0], [23.5, 167.0], [23.6, 167.0], [23.7, 168.0], [23.8, 168.0], [23.9, 169.0], [24.0, 170.0], [24.1, 170.0], [24.2, 171.0], [24.3, 171.0], [24.4, 172.0], [24.5, 172.0], [24.6, 173.0], [24.7, 173.0], [24.8, 174.0], [24.9, 174.0], [25.0, 175.0], [25.1, 175.0], [25.2, 176.0], [25.3, 177.0], [25.4, 177.0], [25.5, 178.0], [25.6, 178.0], [25.7, 179.0], [25.8, 179.0], [25.9, 180.0], [26.0, 180.0], [26.1, 181.0], [26.2, 182.0], [26.3, 182.0], [26.4, 183.0], [26.5, 183.0], [26.6, 184.0], [26.7, 184.0], [26.8, 185.0], [26.9, 185.0], [27.0, 186.0], [27.1, 186.0], [27.2, 187.0], [27.3, 188.0], [27.4, 188.0], [27.5, 189.0], [27.6, 189.0], [27.7, 190.0], [27.8, 190.0], [27.9, 191.0], [28.0, 191.0], [28.1, 192.0], [28.2, 192.0], [28.3, 193.0], [28.4, 194.0], [28.5, 194.0], [28.6, 195.0], [28.7, 195.0], [28.8, 196.0], [28.9, 196.0], [29.0, 197.0], [29.1, 197.0], [29.2, 198.0], [29.3, 198.0], [29.4, 199.0], [29.5, 200.0], [29.6, 200.0], [29.7, 201.0], [29.8, 201.0], [29.9, 202.0], [30.0, 202.0], [30.1, 203.0], [30.2, 203.0], [30.3, 204.0], [30.4, 205.0], [30.5, 205.0], [30.6, 205.0], [30.7, 206.0], [30.8, 207.0], [30.9, 207.0], [31.0, 208.0], [31.1, 208.0], [31.2, 209.0], [31.3, 209.0], [31.4, 210.0], [31.5, 210.0], [31.6, 211.0], [31.7, 211.0], [31.8, 212.0], [31.9, 213.0], [32.0, 213.0], [32.1, 214.0], [32.2, 214.0], [32.3, 215.0], [32.4, 215.0], [32.5, 216.0], [32.6, 216.0], [32.7, 217.0], [32.8, 217.0], [32.9, 218.0], [33.0, 218.0], [33.1, 219.0], [33.2, 220.0], [33.3, 220.0], [33.4, 221.0], [33.5, 221.0], [33.6, 222.0], [33.7, 222.0], [33.8, 223.0], [33.9, 223.0], [34.0, 224.0], [34.1, 224.0], [34.2, 225.0], [34.3, 226.0], [34.4, 226.0], [34.5, 227.0], [34.6, 227.0], [34.7, 228.0], [34.8, 228.0], [34.9, 229.0], [35.0, 230.0], [35.1, 230.0], [35.2, 231.0], [35.3, 231.0], [35.4, 232.0], [35.5, 232.0], [35.6, 233.0], [35.7, 233.0], [35.8, 234.0], [35.9, 235.0], [36.0, 235.0], [36.1, 236.0], [36.2, 236.0], [36.3, 237.0], [36.4, 237.0], [36.5, 238.0], [36.6, 239.0], [36.7, 239.0], [36.8, 240.0], [36.9, 240.0], [37.0, 241.0], [37.1, 241.0], [37.2, 242.0], [37.3, 242.0], [37.4, 243.0], [37.5, 244.0], [37.6, 244.0], [37.7, 245.0], [37.8, 245.0], [37.9, 246.0], [38.0, 246.0], [38.1, 247.0], [38.2, 248.0], [38.3, 248.0], [38.4, 249.0], [38.5, 249.0], [38.6, 250.0], [38.7, 250.0], [38.8, 251.0], [38.9, 251.0], [39.0, 252.0], [39.1, 252.0], [39.2, 253.0], [39.3, 254.0], [39.4, 254.0], [39.5, 255.0], [39.6, 255.0], [39.7, 256.0], [39.8, 257.0], [39.9, 257.0], [40.0, 258.0], [40.1, 258.0], [40.2, 259.0], [40.3, 259.0], [40.4, 260.0], [40.5, 261.0], [40.6, 261.0], [40.7, 262.0], [40.8, 262.0], [40.9, 263.0], [41.0, 264.0], [41.1, 264.0], [41.2, 265.0], [41.3, 265.0], [41.4, 266.0], [41.5, 267.0], [41.6, 267.0], [41.7, 268.0], [41.8, 268.0], [41.9, 269.0], [42.0, 269.0], [42.1, 270.0], [42.2, 271.0], [42.3, 271.0], [42.4, 272.0], [42.5, 272.0], [42.6, 273.0], [42.7, 273.0], [42.8, 274.0], [42.9, 275.0], [43.0, 275.0], [43.1, 276.0], [43.2, 276.0], [43.3, 277.0], [43.4, 277.0], [43.5, 278.0], [43.6, 278.0], [43.7, 279.0], [43.8, 280.0], [43.9, 280.0], [44.0, 281.0], [44.1, 281.0], [44.2, 282.0], [44.3, 282.0], [44.4, 283.0], [44.5, 284.0], [44.6, 284.0], [44.7, 285.0], [44.8, 285.0], [44.9, 286.0], [45.0, 286.0], [45.1, 287.0], [45.2, 288.0], [45.3, 288.0], [45.4, 289.0], [45.5, 289.0], [45.6, 290.0], [45.7, 290.0], [45.8, 291.0], [45.9, 291.0], [46.0, 292.0], [46.1, 292.0], [46.2, 293.0], [46.3, 294.0], [46.4, 294.0], [46.5, 295.0], [46.6, 295.0], [46.7, 296.0], [46.8, 296.0], [46.9, 297.0], [47.0, 297.0], [47.1, 298.0], [47.2, 298.0], [47.3, 299.0], [47.4, 300.0], [47.5, 300.0], [47.6, 301.0], [47.7, 301.0], [47.8, 302.0], [47.9, 302.0], [48.0, 303.0], [48.1, 304.0], [48.2, 304.0], [48.3, 305.0], [48.4, 305.0], [48.5, 306.0], [48.6, 306.0], [48.7, 307.0], [48.8, 308.0], [48.9, 308.0], [49.0, 309.0], [49.1, 309.0], [49.2, 310.0], [49.3, 310.0], [49.4, 311.0], [49.5, 311.0], [49.6, 312.0], [49.7, 312.0], [49.8, 313.0], [49.9, 314.0], [50.0, 314.0], [50.1, 315.0], [50.2, 315.0], [50.3, 316.0], [50.4, 316.0], [50.5, 317.0], [50.6, 317.0], [50.7, 318.0], [50.8, 318.0], [50.9, 319.0], [51.0, 320.0], [51.1, 320.0], [51.2, 321.0], [51.3, 321.0], [51.4, 322.0], [51.5, 322.0], [51.6, 323.0], [51.7, 323.0], [51.8, 324.0], [51.9, 324.0], [52.0, 325.0], [52.1, 326.0], [52.2, 326.0], [52.3, 327.0], [52.4, 327.0], [52.5, 328.0], [52.6, 328.0], [52.7, 329.0], [52.8, 329.0], [52.9, 330.0], [53.0, 330.0], [53.1, 331.0], [53.2, 331.0], [53.3, 332.0], [53.4, 333.0], [53.5, 333.0], [53.6, 333.0], [53.7, 334.0], [53.8, 335.0], [53.9, 335.0], [54.0, 336.0], [54.1, 336.0], [54.2, 337.0], [54.3, 337.0], [54.4, 338.0], [54.5, 339.0], [54.6, 339.0], [54.7, 340.0], [54.8, 340.0], [54.9, 341.0], [55.0, 341.0], [55.1, 342.0], [55.2, 342.0], [55.3, 343.0], [55.4, 343.0], [55.5, 344.0], [55.6, 344.0], [55.7, 345.0], [55.8, 345.0], [55.9, 346.0], [56.0, 346.0], [56.1, 347.0], [56.2, 348.0], [56.3, 348.0], [56.4, 348.0], [56.5, 349.0], [56.6, 350.0], [56.7, 350.0], [56.8, 351.0], [56.9, 351.0], [57.0, 352.0], [57.1, 352.0], [57.2, 353.0], [57.3, 354.0], [57.4, 354.0], [57.5, 355.0], [57.6, 355.0], [57.7, 356.0], [57.8, 356.0], [57.9, 357.0], [58.0, 357.0], [58.1, 358.0], [58.2, 358.0], [58.3, 359.0], [58.4, 359.0], [58.5, 360.0], [58.6, 361.0], [58.7, 361.0], [58.8, 362.0], [58.9, 362.0], [59.0, 363.0], [59.1, 363.0], [59.2, 364.0], [59.3, 364.0], [59.4, 365.0], [59.5, 365.0], [59.6, 366.0], [59.7, 367.0], [59.8, 367.0], [59.9, 368.0], [60.0, 368.0], [60.1, 369.0], [60.2, 369.0], [60.3, 370.0], [60.4, 370.0], [60.5, 371.0], [60.6, 371.0], [60.7, 372.0], [60.8, 372.0], [60.9, 373.0], [61.0, 374.0], [61.1, 374.0], [61.2, 375.0], [61.3, 375.0], [61.4, 376.0], [61.5, 376.0], [61.6, 377.0], [61.7, 377.0], [61.8, 378.0], [61.9, 378.0], [62.0, 379.0], [62.1, 380.0], [62.2, 380.0], [62.3, 381.0], [62.4, 381.0], [62.5, 382.0], [62.6, 382.0], [62.7, 383.0], [62.8, 383.0], [62.9, 384.0], [63.0, 384.0], [63.1, 385.0], [63.2, 386.0], [63.3, 386.0], [63.4, 387.0], [63.5, 387.0], [63.6, 388.0], [63.7, 389.0], [63.8, 389.0], [63.9, 390.0], [64.0, 390.0], [64.1, 391.0], [64.2, 391.0], [64.3, 392.0], [64.4, 393.0], [64.5, 393.0], [64.6, 394.0], [64.7, 394.0], [64.8, 395.0], [64.9, 396.0], [65.0, 396.0], [65.1, 397.0], [65.2, 397.0], [65.3, 398.0], [65.4, 398.0], [65.5, 399.0], [65.6, 399.0], [65.7, 400.0], [65.8, 401.0], [65.9, 401.0], [66.0, 402.0], [66.1, 403.0], [66.2, 403.0], [66.3, 404.0], [66.4, 404.0], [66.5, 405.0], [66.6, 406.0], [66.7, 406.0], [66.8, 407.0], [66.9, 407.0], [67.0, 408.0], [67.1, 408.0], [67.2, 409.0], [67.3, 410.0], [67.4, 410.0], [67.5, 411.0], [67.6, 412.0], [67.7, 412.0], [67.8, 413.0], [67.9, 413.0], [68.0, 414.0], [68.1, 414.0], [68.2, 415.0], [68.3, 416.0], [68.4, 416.0], [68.5, 417.0], [68.6, 418.0], [68.7, 418.0], [68.8, 419.0], [68.9, 420.0], [69.0, 420.0], [69.1, 421.0], [69.2, 421.0], [69.3, 422.0], [69.4, 423.0], [69.5, 423.0], [69.6, 424.0], [69.7, 425.0], [69.8, 425.0], [69.9, 426.0], [70.0, 427.0], [70.1, 427.0], [70.2, 428.0], [70.3, 429.0], [70.4, 429.0], [70.5, 430.0], [70.6, 430.0], [70.7, 431.0], [70.8, 432.0], [70.9, 432.0], [71.0, 433.0], [71.1, 434.0], [71.2, 434.0], [71.3, 435.0], [71.4, 436.0], [71.5, 436.0], [71.6, 437.0], [71.7, 438.0], [71.8, 438.0], [71.9, 439.0], [72.0, 440.0], [72.1, 440.0], [72.2, 441.0], [72.3, 442.0], [72.4, 442.0], [72.5, 443.0], [72.6, 443.0], [72.7, 444.0], [72.8, 445.0], [72.9, 445.0], [73.0, 446.0], [73.1, 447.0], [73.2, 448.0], [73.3, 448.0], [73.4, 449.0], [73.5, 450.0], [73.6, 450.0], [73.7, 451.0], [73.8, 452.0], [73.9, 453.0], [74.0, 453.0], [74.1, 454.0], [74.2, 455.0], [74.3, 455.0], [74.4, 456.0], [74.5, 457.0], [74.6, 458.0], [74.7, 458.0], [74.8, 459.0], [74.9, 460.0], [75.0, 461.0], [75.1, 461.0], [75.2, 462.0], [75.3, 463.0], [75.4, 463.0], [75.5, 464.0], [75.6, 465.0], [75.7, 466.0], [75.8, 466.0], [75.9, 467.0], [76.0, 468.0], [76.1, 469.0], [76.2, 470.0], [76.3, 470.0], [76.4, 471.0], [76.5, 472.0], [76.6, 473.0], [76.7, 473.0], [76.8, 474.0], [76.9, 475.0], [77.0, 476.0], [77.1, 476.0], [77.2, 477.0], [77.3, 478.0], [77.4, 479.0], [77.5, 480.0], [77.6, 481.0], [77.7, 481.0], [77.8, 482.0], [77.9, 483.0], [78.0, 484.0], [78.1, 484.0], [78.2, 485.0], [78.3, 486.0], [78.4, 487.0], [78.5, 488.0], [78.6, 489.0], [78.7, 489.0], [78.8, 490.0], [78.9, 491.0], [79.0, 492.0], [79.1, 493.0], [79.2, 493.0], [79.3, 494.0], [79.4, 495.0], [79.5, 496.0], [79.6, 497.0], [79.7, 497.0], [79.8, 498.0], [79.9, 499.0], [80.0, 500.0], [80.1, 501.0], [80.2, 501.0], [80.3, 502.0], [80.4, 503.0], [80.5, 504.0], [80.6, 505.0], [80.7, 506.0], [80.8, 506.0], [80.9, 507.0], [81.0, 508.0], [81.1, 509.0], [81.2, 510.0], [81.3, 510.0], [81.4, 511.0], [81.5, 512.0], [81.6, 513.0], [81.7, 514.0], [81.8, 515.0], [81.9, 515.0], [82.0, 516.0], [82.1, 517.0], [82.2, 518.0], [82.3, 519.0], [82.4, 520.0], [82.5, 521.0], [82.6, 521.0], [82.7, 522.0], [82.8, 523.0], [82.9, 524.0], [83.0, 525.0], [83.1, 526.0], [83.2, 527.0], [83.3, 528.0], [83.4, 529.0], [83.5, 529.0], [83.6, 530.0], [83.7, 531.0], [83.8, 532.0], [83.9, 533.0], [84.0, 534.0], [84.1, 535.0], [84.2, 536.0], [84.3, 537.0], [84.4, 538.0], [84.5, 539.0], [84.6, 540.0], [84.7, 541.0], [84.8, 542.0], [84.9, 542.0], [85.0, 543.0], [85.1, 544.0], [85.2, 545.0], [85.3, 546.0], [85.4, 547.0], [85.5, 548.0], [85.6, 549.0], [85.7, 550.0], [85.8, 551.0], [85.9, 552.0], [86.0, 553.0], [86.1, 554.0], [86.2, 555.0], [86.3, 556.0], [86.4, 557.0], [86.5, 558.0], [86.6, 559.0], [86.7, 560.0], [86.8, 561.0], [86.9, 562.0], [87.0, 563.0], [87.1, 564.0], [87.2, 565.0], [87.3, 566.0], [87.4, 568.0], [87.5, 569.0], [87.6, 570.0], [87.7, 571.0], [87.8, 572.0], [87.9, 573.0], [88.0, 574.0], [88.1, 575.0], [88.2, 576.0], [88.3, 578.0], [88.4, 579.0], [88.5, 580.0], [88.6, 581.0], [88.7, 582.0], [88.8, 583.0], [88.9, 585.0], [89.0, 586.0], [89.1, 587.0], [89.2, 589.0], [89.3, 590.0], [89.4, 591.0], [89.5, 592.0], [89.6, 594.0], [89.7, 595.0], [89.8, 596.0], [89.9, 597.0], [90.0, 598.0], [90.1, 600.0], [90.2, 601.0], [90.3, 602.0], [90.4, 603.0], [90.5, 605.0], [90.6, 606.0], [90.7, 607.0], [90.8, 609.0], [90.9, 610.0], [91.0, 611.0], [91.1, 613.0], [91.2, 614.0], [91.3, 616.0], [91.4, 617.0], [91.5, 619.0], [91.6, 620.0], [91.7, 622.0], [91.8, 623.0], [91.9, 625.0], [92.0, 626.0], [92.1, 628.0], [92.2, 630.0], [92.3, 631.0], [92.4, 633.0], [92.5, 635.0], [92.6, 636.0], [92.7, 638.0], [92.8, 640.0], [92.9, 642.0], [93.0, 644.0], [93.1, 646.0], [93.2, 648.0], [93.3, 650.0], [93.4, 653.0], [93.5, 655.0], [93.6, 657.0], [93.7, 659.0], [93.8, 662.0], [93.9, 664.0], [94.0, 667.0], [94.1, 669.0], [94.2, 672.0], [94.3, 674.0], [94.4, 677.0], [94.5, 680.0], [94.6, 683.0], [94.7, 685.0], [94.8, 688.0], [94.9, 692.0], [95.0, 695.0], [95.1, 698.0], [95.2, 702.0], [95.3, 705.0], [95.4, 709.0], [95.5, 713.0], [95.6, 717.0], [95.7, 721.0], [95.8, 725.0], [95.9, 730.0], [96.0, 735.0], [96.1, 740.0], [96.2, 746.0], [96.3, 752.0], [96.4, 759.0], [96.5, 766.0], [96.6, 773.0], [96.7, 781.0], [96.8, 790.0], [96.9, 799.0], [97.0, 809.0], [97.1, 819.0], [97.2, 829.0], [97.3, 842.0], [97.4, 855.0], [97.5, 867.0], [97.6, 882.0], [97.7, 898.0], [97.8, 914.0], [97.9, 931.0], [98.0, 948.0], [98.1, 966.0], [98.2, 983.0], [98.3, 999.0], [98.4, 1015.0], [98.5, 1034.0], [98.6, 1055.0], [98.7, 1079.0], [98.8, 1106.0], [98.9, 1138.0], [99.0, 1176.0], [99.1, 1221.0], [99.2, 1268.0], [99.3, 1324.0], [99.4, 1383.0], [99.5, 1445.0], [99.6, 1535.0], [99.7, 1728.0], [99.8, 1953.0], [99.9, 2202.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 77198.0, "series": [{"data": [[0.0, 49951.0], [600.0, 21435.0], [700.0, 7525.0], [800.0, 3406.0], [900.0, 2498.0], [1000.0, 2010.0], [1100.0, 1175.0], [1200.0, 880.0], [1300.0, 718.0], [1400.0, 592.0], [1500.0, 315.0], [1600.0, 197.0], [1700.0, 155.0], [1800.0, 195.0], [1900.0, 245.0], [2000.0, 184.0], [2100.0, 109.0], [2300.0, 61.0], [2200.0, 104.0], [2400.0, 21.0], [2500.0, 16.0], [2600.0, 22.0], [2800.0, 11.0], [2700.0, 12.0], [2900.0, 7.0], [3100.0, 2.0], [3300.0, 4.0], [3200.0, 3.0], [3400.0, 2.0], [3500.0, 6.0], [3700.0, 31.0], [3600.0, 15.0], [3800.0, 29.0], [3900.0, 20.0], [4000.0, 6.0], [4300.0, 1.0], [4100.0, 1.0], [4600.0, 3.0], [4500.0, 3.0], [4400.0, 2.0], [4700.0, 2.0], [5000.0, 1.0], [6900.0, 5.0], [7000.0, 4.0], [7100.0, 4.0], [7300.0, 6.0], [7200.0, 5.0], [7400.0, 2.0], [7500.0, 6.0], [7700.0, 1.0], [8100.0, 1.0], [13800.0, 3.0], [14000.0, 2.0], [14200.0, 1.0], [14500.0, 3.0], [14600.0, 1.0], [100.0, 75093.0], [27000.0, 1.0], [26900.0, 1.0], [200.0, 75983.0], [53500.0, 1.0], [300.0, 77198.0], [400.0, 60929.0], [500.0, 42888.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 53500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1830.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 339704.0, "series": [{"data": [[0.0, 339704.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 82579.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1830.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.469924812030075, "minX": 1.69137E12, "maxY": 100.0, "series": [{"data": [[1.69137282E12, 9.970250169033129], [1.6913712E12, 66.9438321322595], [1.6913709E12, 50.292577298821506], [1.6913706E12, 33.614849684390805], [1.69137222E12, 61.85042271840455], [1.6913703E12, 16.964293350438368], [1.69137252E12, 31.87856661424413], [1.69137E12, 1.469924812030075], [1.69137192E12, 92.1355971355972], [1.69137162E12, 90.4480586416212], [1.69137132E12, 73.65805321362127], [1.69137102E12, 56.99836512261583], [1.69137072E12, 40.389834460247314], [1.69137234E12, 50.0], [1.69137042E12, 23.66864686468646], [1.69137264E12, 20.0], [1.69137012E12, 7.0803065644785], [1.69137204E12, 80.0], [1.69137174E12, 96.88617383235368], [1.69137144E12, 80.28056378306587], [1.69137114E12, 63.56137128864415], [1.69137084E12, 46.92374507625505], [1.69137246E12, 40.0], [1.69137054E12, 30.244701348747686], [1.69137276E12, 10.0], [1.69137024E12, 13.578634705575821], [1.69137216E12, 70.0], [1.69137186E12, 100.0], [1.69137156E12, 86.90183080808086], [1.69137126E12, 70.26999896512434], [1.69137258E12, 29.106063741721815], [1.69137096E12, 53.64316309719942], [1.69137066E12, 36.90481128162582], [1.69137036E12, 20.318907563025235], [1.69137198E12, 89.3179432244243], [1.69137006E12, 3.8555620267909188], [1.69137228E12, 59.05629348513595], [1.69137168E12, 93.58989271031798], [1.69137138E12, 76.90863403357132], [1.6913727E12, 16.152881315820647], [1.69137108E12, 60.26684415318437], [1.69137078E12, 43.56366846697143], [1.69137048E12, 26.935326481885195], [1.6913721E12, 76.08518559071496], [1.69137018E12, 10.312462802047358], [1.6913724E12, 45.799872326843115], [1.6913718E12, 99.73445105462396], [1.6913715E12, 83.58442526898897]], "isOverall": false, "label": "jp@gc - Stepping Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69137282E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 61.17918088737201, "minX": 1.0, "maxY": 846.0083010514653, "series": [{"data": [[2.0, 61.17918088737201], [3.0, 61.21931818181815], [4.0, 61.45244215938304], [5.0, 64.73506119510438], [6.0, 74.64177040110651], [7.0, 68.92543859649126], [8.0, 65.1745240253853], [9.0, 68.23902027027039], [10.0, 77.68526107072071], [11.0, 74.28480300187626], [12.0, 78.77339181286553], [13.0, 82.40077410274459], [14.0, 84.73153456998304], [15.0, 101.67410207939514], [16.0, 104.0346695557963], [17.0, 106.52387591495304], [18.0, 109.66406779660998], [19.0, 123.51956521739137], [20.0, 128.56450642603193], [21.0, 127.12500000000034], [22.0, 146.8863126402392], [23.0, 166.7065173930427], [24.0, 146.4237172952769], [25.0, 158.66796047988714], [26.0, 163.24677137870867], [27.0, 158.98399215942536], [28.0, 172.35662898252812], [29.0, 180.2916522341535], [30.0, 186.68013557167828], [31.0, 210.57207207207213], [32.0, 219.6189931350113], [33.0, 204.7881297446514], [34.0, 222.90018281535671], [35.0, 216.66678129298498], [36.0, 218.105740181269], [37.0, 231.11590671771688], [38.0, 235.36628904909006], [39.0, 354.6267071320185], [40.0, 257.01109168396914], [41.0, 279.16704545454553], [42.0, 257.52644148754666], [43.0, 266.4201709401715], [44.0, 272.6946933149556], [45.0, 285.0988700564973], [46.0, 285.90726643598634], [47.0, 280.41846562603666], [48.0, 286.23793787177755], [49.0, 307.75017494751546], [50.0, 306.290102211097], [51.0, 301.9270765206016], [52.0, 370.45321752862134], [53.0, 332.75332400279956], [54.0, 351.00325262016537], [55.0, 345.2944870900207], [56.0, 449.39937805419777], [57.0, 347.84362279511515], [58.0, 339.99772579597084], [59.0, 358.5814739688986], [60.0, 370.32879592158633], [61.0, 382.7983310152991], [62.0, 372.53041443850276], [63.0, 391.2727585022338], [64.0, 388.72416107382594], [65.0, 417.9317851959367], [66.0, 445.1779876498357], [67.0, 407.3108198924725], [68.0, 427.5778859527125], [69.0, 424.25483542585647], [70.0, 453.97718563933324], [71.0, 468.8893038143508], [72.0, 485.6564625850346], [73.0, 555.3757828810028], [74.0, 443.20742213386376], [75.0, 452.4257956448899], [76.0, 467.4810256410259], [77.0, 451.8829856584096], [78.0, 469.2611866092142], [79.0, 478.71467025572076], [80.0, 513.7121394230753], [81.0, 482.08564814814804], [82.0, 509.4117849758785], [83.0, 540.7339350180503], [84.0, 547.2423691860466], [85.0, 528.6754234358807], [86.0, 533.7148262813897], [87.0, 548.2429873772794], [88.0, 559.48014059754], [89.0, 846.0083010514653], [90.0, 578.8474382682467], [91.0, 547.9781879194632], [92.0, 548.8070931388792], [93.0, 593.0213063220402], [94.0, 546.5512779035922], [95.0, 559.2890192245037], [96.0, 603.4329034506796], [97.0, 584.733622994653], [98.0, 616.7852631578941], [99.0, 653.9999999999994], [100.0, 630.8203154236866], [1.0, 63.30388692579503]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[54.05527536293373, 343.5872043535528]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1306.3333333333333, "minX": 1.69137E12, "maxY": 147105.75, "series": [{"data": [[1.69137282E12, 21501.683333333334], [1.6913712E12, 137142.4], [1.6913709E12, 144263.18333333332], [1.6913706E12, 135837.05], [1.69137222E12, 134089.9], [1.6913703E12, 136066.76666666666], [1.69137252E12, 129378.96666666666], [1.69137E12, 7722.966666666666], [1.69137192E12, 125633.53333333334], [1.69137162E12, 127066.65], [1.69137132E12, 132842.28333333333], [1.69137102E12, 133349.75], [1.69137072E12, 124702.2], [1.69137234E12, 142695.83333333334], [1.69137042E12, 132193.33333333334], [1.69137264E12, 137956.7], [1.69137012E12, 87273.8], [1.69137204E12, 137165.63333333333], [1.69137174E12, 140874.68333333332], [1.69137144E12, 142118.81666666668], [1.69137114E12, 142529.81666666668], [1.69137084E12, 143973.31666666668], [1.69137246E12, 141669.75], [1.69137054E12, 135821.63333333333], [1.69137276E12, 115151.48333333334], [1.69137024E12, 139349.91666666666], [1.69137216E12, 139170.81666666668], [1.69137186E12, 147105.75], [1.69137156E12, 138245.93333333332], [1.69137126E12, 140419.95], [1.69137258E12, 140457.6], [1.69137096E12, 132341.08333333334], [1.69137066E12, 140190.26666666666], [1.69137036E12, 138328.5], [1.69137198E12, 135732.91666666666], [1.69137006E12, 49903.433333333334], [1.69137228E12, 138088.73333333334], [1.69137168E12, 144776.61666666667], [1.69137138E12, 144670.18333333332], [1.6913727E12, 122832.31666666667], [1.69137108E12, 141870.23333333334], [1.69137078E12, 139934.2], [1.69137048E12, 139914.45], [1.6913721E12, 132876.11666666667], [1.69137018E12, 122129.48333333334], [1.6913724E12, 136685.85], [1.6913718E12, 134667.25], [1.6913715E12, 136371.71666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69137282E12, 3631.7], [1.6913712E12, 23170.55], [1.6913709E12, 24381.05], [1.6913706E12, 22952.0], [1.69137222E12, 22654.916666666668], [1.6913703E12, 22969.383333333335], [1.69137252E12, 21859.3], [1.69137E12, 1306.3333333333333], [1.69137192E12, 21259.833333333332], [1.69137162E12, 21439.633333333335], [1.69137132E12, 22426.7], [1.69137102E12, 22529.75], [1.69137072E12, 21063.7], [1.69137234E12, 24089.083333333332], [1.69137042E12, 22321.05], [1.69137264E12, 23298.333333333332], [1.69137012E12, 14738.25], [1.69137204E12, 23160.85], [1.69137174E12, 23816.3], [1.69137144E12, 24042.05], [1.69137114E12, 24066.916666666668], [1.69137084E12, 24312.516666666666], [1.69137246E12, 23929.366666666665], [1.69137054E12, 22939.766666666666], [1.69137276E12, 19450.466666666667], [1.69137024E12, 23560.85], [1.69137216E12, 23526.566666666666], [1.69137186E12, 24837.933333333334], [1.69137156E12, 23337.633333333335], [1.69137126E12, 23727.95], [1.69137258E12, 23730.433333333334], [1.69137096E12, 22357.75], [1.69137066E12, 23681.366666666665], [1.69137036E12, 23376.75], [1.69137198E12, 22922.666666666668], [1.69137006E12, 8432.35], [1.69137228E12, 23293.583333333332], [1.69137168E12, 24488.983333333334], [1.69137138E12, 24430.333333333332], [1.6913727E12, 20751.8], [1.69137108E12, 23980.766666666666], [1.69137078E12, 23642.033333333333], [1.69137048E12, 23654.2], [1.6913721E12, 22426.7], [1.69137018E12, 20629.1], [1.6913724E12, 23079.816666666666], [1.6913718E12, 22701.966666666667], [1.6913715E12, 23050.133333333335]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69137282E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 61.52631578947363, "minX": 1.69137E12, "maxY": 645.8653326122219, "series": [{"data": [[1.69137282E12, 98.46991210277197], [1.6913712E12, 424.7459728698627], [1.6913709E12, 303.2113002316444], [1.6913706E12, 214.91890446132436], [1.69137222E12, 406.4065683936695], [1.6913703E12, 108.04286936070129], [1.69137252E12, 218.49528195911057], [1.69137E12, 61.52631578947363], [1.69137192E12, 640.8128898128897], [1.69137162E12, 619.5462146374986], [1.69137132E12, 483.0306580532137], [1.69137102E12, 371.28980926430347], [1.69137072E12, 281.5718116110987], [1.69137234E12, 305.2679918450544], [1.69137042E12, 155.24719471947182], [1.69137264E12, 126.25801011804296], [1.69137012E12, 68.7769076974342], [1.69137204E12, 505.7864715860889], [1.69137174E12, 597.9752551809462], [1.69137144E12, 491.71780206311956], [1.69137114E12, 388.99724517906304], [1.69137084E12, 286.00181799818387], [1.69137246E12, 246.05695228322193], [1.69137054E12, 194.11582102333523], [1.69137276E12, 75.57353869460941], [1.69137024E12, 84.62897342365774], [1.69137216E12, 437.7933409873688], [1.69137186E12, 592.7723183391005], [1.69137156E12, 547.5425084175079], [1.69137126E12, 434.8012004553443], [1.69137258E12, 180.63224337748312], [1.69137096E12, 352.24041735310317], [1.69137066E12, 229.02768560763124], [1.69137036E12, 127.60157563025186], [1.69137198E12, 571.8980182110353], [1.69137006E12, 62.22510192195688], [1.69137228E12, 373.5326797385613], [1.69137168E12, 562.6036298004609], [1.69137138E12, 463.1898683284744], [1.6913727E12, 111.74168737427492], [1.69137108E12, 369.49928322752424], [1.69137078E12, 268.3846073950973], [1.69137048E12, 166.96771514585342], [1.6913721E12, 502.09449249972755], [1.69137018E12, 73.16474229258426], [1.6913724E12, 291.98361527821925], [1.6913718E12, 645.8653326122219], [1.6913715E12, 532.9514221796095]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69137282E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 61.210526315789465, "minX": 1.69137E12, "maxY": 644.6053001622502, "series": [{"data": [[1.69137282E12, 97.06490872210964], [1.6913712E12, 423.5147308181441], [1.6913709E12, 302.0572061637636], [1.6913706E12, 213.67272921793145], [1.69137222E12, 405.27303273357893], [1.6913703E12, 107.00513149454815], [1.69137252E12, 217.2421927656707], [1.69137E12, 61.210526315789465], [1.69137192E12, 639.49745899746], [1.69137162E12, 618.2011224372916], [1.69137132E12, 481.81670863900143], [1.69137102E12, 369.9221798365111], [1.69137072E12, 280.2023781767307], [1.69137234E12, 304.08644240570834], [1.69137042E12, 154.06105610561087], [1.69137264E12, 125.22206998313638], [1.69137012E12, 68.19676774408526], [1.69137204E12, 504.56721798134123], [1.69137174E12, 596.7788431797059], [1.69137144E12, 490.59135941170564], [1.69137114E12, 387.9116416692189], [1.69137084E12, 284.8156751843256], [1.69137246E12, 244.95351462288332], [1.69137054E12, 192.95878826803707], [1.69137276E12, 74.81504860497394], [1.69137024E12, 83.76393955185011], [1.69137216E12, 436.5959711929871], [1.69137186E12, 591.5552150271863], [1.69137156E12, 546.3713173400687], [1.69137126E12, 433.52871778950674], [1.69137258E12, 179.54335678808008], [1.69137096E12, 351.08303130148244], [1.69137066E12, 227.89786395686446], [1.69137036E12, 126.63655462184879], [1.69137198E12, 570.6943760042851], [1.69137006E12, 61.8529411764705], [1.69137228E12, 372.2404596247083], [1.69137168E12, 561.4073999799459], [1.69137138E12, 462.0857372600264], [1.6913727E12, 110.80168027452385], [1.69137108E12, 368.40385009215623], [1.69137078E12, 267.3254050685497], [1.69137048E12, 165.8645281843665], [1.6913721E12, 500.79929924449965], [1.69137018E12, 72.4397095583859], [1.6913724E12, 290.7395467602933], [1.6913718E12, 644.6053001622502], [1.6913715E12, 531.6847768190069]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69137282E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 32.0827023878858, "minX": 1.69137E12, "maxY": 42.05102255956158, "series": [{"data": [[1.69137282E12, 34.42663962136574], [1.6913712E12, 39.12420517168289], [1.6913709E12, 37.88729982878417], [1.6913706E12, 37.2291644377874], [1.69137222E12, 38.097767179709656], [1.6913703E12, 35.26480649989316], [1.69137252E12, 37.29701190743639], [1.69137E12, 33.15225563909775], [1.69137192E12, 41.860706860706955], [1.69137162E12, 39.95361356087489], [1.69137132E12, 38.80959159093382], [1.69137102E12, 39.78702997275189], [1.69137072E12, 39.87176498018162], [1.69137234E12, 37.86788990825688], [1.69137042E12, 36.82519251925192], [1.69137264E12, 36.77466273187199], [1.69137012E12, 32.97900699766751], [1.69137204E12, 40.07612383375745], [1.69137174E12, 40.668934941746734], [1.69137144E12, 38.65733837197424], [1.69137114E12, 40.851239669421474], [1.69137084E12, 36.76042823957173], [1.69137246E12, 39.18419702411478], [1.69137054E12, 38.25444230357537], [1.69137276E12, 35.59020325716448], [1.69137024E12, 34.434392912975476], [1.69137216E12, 38.465817764325394], [1.69137186E12, 40.084330202669314], [1.69137156E12, 39.06207912457908], [1.69137126E12, 38.29245575908113], [1.69137258E12, 37.69081125827801], [1.69137096E12, 40.064909390445], [1.69137066E12, 37.86592700124454], [1.69137036E12, 36.793697478991504], [1.69137198E12, 40.12865559721472], [1.69137006E12, 32.0827023878858], [1.69137228E12, 42.05102255956158], [1.69137168E12, 39.87716835455731], [1.69137138E12, 39.17338425972473], [1.6913727E12, 38.63258785942479], [1.69137108E12, 37.47798484538187], [1.69137078E12, 38.79912754466123], [1.69137048E12, 37.2080348800998], [1.6913721E12, 38.448483521296325], [1.69137018E12, 34.1405785025591], [1.6913724E12, 39.41706564528136], [1.6913718E12, 39.03342347214688], [1.6913715E12, 41.069990412272304]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69137282E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 15.0, "minX": 1.69137E12, "maxY": 53568.0, "series": [{"data": [[1.69137282E12, 467.0], [1.6913712E12, 3621.0], [1.6913709E12, 1401.0], [1.6913706E12, 1242.0], [1.69137222E12, 7399.0], [1.6913703E12, 1268.0], [1.69137252E12, 2308.0], [1.69137E12, 1246.0], [1.69137192E12, 7729.0], [1.69137162E12, 14652.0], [1.69137132E12, 8116.0], [1.69137102E12, 4376.0], [1.69137072E12, 3853.0], [1.69137234E12, 1157.0], [1.69137042E12, 2893.0], [1.69137264E12, 1166.0], [1.69137012E12, 561.0], [1.69137204E12, 27004.0], [1.69137174E12, 7227.0], [1.69137144E12, 7025.0], [1.69137114E12, 3850.0], [1.69137084E12, 1858.0], [1.69137246E12, 1235.0], [1.69137054E12, 1010.0], [1.69137276E12, 349.0], [1.69137024E12, 456.0], [1.69137216E12, 2589.0], [1.69137186E12, 13832.0], [1.69137156E12, 3992.0], [1.69137126E12, 6993.0], [1.69137258E12, 1235.0], [1.69137096E12, 3731.0], [1.69137066E12, 1744.0], [1.69137036E12, 502.0], [1.69137198E12, 14203.0], [1.69137006E12, 392.0], [1.69137228E12, 6995.0], [1.69137168E12, 4135.0], [1.69137138E12, 3776.0], [1.6913727E12, 2392.0], [1.69137108E12, 1975.0], [1.69137078E12, 1297.0], [1.69137048E12, 1248.0], [1.6913721E12, 53568.0], [1.69137018E12, 2342.0], [1.6913724E12, 1910.0], [1.6913718E12, 7475.0], [1.6913715E12, 4518.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69137282E12, 198.0], [1.6913712E12, 583.0], [1.6913709E12, 444.0], [1.6913706E12, 335.0], [1.69137222E12, 546.0], [1.6913703E12, 184.0], [1.69137252E12, 355.0], [1.69137E12, 122.0], [1.69137192E12, 1112.0], [1.69137162E12, 853.0], [1.69137132E12, 635.0], [1.69137102E12, 523.0], [1.69137072E12, 426.0], [1.69137234E12, 445.0], [1.69137042E12, 255.0], [1.69137264E12, 205.0], [1.69137012E12, 136.0], [1.69137204E12, 686.0], [1.69137174E12, 802.0], [1.69137144E12, 638.0], [1.69137114E12, 524.0], [1.69137084E12, 409.0], [1.69137246E12, 381.0], [1.69137054E12, 302.0], [1.69137276E12, 145.0], [1.69137024E12, 160.0], [1.69137216E12, 600.0], [1.69137186E12, 756.0], [1.69137156E12, 715.0], [1.69137126E12, 571.0], [1.69137258E12, 288.0], [1.69137096E12, 500.0], [1.69137066E12, 350.5], [1.69137036E12, 210.0], [1.69137198E12, 747.0], [1.69137006E12, 129.0], [1.69137228E12, 525.0], [1.69137168E12, 727.0], [1.69137138E12, 607.0], [1.6913727E12, 205.0], [1.69137108E12, 506.0], [1.69137078E12, 403.10000000000036], [1.69137048E12, 255.0], [1.6913721E12, 664.6000000000004], [1.69137018E12, 144.0], [1.6913724E12, 445.0], [1.6913718E12, 928.0], [1.6913715E12, 724.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69137282E12, 308.2000000000003], [1.6913712E12, 1010.6299999999992], [1.6913709E12, 631.7000000000007], [1.6913706E12, 538.0], [1.69137222E12, 1444.1899999999987], [1.6913703E12, 274.0], [1.69137252E12, 791.0], [1.69137E12, 143.66999999999996], [1.69137192E12, 2043.0], [1.69137162E12, 2136.6800000000003], [1.69137132E12, 1500.6599999999999], [1.69137102E12, 1221.7199999999993], [1.69137072E12, 825.8899999999921], [1.69137234E12, 633.0], [1.69137042E12, 489.0], [1.69137264E12, 318.0], [1.69137012E12, 187.0], [1.69137204E12, 1281.6900000000005], [1.69137174E12, 1452.0], [1.69137144E12, 1244.08], [1.69137114E12, 1065.9799999999996], [1.69137084E12, 828.0], [1.69137246E12, 508.53999999999905], [1.69137054E12, 466.0], [1.69137276E12, 232.0], [1.69137024E12, 212.0], [1.69137216E12, 1092.0], [1.69137186E12, 1428.0400000000009], [1.69137156E12, 1281.9500000000007], [1.69137126E12, 1157.7200000000012], [1.69137258E12, 414.0], [1.69137096E12, 879.880000000001], [1.69137066E12, 540.5499999999993], [1.69137036E12, 313.0], [1.69137198E12, 1861.2799999999988], [1.69137006E12, 150.6500000000001], [1.69137228E12, 1117.7799999999952], [1.69137168E12, 1383.0400000000009], [1.69137138E12, 917.5], [1.6913727E12, 356.47999999999956], [1.69137108E12, 738.3299999999999], [1.69137078E12, 524.1299999999974], [1.69137048E12, 370.0], [1.6913721E12, 1309.0], [1.69137018E12, 188.0], [1.6913724E12, 697.0], [1.6913718E12, 1928.0], [1.6913715E12, 1470.2400000000016]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69137282E12, 238.0], [1.6913712E12, 712.0], [1.6913709E12, 486.0], [1.6913706E12, 374.0], [1.69137222E12, 713.0], [1.6913703E12, 223.0], [1.69137252E12, 417.0], [1.69137E12, 127.0], [1.69137192E12, 1474.0499999999993], [1.69137162E12, 1252.7999999999993], [1.69137132E12, 867.2999999999993], [1.69137102E12, 614.1999999999989], [1.69137072E12, 524.0], [1.69137234E12, 482.0], [1.69137042E12, 302.0], [1.69137264E12, 270.0], [1.69137012E12, 145.0], [1.69137204E12, 960.0], [1.69137174E12, 1011.0], [1.69137144E12, 741.3999999999996], [1.69137114E12, 595.0], [1.69137084E12, 451.0], [1.69137246E12, 417.0], [1.69137054E12, 345.0], [1.69137276E12, 185.89999999999964], [1.69137024E12, 174.0], [1.69137216E12, 734.8999999999996], [1.69137186E12, 882.0], [1.69137156E12, 846.75], [1.69137126E12, 659.0], [1.69137258E12, 348.0], [1.69137096E12, 576.0], [1.69137066E12, 389.0], [1.69137036E12, 263.0], [1.69137198E12, 983.0], [1.69137006E12, 135.0], [1.69137228E12, 603.0], [1.69137168E12, 882.0], [1.69137138E12, 659.0], [1.6913727E12, 274.0], [1.69137108E12, 547.0], [1.69137078E12, 439.0], [1.69137048E12, 311.0], [1.6913721E12, 894.0], [1.69137018E12, 155.0], [1.6913724E12, 489.0], [1.6913718E12, 1135.0999999999967], [1.6913715E12, 920.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.69137282E12, 18.0], [1.6913712E12, 184.0], [1.6913709E12, 147.0], [1.6913706E12, 63.0], [1.69137222E12, 155.0], [1.6913703E12, 19.0], [1.69137252E12, 72.0], [1.69137E12, 19.0], [1.69137192E12, 262.0], [1.69137162E12, 257.0], [1.69137132E12, 166.0], [1.69137102E12, 159.0], [1.69137072E12, 108.0], [1.69137234E12, 141.0], [1.69137042E12, 44.0], [1.69137264E12, 29.0], [1.69137012E12, 15.0], [1.69137204E12, 226.0], [1.69137174E12, 267.0], [1.69137144E12, 203.0], [1.69137114E12, 179.0], [1.69137084E12, 119.0], [1.69137246E12, 96.0], [1.69137054E12, 63.0], [1.69137276E12, 17.0], [1.69137024E12, 17.0], [1.69137216E12, 190.0], [1.69137186E12, 266.0], [1.69137156E12, 266.0], [1.69137126E12, 210.0], [1.69137258E12, 36.0], [1.69137096E12, 168.0], [1.69137066E12, 82.0], [1.69137036E12, 30.0], [1.69137198E12, 178.0], [1.69137006E12, 16.0], [1.69137228E12, 135.0], [1.69137168E12, 288.0], [1.69137138E12, 222.0], [1.6913727E12, 17.0], [1.69137108E12, 178.0], [1.69137078E12, 105.0], [1.69137048E12, 45.0], [1.6913721E12, 201.0], [1.69137018E12, 16.0], [1.6913724E12, 93.0], [1.6913718E12, 292.0], [1.6913715E12, 229.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69137282E12, 75.0], [1.6913712E12, 398.0], [1.6913709E12, 288.0], [1.6913706E12, 187.0], [1.69137222E12, 364.5], [1.6913703E12, 79.0], [1.69137252E12, 192.0], [1.69137E12, 31.0], [1.69137192E12, 532.0], [1.69137162E12, 529.0], [1.69137132E12, 438.0], [1.69137102E12, 338.0], [1.69137072E12, 256.0], [1.69137234E12, 290.0], [1.69137042E12, 119.0], [1.69137264E12, 94.0], [1.69137012E12, 39.0], [1.69137204E12, 452.0], [1.69137174E12, 562.0], [1.69137144E12, 467.0], [1.69137114E12, 362.0], [1.69137084E12, 265.0], [1.69137246E12, 223.0], [1.69137054E12, 168.0], [1.69137276E12, 43.0], [1.69137024E12, 58.0], [1.69137216E12, 406.0], [1.69137186E12, 564.0], [1.69137156E12, 523.0], [1.69137126E12, 407.0], [1.69137258E12, 151.0], [1.69137096E12, 332.0], [1.69137066E12, 202.0], [1.69137036E12, 97.0], [1.69137198E12, 526.0], [1.69137006E12, 34.0], [1.69137228E12, 343.0], [1.69137168E12, 536.0], [1.69137138E12, 447.0], [1.6913727E12, 86.0], [1.69137108E12, 356.0], [1.69137078E12, 247.0], [1.69137048E12, 137.0], [1.6913721E12, 459.0], [1.69137018E12, 43.0], [1.6913724E12, 265.0], [1.6913718E12, 580.0], [1.6913715E12, 493.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69137282E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 30.0, "minX": 3.0, "maxY": 1499.0, "series": [{"data": [[3.0, 30.0], [8.0, 1079.0], [12.0, 34.0], [16.0, 31.0], [17.0, 31.0], [18.0, 31.5], [22.0, 1499.0], [23.0, 1200.0], [26.0, 557.5], [27.0, 1215.0], [29.0, 1009.5], [31.0, 117.0], [32.0, 39.0], [33.0, 554.0], [35.0, 32.0], [34.0, 31.0], [36.0, 1225.0], [37.0, 778.0], [39.0, 991.0], [38.0, 1191.0], [41.0, 126.5], [42.0, 1225.5], [44.0, 472.5], [46.0, 1048.0], [47.0, 215.5], [48.0, 277.0], [49.0, 107.5], [50.0, 122.0], [51.0, 47.0], [53.0, 409.0], [52.0, 764.5], [54.0, 1194.5], [55.0, 770.5], [56.0, 759.5], [59.0, 33.0], [61.0, 37.0], [60.0, 557.5], [62.0, 239.5], [63.0, 1017.0], [64.0, 34.0], [67.0, 331.0], [65.0, 142.0], [66.0, 124.0], [68.0, 66.0], [71.0, 380.5], [69.0, 463.0], [72.0, 514.0], [75.0, 140.5], [74.0, 608.5], [77.0, 122.0], [78.0, 205.5], [79.0, 119.0], [76.0, 146.0], [80.0, 130.0], [81.0, 334.0], [83.0, 443.0], [82.0, 900.0], [85.0, 119.0], [87.0, 271.0], [84.0, 339.0], [89.0, 122.0], [88.0, 131.0], [91.0, 37.0], [90.0, 366.0], [94.0, 219.5], [93.0, 268.5], [95.0, 444.0], [92.0, 355.0], [96.0, 542.5], [98.0, 136.0], [97.0, 296.5], [99.0, 452.0], [100.0, 47.0], [102.0, 329.5], [101.0, 730.0], [103.0, 303.0], [104.0, 266.5], [107.0, 379.0], [106.0, 379.0], [105.0, 424.0], [108.0, 130.0], [111.0, 103.0], [109.0, 126.0], [110.0, 577.0], [114.0, 487.0], [113.0, 247.0], [112.0, 250.0], [115.0, 531.0], [118.0, 162.0], [119.0, 124.0], [117.0, 508.0], [116.0, 168.0], [120.0, 260.0], [122.0, 309.0], [123.0, 116.0], [121.0, 171.5], [125.0, 339.5], [127.0, 436.0], [124.0, 120.0], [126.0, 414.5], [134.0, 100.0], [132.0, 46.0], [133.0, 113.0], [130.0, 43.0], [135.0, 132.0], [128.0, 130.0], [129.0, 153.0], [131.0, 112.0], [137.0, 129.0], [136.0, 129.0], [138.0, 139.5], [143.0, 210.0], [141.0, 207.0], [139.0, 132.0], [140.0, 269.0], [142.0, 138.0], [145.0, 202.0], [146.0, 207.0], [147.0, 352.0], [150.0, 343.0], [144.0, 255.0], [151.0, 294.0], [149.0, 273.0], [148.0, 295.0], [156.0, 316.0], [155.0, 295.0], [153.0, 359.0], [158.0, 319.0], [154.0, 328.0], [159.0, 322.0], [152.0, 344.0], [157.0, 305.0], [160.0, 320.0], [163.0, 304.0], [165.0, 335.0], [166.0, 336.0], [162.0, 287.0], [161.0, 297.0], [164.0, 275.0], [167.0, 325.0], [169.0, 335.0], [168.0, 331.0], [171.0, 352.0], [173.0, 324.0], [170.0, 344.0], [172.0, 341.0], [175.0, 371.0], [174.0, 324.0], [180.0, 360.0], [181.0, 324.0], [176.0, 334.0], [178.0, 363.0], [177.0, 297.0], [183.0, 323.0], [179.0, 333.5], [182.0, 342.0], [186.0, 405.0], [185.0, 361.0], [184.0, 413.0], [187.0, 424.5], [188.0, 358.0], [191.0, 370.0], [190.0, 356.5], [189.0, 391.0], [194.0, 348.0], [193.0, 373.0], [197.0, 366.5], [192.0, 444.0], [196.0, 435.0], [198.0, 463.0], [195.0, 318.0], [203.0, 336.0], [210.0, 254.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 210.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 30.0, "minX": 3.0, "maxY": 1497.5, "series": [{"data": [[3.0, 30.0], [8.0, 1079.0], [12.0, 33.0], [16.0, 30.5], [17.0, 30.0], [18.0, 31.5], [22.0, 1497.5], [23.0, 1200.0], [26.0, 557.0], [27.0, 1215.0], [29.0, 1009.5], [31.0, 117.0], [32.0, 38.5], [33.0, 487.5], [35.0, 32.0], [34.0, 31.0], [36.0, 1225.0], [37.0, 764.0], [39.0, 991.0], [38.0, 1190.0], [41.0, 126.5], [42.0, 1214.5], [44.0, 468.0], [46.0, 1044.0], [47.0, 215.5], [48.0, 277.0], [49.0, 107.5], [50.0, 121.0], [51.0, 46.5], [53.0, 409.0], [52.0, 753.0], [54.0, 1191.5], [55.0, 770.5], [56.0, 758.5], [59.0, 32.0], [61.0, 34.0], [60.0, 557.5], [62.0, 239.5], [63.0, 1016.0], [64.0, 33.0], [67.0, 331.0], [65.0, 142.0], [66.0, 123.5], [68.0, 64.0], [71.0, 378.0], [69.0, 462.0], [72.0, 514.0], [75.0, 139.5], [74.0, 607.0], [77.0, 122.0], [78.0, 201.5], [79.0, 118.5], [76.0, 145.0], [80.0, 130.0], [81.0, 334.0], [83.0, 442.0], [82.0, 896.0], [85.0, 118.0], [87.0, 268.0], [84.0, 335.5], [89.0, 122.0], [88.0, 130.5], [91.0, 36.0], [90.0, 365.5], [94.0, 216.0], [93.0, 268.5], [95.0, 443.5], [92.0, 355.0], [96.0, 541.0], [98.0, 136.0], [97.0, 241.0], [99.0, 435.0], [100.0, 47.0], [102.0, 329.5], [101.0, 728.0], [103.0, 303.0], [104.0, 264.5], [107.0, 372.5], [106.0, 378.0], [105.0, 422.5], [108.0, 129.0], [111.0, 100.0], [109.0, 126.0], [110.0, 577.0], [114.0, 486.0], [113.0, 245.5], [112.0, 250.0], [115.0, 529.5], [118.0, 160.5], [119.0, 124.0], [117.0, 507.5], [116.0, 166.5], [120.0, 258.5], [122.0, 306.0], [123.0, 115.0], [121.0, 171.0], [125.0, 338.0], [127.0, 433.0], [124.0, 119.0], [126.0, 414.5], [134.0, 100.0], [132.0, 45.0], [133.0, 112.0], [130.0, 42.5], [135.0, 131.0], [128.0, 130.0], [129.0, 152.0], [131.0, 112.0], [137.0, 128.0], [136.0, 128.0], [138.0, 138.5], [143.0, 209.0], [141.0, 205.5], [139.0, 132.0], [140.0, 268.0], [142.0, 137.0], [145.0, 201.0], [146.0, 205.0], [147.0, 351.0], [150.0, 340.0], [144.0, 253.0], [151.0, 294.0], [149.0, 273.0], [148.0, 291.5], [156.0, 315.0], [155.0, 293.0], [153.0, 359.0], [158.0, 318.0], [154.0, 327.0], [159.0, 321.0], [152.0, 343.0], [157.0, 304.0], [160.0, 319.0], [163.0, 302.0], [165.0, 333.0], [166.0, 335.0], [162.0, 286.0], [161.0, 296.0], [164.0, 274.0], [167.0, 324.0], [169.0, 334.0], [168.0, 329.0], [171.0, 351.0], [173.0, 323.0], [170.0, 343.0], [172.0, 340.0], [175.0, 370.0], [174.0, 323.0], [180.0, 359.0], [181.0, 323.0], [176.0, 332.0], [178.0, 362.0], [177.0, 296.0], [183.0, 322.0], [179.0, 332.0], [182.0, 342.0], [186.0, 404.5], [185.0, 361.0], [184.0, 413.0], [187.0, 424.0], [188.0, 357.5], [191.0, 369.0], [190.0, 356.0], [189.0, 390.5], [194.0, 347.0], [193.0, 373.0], [197.0, 365.0], [192.0, 444.0], [196.0, 434.5], [198.0, 462.0], [195.0, 318.0], [203.0, 336.0], [210.0, 254.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 210.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 8.9, "minX": 1.69137E12, "maxY": 168.58333333333334, "series": [{"data": [[1.69137282E12, 24.483333333333334], [1.6913712E12, 157.33333333333334], [1.6913709E12, 165.53333333333333], [1.6913706E12, 155.85], [1.69137222E12, 153.6], [1.6913703E12, 155.95], [1.69137252E12, 148.21666666666667], [1.69137E12, 8.9], [1.69137192E12, 144.13333333333333], [1.69137162E12, 145.56666666666666], [1.69137132E12, 152.26666666666668], [1.69137102E12, 152.98333333333332], [1.69137072E12, 143.0], [1.69137234E12, 163.5], [1.69137042E12, 151.55], [1.69137264E12, 158.1], [1.69137012E12, 100.1], [1.69137204E12, 157.2], [1.69137174E12, 161.71666666666667], [1.69137144E12, 163.23333333333332], [1.69137114E12, 163.4], [1.69137084E12, 165.08333333333334], [1.69137246E12, 162.4], [1.69137054E12, 155.73333333333332], [1.69137276E12, 132.01666666666668], [1.69137024E12, 159.96666666666667], [1.69137216E12, 159.68333333333334], [1.69137186E12, 168.58333333333334], [1.69137156E12, 158.46666666666667], [1.69137126E12, 161.1], [1.69137258E12, 160.88333333333333], [1.69137096E12, 151.8], [1.69137066E12, 160.8], [1.69137036E12, 158.73333333333332], [1.69137198E12, 155.41666666666666], [1.69137006E12, 57.28333333333333], [1.69137228E12, 157.93333333333334], [1.69137168E12, 166.26666666666668], [1.69137138E12, 165.88333333333333], [1.6913727E12, 140.73333333333332], [1.69137108E12, 162.81666666666666], [1.69137078E12, 160.53333333333333], [1.69137048E12, 160.61666666666667], [1.6913721E12, 152.05], [1.69137018E12, 140.06666666666666], [1.6913724E12, 156.48333333333332], [1.6913718E12, 154.1], [1.6913715E12, 156.5]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69137282E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 8.866666666666667, "minX": 1.69137E12, "maxY": 168.58333333333334, "series": [{"data": [[1.69137282E12, 24.65], [1.6913712E12, 157.26666666666668], [1.6913709E12, 165.48333333333332], [1.6913706E12, 155.78333333333333], [1.69137222E12, 153.76666666666668], [1.6913703E12, 155.9], [1.69137252E12, 148.36666666666667], [1.69137E12, 8.866666666666667], [1.69137192E12, 144.3], [1.69137162E12, 145.51666666666668], [1.69137132E12, 152.21666666666667], [1.69137102E12, 152.91666666666666], [1.69137072E12, 142.96666666666667], [1.69137234E12, 163.5], [1.69137042E12, 151.5], [1.69137264E12, 158.13333333333333], [1.69137012E12, 100.03333333333333], [1.69137204E12, 157.2], [1.69137174E12, 161.65], [1.69137144E12, 163.18333333333334], [1.69137114E12, 163.35], [1.69137084E12, 165.01666666666668], [1.69137246E12, 162.41666666666666], [1.69137054E12, 155.7], [1.69137276E12, 132.01666666666668], [1.69137024E12, 159.91666666666666], [1.69137216E12, 159.68333333333334], [1.69137186E12, 168.58333333333334], [1.69137156E12, 158.4], [1.69137126E12, 161.05], [1.69137258E12, 161.06666666666666], [1.69137096E12, 151.75], [1.69137066E12, 160.73333333333332], [1.69137036E12, 158.66666666666666], [1.69137198E12, 155.58333333333334], [1.69137006E12, 57.233333333333334], [1.69137228E12, 158.1], [1.69137168E12, 166.21666666666667], [1.69137138E12, 165.81666666666666], [1.6913727E12, 140.85], [1.69137108E12, 162.76666666666668], [1.69137078E12, 160.46666666666667], [1.69137048E12, 160.55], [1.6913721E12, 152.21666666666667], [1.69137018E12, 140.01666666666668], [1.6913724E12, 156.65], [1.6913718E12, 154.08333333333334], [1.6913715E12, 156.45]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69137282E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 8.866666666666667, "minX": 1.69137E12, "maxY": 168.58333333333334, "series": [{"data": [[1.69137282E12, 24.65], [1.6913712E12, 157.26666666666668], [1.6913709E12, 165.48333333333332], [1.6913706E12, 155.78333333333333], [1.69137222E12, 153.76666666666668], [1.6913703E12, 155.9], [1.69137252E12, 148.36666666666667], [1.69137E12, 8.866666666666667], [1.69137192E12, 144.3], [1.69137162E12, 145.51666666666668], [1.69137132E12, 152.21666666666667], [1.69137102E12, 152.91666666666666], [1.69137072E12, 142.96666666666667], [1.69137234E12, 163.5], [1.69137042E12, 151.5], [1.69137264E12, 158.13333333333333], [1.69137012E12, 100.03333333333333], [1.69137204E12, 157.2], [1.69137174E12, 161.65], [1.69137144E12, 163.18333333333334], [1.69137114E12, 163.35], [1.69137084E12, 165.01666666666668], [1.69137246E12, 162.41666666666666], [1.69137054E12, 155.7], [1.69137276E12, 132.01666666666668], [1.69137024E12, 159.91666666666666], [1.69137216E12, 159.68333333333334], [1.69137186E12, 168.58333333333334], [1.69137156E12, 158.4], [1.69137126E12, 161.05], [1.69137258E12, 161.06666666666666], [1.69137096E12, 151.75], [1.69137066E12, 160.73333333333332], [1.69137036E12, 158.66666666666666], [1.69137198E12, 155.58333333333334], [1.69137006E12, 57.233333333333334], [1.69137228E12, 158.1], [1.69137168E12, 166.21666666666667], [1.69137138E12, 165.81666666666666], [1.6913727E12, 140.85], [1.69137108E12, 162.76666666666668], [1.69137078E12, 160.46666666666667], [1.69137048E12, 160.55], [1.6913721E12, 152.21666666666667], [1.69137018E12, 140.01666666666668], [1.6913724E12, 156.65], [1.6913718E12, 154.08333333333334], [1.6913715E12, 156.45]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69137282E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 8.866666666666667, "minX": 1.69137E12, "maxY": 168.58333333333334, "series": [{"data": [[1.69137282E12, 24.65], [1.6913712E12, 157.26666666666668], [1.6913709E12, 165.48333333333332], [1.6913706E12, 155.78333333333333], [1.69137222E12, 153.76666666666668], [1.6913703E12, 155.9], [1.69137252E12, 148.36666666666667], [1.69137E12, 8.866666666666667], [1.69137192E12, 144.3], [1.69137162E12, 145.51666666666668], [1.69137132E12, 152.21666666666667], [1.69137102E12, 152.91666666666666], [1.69137072E12, 142.96666666666667], [1.69137234E12, 163.5], [1.69137042E12, 151.5], [1.69137264E12, 158.13333333333333], [1.69137012E12, 100.03333333333333], [1.69137204E12, 157.2], [1.69137174E12, 161.65], [1.69137144E12, 163.18333333333334], [1.69137114E12, 163.35], [1.69137084E12, 165.01666666666668], [1.69137246E12, 162.41666666666666], [1.69137054E12, 155.7], [1.69137276E12, 132.01666666666668], [1.69137024E12, 159.91666666666666], [1.69137216E12, 159.68333333333334], [1.69137186E12, 168.58333333333334], [1.69137156E12, 158.4], [1.69137126E12, 161.05], [1.69137258E12, 161.06666666666666], [1.69137096E12, 151.75], [1.69137066E12, 160.73333333333332], [1.69137036E12, 158.66666666666666], [1.69137198E12, 155.58333333333334], [1.69137006E12, 57.233333333333334], [1.69137228E12, 158.1], [1.69137168E12, 166.21666666666667], [1.69137138E12, 165.81666666666666], [1.6913727E12, 140.85], [1.69137108E12, 162.76666666666668], [1.69137078E12, 160.46666666666667], [1.69137048E12, 160.55], [1.6913721E12, 152.21666666666667], [1.69137018E12, 140.01666666666668], [1.6913724E12, 156.65], [1.6913718E12, 154.08333333333334], [1.6913715E12, 156.45]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69137282E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

